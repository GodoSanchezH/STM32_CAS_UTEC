
Ejemplo4_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800336c  0800336c  0001336c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d0  080033d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033d8  080033d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080033e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08003450  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003450  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009af0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191e  00000000  00000000  00029b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164d8  00000000  00000000  0002c818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b24f  00000000  00000000  00042cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b20a  00000000  00000000  0004df3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d74  00000000  00000000  000d919c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003354 	.word	0x08003354

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003354 	.word	0x08003354

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <GPIO_Init>:


#include "GPIO.h"

void GPIO_Init(uint8_t port,uint8_t pin,uint8_t dir,uint8_t speed,uint8_t opt)
{
 8000584:	b490      	push	{r4, r7}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4604      	mov	r4, r0
 800058c:	4608      	mov	r0, r1
 800058e:	4611      	mov	r1, r2
 8000590:	461a      	mov	r2, r3
 8000592:	4623      	mov	r3, r4
 8000594:	71fb      	strb	r3, [r7, #7]
 8000596:	4603      	mov	r3, r0
 8000598:	71bb      	strb	r3, [r7, #6]
 800059a:	460b      	mov	r3, r1
 800059c:	717b      	strb	r3, [r7, #5]
 800059e:	4613      	mov	r3, r2
 80005a0:	713b      	strb	r3, [r7, #4]

	switch (port) {
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b03      	cmp	r3, #3
 80005a6:	f000 808e 	beq.w	80006c6 <GPIO_Init+0x142>
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	f300 80ce 	bgt.w	800074c <GPIO_Init+0x1c8>
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d002      	beq.n	80005ba <GPIO_Init+0x36>
 80005b4:	2b02      	cmp	r3, #2
 80005b6:	d043      	beq.n	8000640 <GPIO_Init+0xbc>
					    }
			 GPIOC->PUPDR |= (opt<<(2*pin));
		break;

	}
}
 80005b8:	e0c8      	b.n	800074c <GPIO_Init+0x1c8>
			  RCC_AHB1ENR |= (1<<0);			//	Habilitamos el clock GPIOA
 80005ba:	4b67      	ldr	r3, [pc, #412]	; (8000758 <GPIO_Init+0x1d4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a66      	ldr	r2, [pc, #408]	; (8000758 <GPIO_Init+0x1d4>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6013      	str	r3, [r2, #0]
			  GPIOA->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida
 80005c6:	4b65      	ldr	r3, [pc, #404]	; (800075c <GPIO_Init+0x1d8>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	7979      	ldrb	r1, [r7, #5]
 80005cc:	79ba      	ldrb	r2, [r7, #6]
 80005ce:	0052      	lsls	r2, r2, #1
 80005d0:	fa01 f202 	lsl.w	r2, r1, r2
 80005d4:	4611      	mov	r1, r2
 80005d6:	4a61      	ldr	r2, [pc, #388]	; (800075c <GPIO_Init+0x1d8>)
 80005d8:	430b      	orrs	r3, r1
 80005da:	6013      	str	r3, [r2, #0]
			  if(dir==1){
 80005dc:	797b      	ldrb	r3, [r7, #5]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d122      	bne.n	8000628 <GPIO_Init+0xa4>
				  GPIOA->MODER &= ~( dir << (2*pin+1));
 80005e2:	4b5e      	ldr	r3, [pc, #376]	; (800075c <GPIO_Init+0x1d8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	7979      	ldrb	r1, [r7, #5]
 80005e8:	79ba      	ldrb	r2, [r7, #6]
 80005ea:	0052      	lsls	r2, r2, #1
 80005ec:	3201      	adds	r2, #1
 80005ee:	fa01 f202 	lsl.w	r2, r1, r2
 80005f2:	43d2      	mvns	r2, r2
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a59      	ldr	r2, [pc, #356]	; (800075c <GPIO_Init+0x1d8>)
 80005f8:	400b      	ands	r3, r1
 80005fa:	6013      	str	r3, [r2, #0]
				  GPIOA->OTYPER &= ~(1<<pin);	 //Push Pull
 80005fc:	4b57      	ldr	r3, [pc, #348]	; (800075c <GPIO_Init+0x1d8>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	79ba      	ldrb	r2, [r7, #6]
 8000602:	2101      	movs	r1, #1
 8000604:	fa01 f202 	lsl.w	r2, r1, r2
 8000608:	43d2      	mvns	r2, r2
 800060a:	4611      	mov	r1, r2
 800060c:	4a53      	ldr	r2, [pc, #332]	; (800075c <GPIO_Init+0x1d8>)
 800060e:	400b      	ands	r3, r1
 8000610:	6053      	str	r3, [r2, #4]
				  GPIOA->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
 8000612:	4b52      	ldr	r3, [pc, #328]	; (800075c <GPIO_Init+0x1d8>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	7939      	ldrb	r1, [r7, #4]
 8000618:	79ba      	ldrb	r2, [r7, #6]
 800061a:	0052      	lsls	r2, r2, #1
 800061c:	fa01 f202 	lsl.w	r2, r1, r2
 8000620:	4611      	mov	r1, r2
 8000622:	4a4e      	ldr	r2, [pc, #312]	; (800075c <GPIO_Init+0x1d8>)
 8000624:	430b      	orrs	r3, r1
 8000626:	6093      	str	r3, [r2, #8]
			  GPIOA->PUPDR |= (opt<<(2*pin));
 8000628:	4b4c      	ldr	r3, [pc, #304]	; (800075c <GPIO_Init+0x1d8>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	7c39      	ldrb	r1, [r7, #16]
 800062e:	79ba      	ldrb	r2, [r7, #6]
 8000630:	0052      	lsls	r2, r2, #1
 8000632:	fa01 f202 	lsl.w	r2, r1, r2
 8000636:	4611      	mov	r1, r2
 8000638:	4a48      	ldr	r2, [pc, #288]	; (800075c <GPIO_Init+0x1d8>)
 800063a:	430b      	orrs	r3, r1
 800063c:	60d3      	str	r3, [r2, #12]
			break;
 800063e:	e085      	b.n	800074c <GPIO_Init+0x1c8>
			  RCC_AHB1ENR |= (1<<1);			//	Habilitamos el clock GPIOB
 8000640:	4b45      	ldr	r3, [pc, #276]	; (8000758 <GPIO_Init+0x1d4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a44      	ldr	r2, [pc, #272]	; (8000758 <GPIO_Init+0x1d4>)
 8000646:	f043 0302 	orr.w	r3, r3, #2
 800064a:	6013      	str	r3, [r2, #0]
			  GPIOB->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida o entrada
 800064c:	4b44      	ldr	r3, [pc, #272]	; (8000760 <GPIO_Init+0x1dc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	7979      	ldrb	r1, [r7, #5]
 8000652:	79ba      	ldrb	r2, [r7, #6]
 8000654:	0052      	lsls	r2, r2, #1
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	4611      	mov	r1, r2
 800065c:	4a40      	ldr	r2, [pc, #256]	; (8000760 <GPIO_Init+0x1dc>)
 800065e:	430b      	orrs	r3, r1
 8000660:	6013      	str	r3, [r2, #0]
			  if(dir==1){
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d122      	bne.n	80006ae <GPIO_Init+0x12a>
				  GPIOB->MODER &= ~( dir << (2*pin+1));
 8000668:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <GPIO_Init+0x1dc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	7979      	ldrb	r1, [r7, #5]
 800066e:	79ba      	ldrb	r2, [r7, #6]
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	3201      	adds	r2, #1
 8000674:	fa01 f202 	lsl.w	r2, r1, r2
 8000678:	43d2      	mvns	r2, r2
 800067a:	4611      	mov	r1, r2
 800067c:	4a38      	ldr	r2, [pc, #224]	; (8000760 <GPIO_Init+0x1dc>)
 800067e:	400b      	ands	r3, r1
 8000680:	6013      	str	r3, [r2, #0]
			 			GPIOB->OTYPER &= ~(1<<pin);	 //Push Pull
 8000682:	4b37      	ldr	r3, [pc, #220]	; (8000760 <GPIO_Init+0x1dc>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	79ba      	ldrb	r2, [r7, #6]
 8000688:	2101      	movs	r1, #1
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	43d2      	mvns	r2, r2
 8000690:	4611      	mov	r1, r2
 8000692:	4a33      	ldr	r2, [pc, #204]	; (8000760 <GPIO_Init+0x1dc>)
 8000694:	400b      	ands	r3, r1
 8000696:	6053      	str	r3, [r2, #4]
			 			GPIOB->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
 8000698:	4b31      	ldr	r3, [pc, #196]	; (8000760 <GPIO_Init+0x1dc>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	7939      	ldrb	r1, [r7, #4]
 800069e:	79ba      	ldrb	r2, [r7, #6]
 80006a0:	0052      	lsls	r2, r2, #1
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a2d      	ldr	r2, [pc, #180]	; (8000760 <GPIO_Init+0x1dc>)
 80006aa:	430b      	orrs	r3, r1
 80006ac:	6093      	str	r3, [r2, #8]
			  GPIOB->PUPDR |= (opt<<(2*pin));
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <GPIO_Init+0x1dc>)
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	7c39      	ldrb	r1, [r7, #16]
 80006b4:	79ba      	ldrb	r2, [r7, #6]
 80006b6:	0052      	lsls	r2, r2, #1
 80006b8:	fa01 f202 	lsl.w	r2, r1, r2
 80006bc:	4611      	mov	r1, r2
 80006be:	4a28      	ldr	r2, [pc, #160]	; (8000760 <GPIO_Init+0x1dc>)
 80006c0:	430b      	orrs	r3, r1
 80006c2:	60d3      	str	r3, [r2, #12]
			  break;
 80006c4:	e042      	b.n	800074c <GPIO_Init+0x1c8>
			 RCC_AHB1ENR |= (1<<2);			    //	Habilitamos el clock GPIOC
 80006c6:	4b24      	ldr	r3, [pc, #144]	; (8000758 <GPIO_Init+0x1d4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a23      	ldr	r2, [pc, #140]	; (8000758 <GPIO_Init+0x1d4>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6013      	str	r3, [r2, #0]
			 GPIOC->MODER |= ( dir << (2*pin)); //Habilitamos el Modo de Salida o entrada
 80006d2:	4b24      	ldr	r3, [pc, #144]	; (8000764 <GPIO_Init+0x1e0>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7979      	ldrb	r1, [r7, #5]
 80006d8:	79ba      	ldrb	r2, [r7, #6]
 80006da:	0052      	lsls	r2, r2, #1
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	4611      	mov	r1, r2
 80006e2:	4a20      	ldr	r2, [pc, #128]	; (8000764 <GPIO_Init+0x1e0>)
 80006e4:	430b      	orrs	r3, r1
 80006e6:	6013      	str	r3, [r2, #0]
			 if(dir==1){
 80006e8:	797b      	ldrb	r3, [r7, #5]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d122      	bne.n	8000734 <GPIO_Init+0x1b0>
				 	 	GPIOC->MODER &= ~( dir << (2*pin+1));
 80006ee:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <GPIO_Init+0x1e0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	7979      	ldrb	r1, [r7, #5]
 80006f4:	79ba      	ldrb	r2, [r7, #6]
 80006f6:	0052      	lsls	r2, r2, #1
 80006f8:	3201      	adds	r2, #1
 80006fa:	fa01 f202 	lsl.w	r2, r1, r2
 80006fe:	43d2      	mvns	r2, r2
 8000700:	4611      	mov	r1, r2
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <GPIO_Init+0x1e0>)
 8000704:	400b      	ands	r3, r1
 8000706:	6013      	str	r3, [r2, #0]
						GPIOC->OTYPER &= ~(1<<pin);	 //Push Pull
 8000708:	4b16      	ldr	r3, [pc, #88]	; (8000764 <GPIO_Init+0x1e0>)
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	79ba      	ldrb	r2, [r7, #6]
 800070e:	2101      	movs	r1, #1
 8000710:	fa01 f202 	lsl.w	r2, r1, r2
 8000714:	43d2      	mvns	r2, r2
 8000716:	4611      	mov	r1, r2
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <GPIO_Init+0x1e0>)
 800071a:	400b      	ands	r3, r1
 800071c:	6053      	str	r3, [r2, #4]
						GPIOC->OSPEEDR |= (speed<<(2*pin));//Velocidad Output
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <GPIO_Init+0x1e0>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	7939      	ldrb	r1, [r7, #4]
 8000724:	79ba      	ldrb	r2, [r7, #6]
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	fa01 f202 	lsl.w	r2, r1, r2
 800072c:	4611      	mov	r1, r2
 800072e:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <GPIO_Init+0x1e0>)
 8000730:	430b      	orrs	r3, r1
 8000732:	6093      	str	r3, [r2, #8]
			 GPIOC->PUPDR |= (opt<<(2*pin));
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <GPIO_Init+0x1e0>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	7c39      	ldrb	r1, [r7, #16]
 800073a:	79ba      	ldrb	r2, [r7, #6]
 800073c:	0052      	lsls	r2, r2, #1
 800073e:	fa01 f202 	lsl.w	r2, r1, r2
 8000742:	4611      	mov	r1, r2
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <GPIO_Init+0x1e0>)
 8000746:	430b      	orrs	r3, r1
 8000748:	60d3      	str	r3, [r2, #12]
		break;
 800074a:	bf00      	nop
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bc90      	pop	{r4, r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40023830 	.word	0x40023830
 800075c:	40020000 	.word	0x40020000
 8000760:	40020400 	.word	0x40020400
 8000764:	40020800 	.word	0x40020800

08000768 <LCD_STM32_DataBus>:
#include "LCD_STM32.h"
#include "stm32f4xx_hal.h"
#include "GPIO.h"
Ubicacion Cursor;

void LCD_STM32_DataBus(uint8_t a){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	//0000 0001
	if(a & 0x01){ D4_ON;}
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b00      	cmp	r3, #0
 800077a:	d006      	beq.n	800078a <LCD_STM32_DataBus+0x22>
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <LCD_STM32_DataBus+0xa8>)
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	4a23      	ldr	r2, [pc, #140]	; (8000810 <LCD_STM32_DataBus+0xa8>)
 8000782:	f043 0310 	orr.w	r3, r3, #16
 8000786:	6153      	str	r3, [r2, #20]
 8000788:	e005      	b.n	8000796 <LCD_STM32_DataBus+0x2e>
    else{ D4_OFF;}
 800078a:	4b21      	ldr	r3, [pc, #132]	; (8000810 <LCD_STM32_DataBus+0xa8>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a20      	ldr	r2, [pc, #128]	; (8000810 <LCD_STM32_DataBus+0xa8>)
 8000790:	f023 0310 	bic.w	r3, r3, #16
 8000794:	6153      	str	r3, [r2, #20]
    //0000 0010
    if(a & 0x02) {D5_ON;}
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 0302 	and.w	r3, r3, #2
 800079c:	2b00      	cmp	r3, #0
 800079e:	d006      	beq.n	80007ae <LCD_STM32_DataBus+0x46>
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <LCD_STM32_DataBus+0xac>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <LCD_STM32_DataBus+0xac>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6153      	str	r3, [r2, #20]
 80007ac:	e005      	b.n	80007ba <LCD_STM32_DataBus+0x52>
    else{D5_OFF;}
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <LCD_STM32_DataBus+0xac>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <LCD_STM32_DataBus+0xac>)
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	6153      	str	r3, [r2, #20]
    //0000 0100
    if(a & 0x04){D6_ON;}
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d006      	beq.n	80007d2 <LCD_STM32_DataBus+0x6a>
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <LCD_STM32_DataBus+0xb0>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a13      	ldr	r2, [pc, #76]	; (8000818 <LCD_STM32_DataBus+0xb0>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	6153      	str	r3, [r2, #20]
 80007d0:	e005      	b.n	80007de <LCD_STM32_DataBus+0x76>
    else{D6_OFF;}
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <LCD_STM32_DataBus+0xb0>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a10      	ldr	r2, [pc, #64]	; (8000818 <LCD_STM32_DataBus+0xb0>)
 80007d8:	f023 0301 	bic.w	r3, r3, #1
 80007dc:	6153      	str	r3, [r2, #20]
     //0000 1000
    if(a & 0x08){D7_ON;}
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f003 0308 	and.w	r3, r3, #8
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d006      	beq.n	80007f6 <LCD_STM32_DataBus+0x8e>
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <LCD_STM32_DataBus+0xb0>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	4a0a      	ldr	r2, [pc, #40]	; (8000818 <LCD_STM32_DataBus+0xb0>)
 80007ee:	f043 0302 	orr.w	r3, r3, #2
 80007f2:	6153      	str	r3, [r2, #20]
    else{D7_OFF;}

}
 80007f4:	e005      	b.n	8000802 <LCD_STM32_DataBus+0x9a>
    else{D7_OFF;}
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <LCD_STM32_DataBus+0xb0>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a07      	ldr	r2, [pc, #28]	; (8000818 <LCD_STM32_DataBus+0xb0>)
 80007fc:	f023 0302 	bic.w	r3, r3, #2
 8000800:	6153      	str	r3, [r2, #20]
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40020000 	.word	0x40020000
 8000814:	40020400 	.word	0x40020400
 8000818:	40020800 	.word	0x40020800

0800081c <LCD_STM32_Cmd>:
void LCD_STM32_Cmd(uint8_t a){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
    E_OFF;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <LCD_STM32_Cmd+0x44>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a0d      	ldr	r2, [pc, #52]	; (8000860 <LCD_STM32_Cmd+0x44>)
 800082c:	f023 0304 	bic.w	r3, r3, #4
 8000830:	6153      	str	r3, [r2, #20]
    E_ON;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <LCD_STM32_Cmd+0x44>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <LCD_STM32_Cmd+0x44>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6153      	str	r3, [r2, #20]
    LCD_STM32_DataBus(a);    //Datos
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff91 	bl	8000768 <LCD_STM32_DataBus>
    HAL_Delay(2);
 8000846:	2002      	movs	r0, #2
 8000848:	f000 fcda 	bl	8001200 <HAL_Delay>
    E_OFF;
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <LCD_STM32_Cmd+0x44>)
 800084e:	695b      	ldr	r3, [r3, #20]
 8000850:	4a03      	ldr	r2, [pc, #12]	; (8000860 <LCD_STM32_Cmd+0x44>)
 8000852:	f023 0304 	bic.w	r3, r3, #4
 8000856:	6153      	str	r3, [r2, #20]
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40020000 	.word	0x40020000

08000864 <LCD_STM32_Init>:
void LCD_STM32_Init(void){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af02      	add	r7, sp, #8

GPIO_Init(PA, 2, Output, OUT25, No_pull_up_pull_down);//E
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2301      	movs	r3, #1
 8000870:	2201      	movs	r2, #1
 8000872:	2102      	movs	r1, #2
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff fe85 	bl	8000584 <GPIO_Init>
GPIO_Init(PA, 1, Output, OUT25, No_pull_up_pull_down);//RS
 800087a:	2300      	movs	r3, #0
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2301      	movs	r3, #1
 8000880:	2201      	movs	r2, #1
 8000882:	2101      	movs	r1, #1
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff fe7d 	bl	8000584 <GPIO_Init>
GPIO_Init(PA, 4, Output, OUT25, No_pull_up_pull_down);//D4
 800088a:	2300      	movs	r3, #0
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2301      	movs	r3, #1
 8000890:	2201      	movs	r2, #1
 8000892:	2104      	movs	r1, #4
 8000894:	2001      	movs	r0, #1
 8000896:	f7ff fe75 	bl	8000584 <GPIO_Init>
GPIO_Init(PB, 0, Output, OUT25, No_pull_up_pull_down);//D5
 800089a:	2300      	movs	r3, #0
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2301      	movs	r3, #1
 80008a0:	2201      	movs	r2, #1
 80008a2:	2100      	movs	r1, #0
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fe6d 	bl	8000584 <GPIO_Init>
GPIO_Init(PC, 1, Output, OUT25, No_pull_up_pull_down);//D6
 80008aa:	2300      	movs	r3, #0
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	2301      	movs	r3, #1
 80008b0:	2201      	movs	r2, #1
 80008b2:	2101      	movs	r1, #1
 80008b4:	2003      	movs	r0, #3
 80008b6:	f7ff fe65 	bl	8000584 <GPIO_Init>
GPIO_Init(PC, 0, Output, OUT25, No_pull_up_pull_down);//D7
 80008ba:	2300      	movs	r3, #0
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	2301      	movs	r3, #1
 80008c0:	2201      	movs	r2, #1
 80008c2:	2100      	movs	r1, #0
 80008c4:	2003      	movs	r0, #3
 80008c6:	f7ff fe5d 	bl	8000584 <GPIO_Init>

    LCD_STM32_Cmd(0x03);
 80008ca:	2003      	movs	r0, #3
 80008cc:	f7ff ffa6 	bl	800081c <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x03);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f7ff ffa3 	bl	800081c <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x03);
 80008d6:	2003      	movs	r0, #3
 80008d8:	f7ff ffa0 	bl	800081c <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x02);
 80008dc:	2002      	movs	r0, #2
 80008de:	f7ff ff9d 	bl	800081c <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x02);
 80008e2:	2002      	movs	r0, #2
 80008e4:	f7ff ff9a 	bl	800081c <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x08);
 80008e8:	2008      	movs	r0, #8
 80008ea:	f7ff ff97 	bl	800081c <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x00);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff ff94 	bl	800081c <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x08);
 80008f4:	2008      	movs	r0, #8
 80008f6:	f7ff ff91 	bl	800081c <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x00);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff ff8e 	bl	800081c <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x01);
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff ff8b 	bl	800081c <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x00);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff ff88 	bl	800081c <LCD_STM32_Cmd>
    LCD_STM32_Cmd(0x0C); //Inicializado
 800090c:	200c      	movs	r0, #12
 800090e:	f7ff ff85 	bl	800081c <LCD_STM32_Cmd>

}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LCD_STM32_SetCursor>:
void LCD_STM32_SetCursor(uint8_t x, Ubicacion y){
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	460a      	mov	r2, r1
 8000922:	71fb      	strb	r3, [r7, #7]
 8000924:	4613      	mov	r3, r2
 8000926:	71bb      	strb	r3, [r7, #6]
    RS_OFF;
 8000928:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <LCD_STM32_SetCursor+0xc4>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	4a2b      	ldr	r2, [pc, #172]	; (80009dc <LCD_STM32_SetCursor+0xc4>)
 800092e:	f023 0302 	bic.w	r3, r3, #2
 8000932:	6153      	str	r3, [r2, #20]
    uint8_t m,n;
     switch(y){
 8000934:	79bb      	ldrb	r3, [r7, #6]
 8000936:	3b01      	subs	r3, #1
 8000938:	2b03      	cmp	r3, #3
 800093a:	d84b      	bhi.n	80009d4 <LCD_STM32_SetCursor+0xbc>
 800093c:	a201      	add	r2, pc, #4	; (adr r2, 8000944 <LCD_STM32_SetCursor+0x2c>)
 800093e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000942:	bf00      	nop
 8000944:	08000955 	.word	0x08000955
 8000948:	08000975 	.word	0x08000975
 800094c:	08000995 	.word	0x08000995
 8000950:	080009b5 	.word	0x080009b5
        case FILA1:
            m=0x80+x;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3b80      	subs	r3, #128	; 0x80
 8000958:	73fb      	strb	r3, [r7, #15]
            n=(0x80+x)>>4;//Corrimiento de bits
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	3380      	adds	r3, #128	; 0x80
 800095e:	111b      	asrs	r3, r3, #4
 8000960:	73bb      	strb	r3, [r7, #14]
            LCD_STM32_Cmd(n);
 8000962:	7bbb      	ldrb	r3, [r7, #14]
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff59 	bl	800081c <LCD_STM32_Cmd>
            LCD_STM32_Cmd(m);
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff55 	bl	800081c <LCD_STM32_Cmd>
            break;
 8000972:	e02f      	b.n	80009d4 <LCD_STM32_SetCursor+0xbc>
        case FILA2:
            m=0xC0+x;
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	3b40      	subs	r3, #64	; 0x40
 8000978:	73fb      	strb	r3, [r7, #15]
            n=(0xC0+x)>>4;//Corrimiento de bits
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	33c0      	adds	r3, #192	; 0xc0
 800097e:	111b      	asrs	r3, r3, #4
 8000980:	73bb      	strb	r3, [r7, #14]
            LCD_STM32_Cmd(n);
 8000982:	7bbb      	ldrb	r3, [r7, #14]
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff49 	bl	800081c <LCD_STM32_Cmd>
            LCD_STM32_Cmd(m);
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff ff45 	bl	800081c <LCD_STM32_Cmd>
            break;
 8000992:	e01f      	b.n	80009d4 <LCD_STM32_SetCursor+0xbc>
        case FILA3:
            m=0x94+x;
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	3b6c      	subs	r3, #108	; 0x6c
 8000998:	73fb      	strb	r3, [r7, #15]
            n=(0x94+x)>>4;//Corrimiento de bits
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	3394      	adds	r3, #148	; 0x94
 800099e:	111b      	asrs	r3, r3, #4
 80009a0:	73bb      	strb	r3, [r7, #14]
            LCD_STM32_Cmd(n);
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff39 	bl	800081c <LCD_STM32_Cmd>
            LCD_STM32_Cmd(m);
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff35 	bl	800081c <LCD_STM32_Cmd>
            break;
 80009b2:	e00f      	b.n	80009d4 <LCD_STM32_SetCursor+0xbc>
        case FILA4:
            m=0xD4+x;
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	3b2c      	subs	r3, #44	; 0x2c
 80009b8:	73fb      	strb	r3, [r7, #15]
            n=(0xD4+x)>>4;//Corrimiento de bits
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	33d4      	adds	r3, #212	; 0xd4
 80009be:	111b      	asrs	r3, r3, #4
 80009c0:	73bb      	strb	r3, [r7, #14]
            LCD_STM32_Cmd(n);
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff ff29 	bl	800081c <LCD_STM32_Cmd>
            LCD_STM32_Cmd(m);
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff25 	bl	800081c <LCD_STM32_Cmd>
           break;
 80009d2:	bf00      	nop
    }
}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40020000 	.word	0x40020000

080009e0 <LCD_STM32_Print_Char>:
void LCD_STM32_Print_Char(char a){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
    uint8_t m,n;
    m=a>>4;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	091b      	lsrs	r3, r3, #4
 80009ee:	73fb      	strb	r3, [r7, #15]
    n=a;
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	73bb      	strb	r3, [r7, #14]
    RS_ON;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <LCD_STM32_Print_Char+0x38>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <LCD_STM32_Print_Char+0x38>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	6153      	str	r3, [r2, #20]
    LCD_STM32_Cmd(m);
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff0a 	bl	800081c <LCD_STM32_Cmd>
    LCD_STM32_Cmd(n);
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff06 	bl	800081c <LCD_STM32_Cmd>
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40020000 	.word	0x40020000

08000a1c <LCD_STM32_Print_String>:
void LCD_STM32_Print_String(char *a){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    char *ptr;
    ptr = a;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	60fb      	str	r3, [r7, #12]
    while (*ptr)
 8000a28:	e006      	b.n	8000a38 <LCD_STM32_Print_String+0x1c>
    	LCD_STM32_Print_Char(*ptr++);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1c5a      	adds	r2, r3, #1
 8000a2e:	60fa      	str	r2, [r7, #12]
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ffd4 	bl	80009e0 <LCD_STM32_Print_Char>
    while (*ptr)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1f4      	bne.n	8000a2a <LCD_STM32_Print_String+0xe>
}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a52:	f000 fb63 	bl	800111c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a56:	f000 f835 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5a:	f000 f989 	bl	8000d70 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a5e:	f000 f891 	bl	8000b84 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a62:	f000 f8df 	bl	8000c24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a66:	f000 f92f 	bl	8000cc8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  LCD_STM32_Init();
 8000a6a:	f7ff fefb 	bl	8000864 <LCD_STM32_Init>
 // HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_Base_Start(&htim3);
 8000a6e:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <main+0x6c>)
 8000a70:	f001 fb0e 	bl	8002090 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LCD_STM32_SetCursor(0, FILA1);
 8000a74:	2101      	movs	r1, #1
 8000a76:	2000      	movs	r0, #0
 8000a78:	f7ff ff4e 	bl	8000918 <LCD_STM32_SetCursor>
	  LCD_STM32_Print_String("Contador TIMER STM32");
 8000a7c:	480f      	ldr	r0, [pc, #60]	; (8000abc <main+0x70>)
 8000a7e:	f7ff ffcd 	bl	8000a1c <LCD_STM32_Print_String>

	  count = __HAL_TIM_GET_COUNTER(&htim3);
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <main+0x6c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a88:	617b      	str	r3, [r7, #20]
	  sprintf(str_cout,"%05u",count);
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <main+0x74>)
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fff1 	bl	8002a78 <siprintf>

	  LCD_STM32_SetCursor(0, FILA2);
 8000a96:	2102      	movs	r1, #2
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff ff3d 	bl	8000918 <LCD_STM32_SetCursor>
	  LCD_STM32_Print_String(str_cout);
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ffbb 	bl	8000a1c <LCD_STM32_Print_String>

	  if (count == 101) {
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	2b65      	cmp	r3, #101	; 0x65
 8000aaa:	d1e3      	bne.n	8000a74 <main+0x28>
		  __HAL_TIM_SET_COUNTER(&htim3,0);
 8000aac:	4b02      	ldr	r3, [pc, #8]	; (8000ab8 <main+0x6c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
  {
 8000ab4:	e7de      	b.n	8000a74 <main+0x28>
 8000ab6:	bf00      	nop
 8000ab8:	2000011c 	.word	0x2000011c
 8000abc:	0800336c 	.word	0x0800336c
 8000ac0:	08003384 	.word	0x08003384

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	; 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	2230      	movs	r2, #48	; 0x30
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 ffc8 	bl	8002a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <SystemClock_Config+0xb8>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <SystemClock_Config+0xb8>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af6:	6413      	str	r3, [r2, #64]	; 0x40
 8000af8:	4b20      	ldr	r3, [pc, #128]	; (8000b7c <SystemClock_Config+0xb8>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b04:	2300      	movs	r3, #0
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <SystemClock_Config+0xbc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b10:	4a1b      	ldr	r2, [pc, #108]	; (8000b80 <SystemClock_Config+0xbc>)
 8000b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <SystemClock_Config+0xbc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f000 fe35 	bl	80017a8 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b44:	f000 f97c 	bl	8000e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 f898 	bl	8001c98 <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b6e:	f000 f967 	bl	8000e40 <Error_Handler>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3750      	adds	r7, #80	; 0x50
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	463b      	mov	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ba0:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_TIM1_Init+0x98>)
 8000ba2:	4a1f      	ldr	r2, [pc, #124]	; (8000c20 <MX_TIM1_Init+0x9c>)
 8000ba4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_TIM1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_TIM1_Init+0x98>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16000-1;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_TIM1_Init+0x98>)
 8000bb4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_TIM1_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <MX_TIM1_Init+0x98>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_TIM1_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bcc:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_TIM1_Init+0x98>)
 8000bce:	f001 fa0f 	bl	8001ff0 <HAL_TIM_Base_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bd8:	f000 f932 	bl	8000e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000be2:	f107 0308 	add.w	r3, r7, #8
 8000be6:	4619      	mov	r1, r3
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <MX_TIM1_Init+0x98>)
 8000bea:	f001 fbb3 	bl	8002354 <HAL_TIM_ConfigClockSource>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000bf4:	f000 f924 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c00:	463b      	mov	r3, r7
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <MX_TIM1_Init+0x98>)
 8000c06:	f001 fe83 	bl	8002910 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c10:	f000 f916 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	2000008c 	.word	0x2000008c
 8000c20:	40010000 	.word	0x40010000

08000c24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_TIM2_Init+0xa0>)
 8000c44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_TIM2_Init+0xa0>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_TIM2_Init+0xa0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_TIM2_Init+0xa0>)
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_TIM2_Init+0xa0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_TIM2_Init+0xa0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c6a:	4816      	ldr	r0, [pc, #88]	; (8000cc4 <MX_TIM2_Init+0xa0>)
 8000c6c:	f001 f9c0 	bl	8001ff0 <HAL_TIM_Base_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c76:	f000 f8e3 	bl	8000e40 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c7e:	2350      	movs	r3, #80	; 0x50
 8000c80:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_TIM2_Init+0xa0>)
 8000c92:	f001 fc26 	bl	80024e2 <HAL_TIM_SlaveConfigSynchro>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c9c:	f000 f8d0 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_TIM2_Init+0xa0>)
 8000cae:	f001 fe2f 	bl	8002910 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000cb8:	f000 f8c2 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200000d4 	.word	0x200000d4

08000cc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_TIM3_Init+0xa0>)
 8000ce8:	4a20      	ldr	r2, [pc, #128]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000cea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MX_TIM3_Init+0xa0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <MX_TIM3_Init+0xa0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <MX_TIM3_Init+0xa0>)
 8000cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_TIM3_Init+0xa0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_TIM3_Init+0xa0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d0c:	4816      	ldr	r0, [pc, #88]	; (8000d68 <MX_TIM3_Init+0xa0>)
 8000d0e:	f001 f96f 	bl	8001ff0 <HAL_TIM_Base_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d18:	f000 f892 	bl	8000e40 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d20:	2350      	movs	r3, #80	; 0x50
 8000d22:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	480d      	ldr	r0, [pc, #52]	; (8000d68 <MX_TIM3_Init+0xa0>)
 8000d34:	f001 fbd5 	bl	80024e2 <HAL_TIM_SlaveConfigSynchro>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000d3e:	f000 f87f 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <MX_TIM3_Init+0xa0>)
 8000d50:	f001 fdde 	bl	8002910 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d5a:	f000 f871 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	3720      	adds	r7, #32
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	2000011c 	.word	0x2000011c
 8000d6c:	40000400 	.word	0x40000400

08000d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <MX_GPIO_Init+0x98>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <MX_GPIO_Init+0x98>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <MX_GPIO_Init+0x98>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MX_GPIO_Init+0x98>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <MX_GPIO_Init+0x98>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <MX_GPIO_Init+0x98>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2121      	movs	r1, #33	; 0x21
 8000dc2:	4812      	ldr	r0, [pc, #72]	; (8000e0c <MX_GPIO_Init+0x9c>)
 8000dc4:	f000 fcd6 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000dc8:	2321      	movs	r3, #33	; 0x21
 8000dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480b      	ldr	r0, [pc, #44]	; (8000e0c <MX_GPIO_Init+0x9c>)
 8000de0:	f000 fb44 	bl	800146c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000de4:	2340      	movs	r3, #64	; 0x40
 8000de6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4619      	mov	r1, r3
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <MX_GPIO_Init+0x9c>)
 8000dfa:	f000 fb37 	bl	800146c <HAL_GPIO_Init>

}
 8000dfe:	bf00      	nop
 8000e00:	3720      	adds	r7, #32
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000

08000e10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]




	if (htim == &htim1) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d105      	bne.n	8000e2c <HAL_TIM_PeriodElapsedCallback+0x1c>


		GPIOA->ODR^=(1<<5);
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000e26:	f083 0320 	eor.w	r3, r3, #32
 8000e2a:	6153      	str	r3, [r2, #20]
	}




}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	2000008c 	.word	0x2000008c
 8000e3c:	40020000 	.word	0x40020000

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	4a0f      	ldr	r2, [pc, #60]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	; 0x44
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a08      	ldr	r2, [pc, #32]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_MspInit+0x4c>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	603b      	str	r3, [r7, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a40      	ldr	r2, [pc, #256]	; (8000fbc <HAL_TIM_Base_MspInit+0x120>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d116      	bne.n	8000eec <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	4b3f      	ldr	r3, [pc, #252]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	4a3e      	ldr	r2, [pc, #248]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ece:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2101      	movs	r1, #1
 8000ede:	2019      	movs	r0, #25
 8000ee0:	f000 fa8d 	bl	80013fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ee4:	2019      	movs	r0, #25
 8000ee6:	f000 faa6 	bl	8001436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eea:	e063      	b.n	8000fb4 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ef4:	d12d      	bne.n	8000f52 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a30      	ldr	r2, [pc, #192]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a29      	ldr	r2, [pc, #164]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b27      	ldr	r3, [pc, #156]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	481e      	ldr	r0, [pc, #120]	; (8000fc4 <HAL_TIM_Base_MspInit+0x128>)
 8000f4c:	f000 fa8e 	bl	800146c <HAL_GPIO_Init>
}
 8000f50:	e030      	b.n	8000fb4 <HAL_TIM_Base_MspInit+0x118>
  else if(htim_base->Instance==TIM3)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <HAL_TIM_Base_MspInit+0x12c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d12b      	bne.n	8000fb4 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	4a16      	ldr	r2, [pc, #88]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6313      	str	r3, [r2, #48]	; 0x30
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_TIM_Base_MspInit+0x124>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f94:	2340      	movs	r3, #64	; 0x40
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	4807      	ldr	r0, [pc, #28]	; (8000fcc <HAL_TIM_Base_MspInit+0x130>)
 8000fb0:	f000 fa5c 	bl	800146c <HAL_GPIO_Init>
}
 8000fb4:	bf00      	nop
 8000fb6:	3730      	adds	r7, #48	; 0x30
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40000400 	.word	0x40000400
 8000fcc:	40020800 	.word	0x40020800

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101c:	f000 f8d0 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}

08001024 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800102a:	f001 f88b 	bl	8002144 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000008c 	.word	0x2000008c

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <_sbrk+0x5c>)
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <_sbrk+0x60>)
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <_sbrk+0x64>)
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <_sbrk+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	d207      	bcs.n	8001078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001068:	f001 fcd4 	bl	8002a14 <__errno>
 800106c:	4603      	mov	r3, r0
 800106e:	220c      	movs	r2, #12
 8001070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	e009      	b.n	800108c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <_sbrk+0x64>)
 8001088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20018000 	.word	0x20018000
 8001098:	00000400 	.word	0x00000400
 800109c:	20000164 	.word	0x20000164
 80010a0:	20000180 	.word	0x20000180

080010a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <SystemInit+0x20>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <SystemInit+0x20>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001100 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ce:	490e      	ldr	r1, [pc, #56]	; (8001108 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e4:	4c0b      	ldr	r4, [pc, #44]	; (8001114 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010f2:	f7ff ffd7 	bl	80010a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f6:	f001 fc93 	bl	8002a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fa:	f7ff fca7 	bl	8000a4c <main>
  bx  lr    
 80010fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001100:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001108:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800110c:	080033e0 	.word	0x080033e0
  ldr r2, =_sbss
 8001110:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001114:	2000017c 	.word	0x2000017c

08001118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001118:	e7fe      	b.n	8001118 <ADC_IRQHandler>
	...

0800111c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0d      	ldr	r2, [pc, #52]	; (800115c <HAL_Init+0x40>)
 8001126:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <HAL_Init+0x40>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0a      	ldr	r2, [pc, #40]	; (800115c <HAL_Init+0x40>)
 8001132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_Init+0x40>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <HAL_Init+0x40>)
 800113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001144:	2003      	movs	r0, #3
 8001146:	f000 f94f 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800114a:	200f      	movs	r0, #15
 800114c:	f000 f808 	bl	8001160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001150:	f7ff fe7c 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023c00 	.word	0x40023c00

08001160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_InitTick+0x54>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <HAL_InitTick+0x58>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	fbb3 f3f1 	udiv	r3, r3, r1
 800117a:	fbb2 f3f3 	udiv	r3, r2, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f967 	bl	8001452 <HAL_SYSTICK_Config>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e00e      	b.n	80011ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b0f      	cmp	r3, #15
 8001192:	d80a      	bhi.n	80011aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001194:	2200      	movs	r2, #0
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f000 f92f 	bl	80013fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <HAL_InitTick+0x5c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e000      	b.n	80011ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	20000168 	.word	0x20000168

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000168 	.word	0x20000168

08001200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001208:	f7ff ffee 	bl	80011e8 <HAL_GetTick>
 800120c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001218:	d005      	beq.n	8001226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_Delay+0x44>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001226:	bf00      	nop
 8001228:	f7ff ffde 	bl	80011e8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	429a      	cmp	r2, r3
 8001236:	d8f7      	bhi.n	8001228 <HAL_Delay+0x28>
  {
  }
}
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008

08001248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001264:	4013      	ands	r3, r2
 8001266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <__NVIC_SetPriorityGrouping+0x44>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	60d3      	str	r3, [r2, #12]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	0a1b      	lsrs	r3, r3, #8
 800129a:	f003 0307 	and.w	r3, r3, #7
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	db0b      	blt.n	80012d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	f003 021f 	and.w	r2, r3, #31
 80012c4:	4907      	ldr	r1, [pc, #28]	; (80012e4 <__NVIC_EnableIRQ+0x38>)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	095b      	lsrs	r3, r3, #5
 80012cc:	2001      	movs	r0, #1
 80012ce:	fa00 f202 	lsl.w	r2, r0, r2
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b4:	d301      	bcc.n	80013ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00f      	b.n	80013da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <SysTick_Config+0x40>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c2:	210f      	movs	r1, #15
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f7ff ff8e 	bl	80012e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SysTick_Config+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SysTick_Config+0x40>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff29 	bl	8001248 <__NVIC_SetPriorityGrouping>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff3e 	bl	8001290 <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff8e 	bl	800133c <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5d 	bl	80012e8 <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff31 	bl	80012ac <__NVIC_EnableIRQ>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ffa2 	bl	80013a4 <SysTick_Config>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	e159      	b.n	800173c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001488:	2201      	movs	r2, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	f040 8148 	bne.w	8001736 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d005      	beq.n	80014be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d130      	bne.n	8001520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f4:	2201      	movs	r2, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 0201 	and.w	r2, r3, #1
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b03      	cmp	r3, #3
 800152a:	d017      	beq.n	800155c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	2203      	movs	r2, #3
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d123      	bne.n	80015b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	69b9      	ldr	r1, [r7, #24]
 80015ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0203 	and.w	r2, r3, #3
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a2 	beq.w	8001736 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b57      	ldr	r3, [pc, #348]	; (8001754 <HAL_GPIO_Init+0x2e8>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a56      	ldr	r2, [pc, #344]	; (8001754 <HAL_GPIO_Init+0x2e8>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b54      	ldr	r3, [pc, #336]	; (8001754 <HAL_GPIO_Init+0x2e8>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800160e:	4a52      	ldr	r2, [pc, #328]	; (8001758 <HAL_GPIO_Init+0x2ec>)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	220f      	movs	r2, #15
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a49      	ldr	r2, [pc, #292]	; (800175c <HAL_GPIO_Init+0x2f0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d019      	beq.n	800166e <HAL_GPIO_Init+0x202>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a48      	ldr	r2, [pc, #288]	; (8001760 <HAL_GPIO_Init+0x2f4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d013      	beq.n	800166a <HAL_GPIO_Init+0x1fe>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a47      	ldr	r2, [pc, #284]	; (8001764 <HAL_GPIO_Init+0x2f8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00d      	beq.n	8001666 <HAL_GPIO_Init+0x1fa>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a46      	ldr	r2, [pc, #280]	; (8001768 <HAL_GPIO_Init+0x2fc>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d007      	beq.n	8001662 <HAL_GPIO_Init+0x1f6>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a45      	ldr	r2, [pc, #276]	; (800176c <HAL_GPIO_Init+0x300>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_GPIO_Init+0x1f2>
 800165a:	2304      	movs	r3, #4
 800165c:	e008      	b.n	8001670 <HAL_GPIO_Init+0x204>
 800165e:	2307      	movs	r3, #7
 8001660:	e006      	b.n	8001670 <HAL_GPIO_Init+0x204>
 8001662:	2303      	movs	r3, #3
 8001664:	e004      	b.n	8001670 <HAL_GPIO_Init+0x204>
 8001666:	2302      	movs	r3, #2
 8001668:	e002      	b.n	8001670 <HAL_GPIO_Init+0x204>
 800166a:	2301      	movs	r3, #1
 800166c:	e000      	b.n	8001670 <HAL_GPIO_Init+0x204>
 800166e:	2300      	movs	r3, #0
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f002 0203 	and.w	r2, r2, #3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4093      	lsls	r3, r2
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001680:	4935      	ldr	r1, [pc, #212]	; (8001758 <HAL_GPIO_Init+0x2ec>)
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168e:	4b38      	ldr	r3, [pc, #224]	; (8001770 <HAL_GPIO_Init+0x304>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b2:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <HAL_GPIO_Init+0x304>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_GPIO_Init+0x304>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016dc:	4a24      	ldr	r2, [pc, #144]	; (8001770 <HAL_GPIO_Init+0x304>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <HAL_GPIO_Init+0x304>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001706:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <HAL_GPIO_Init+0x304>)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170c:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_GPIO_Init+0x304>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001730:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <HAL_GPIO_Init+0x304>)
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3301      	adds	r3, #1
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	f67f aea2 	bls.w	8001488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40013800 	.word	0x40013800
 800175c:	40020000 	.word	0x40020000
 8001760:	40020400 	.word	0x40020400
 8001764:	40020800 	.word	0x40020800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40013c00 	.word	0x40013c00

08001774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001784:	787b      	ldrb	r3, [r7, #1]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001790:	e003      	b.n	800179a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	041a      	lsls	r2, r3, #16
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	619a      	str	r2, [r3, #24]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e267      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d075      	beq.n	80018b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017c6:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d00c      	beq.n	80017ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d2:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d112      	bne.n	8001804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017de:	4b82      	ldr	r3, [pc, #520]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ea:	d10b      	bne.n	8001804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	4b7e      	ldr	r3, [pc, #504]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d05b      	beq.n	80018b0 <HAL_RCC_OscConfig+0x108>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d157      	bne.n	80018b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e242      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180c:	d106      	bne.n	800181c <HAL_RCC_OscConfig+0x74>
 800180e:	4b76      	ldr	r3, [pc, #472]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a75      	ldr	r2, [pc, #468]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 8001814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e01d      	b.n	8001858 <HAL_RCC_OscConfig+0xb0>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001824:	d10c      	bne.n	8001840 <HAL_RCC_OscConfig+0x98>
 8001826:	4b70      	ldr	r3, [pc, #448]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6f      	ldr	r2, [pc, #444]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 800182c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b6d      	ldr	r3, [pc, #436]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a6c      	ldr	r2, [pc, #432]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 8001838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0xb0>
 8001840:	4b69      	ldr	r3, [pc, #420]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a68      	ldr	r2, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 8001846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b66      	ldr	r3, [pc, #408]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a65      	ldr	r2, [pc, #404]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 8001852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d013      	beq.n	8001888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fcc2 	bl	80011e8 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fcbe 	bl	80011e8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e207      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0xc0>
 8001886:	e014      	b.n	80018b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fcae 	bl	80011e8 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff fcaa 	bl	80011e8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e1f3      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	4b51      	ldr	r3, [pc, #324]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0xe8>
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d063      	beq.n	8001986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018be:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d00b      	beq.n	80018e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d11c      	bne.n	8001910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018d6:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d116      	bne.n	8001910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e2:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <HAL_RCC_OscConfig+0x152>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e1c7      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	4937      	ldr	r1, [pc, #220]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	e03a      	b.n	8001986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d020      	beq.n	800195a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001918:	4b34      	ldr	r3, [pc, #208]	; (80019ec <HAL_RCC_OscConfig+0x244>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	f7ff fc63 	bl	80011e8 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001926:	f7ff fc5f 	bl	80011e8 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e1a8      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001938:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	00db      	lsls	r3, r3, #3
 8001952:	4925      	ldr	r1, [pc, #148]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 8001954:	4313      	orrs	r3, r2
 8001956:	600b      	str	r3, [r1, #0]
 8001958:	e015      	b.n	8001986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_RCC_OscConfig+0x244>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff fc42 	bl	80011e8 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001968:	f7ff fc3e 	bl	80011e8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e187      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197a:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d036      	beq.n	8001a00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d016      	beq.n	80019c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_RCC_OscConfig+0x248>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff fc22 	bl	80011e8 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff fc1e 	bl	80011e8 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e167      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_OscConfig+0x240>)
 80019bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCC_OscConfig+0x200>
 80019c6:	e01b      	b.n	8001a00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_RCC_OscConfig+0x248>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ce:	f7ff fc0b 	bl	80011e8 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	e00e      	b.n	80019f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d6:	f7ff fc07 	bl	80011e8 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d907      	bls.n	80019f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e150      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
 80019e8:	40023800 	.word	0x40023800
 80019ec:	42470000 	.word	0x42470000
 80019f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f4:	4b88      	ldr	r3, [pc, #544]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 80019f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ea      	bne.n	80019d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 8097 	beq.w	8001b3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a12:	4b81      	ldr	r3, [pc, #516]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10f      	bne.n	8001a3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	4b7d      	ldr	r3, [pc, #500]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	4a7c      	ldr	r2, [pc, #496]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2e:	4b7a      	ldr	r3, [pc, #488]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3e:	4b77      	ldr	r3, [pc, #476]	; (8001c1c <HAL_RCC_OscConfig+0x474>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d118      	bne.n	8001a7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4a:	4b74      	ldr	r3, [pc, #464]	; (8001c1c <HAL_RCC_OscConfig+0x474>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a73      	ldr	r2, [pc, #460]	; (8001c1c <HAL_RCC_OscConfig+0x474>)
 8001a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fbc7 	bl	80011e8 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5e:	f7ff fbc3 	bl	80011e8 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e10c      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a70:	4b6a      	ldr	r3, [pc, #424]	; (8001c1c <HAL_RCC_OscConfig+0x474>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x2ea>
 8001a84:	4b64      	ldr	r3, [pc, #400]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	4a63      	ldr	r2, [pc, #396]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a90:	e01c      	b.n	8001acc <HAL_RCC_OscConfig+0x324>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d10c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x30c>
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9e:	4a5e      	ldr	r2, [pc, #376]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa6:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aaa:	4a5b      	ldr	r2, [pc, #364]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab2:	e00b      	b.n	8001acc <HAL_RCC_OscConfig+0x324>
 8001ab4:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab8:	4a57      	ldr	r2, [pc, #348]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac0:	4b55      	ldr	r3, [pc, #340]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac4:	4a54      	ldr	r2, [pc, #336]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001ac6:	f023 0304 	bic.w	r3, r3, #4
 8001aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d015      	beq.n	8001b00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fb88 	bl	80011e8 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001adc:	f7ff fb84 	bl	80011e8 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e0cb      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0ee      	beq.n	8001adc <HAL_RCC_OscConfig+0x334>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b00:	f7ff fb72 	bl	80011e8 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7ff fb6e 	bl	80011e8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e0b5      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1e:	4b3e      	ldr	r3, [pc, #248]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1ee      	bne.n	8001b08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b30:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	4a38      	ldr	r2, [pc, #224]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a1 	beq.w	8001c88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b46:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d05c      	beq.n	8001c0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d141      	bne.n	8001bde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5a:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_RCC_OscConfig+0x478>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fb42 	bl	80011e8 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff fb3e 	bl	80011e8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e087      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7a:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69da      	ldr	r2, [r3, #28]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	019b      	lsls	r3, r3, #6
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	085b      	lsrs	r3, r3, #1
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	041b      	lsls	r3, r3, #16
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	061b      	lsls	r3, r3, #24
 8001baa:	491b      	ldr	r1, [pc, #108]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_RCC_OscConfig+0x478>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fb17 	bl	80011e8 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbe:	f7ff fb13 	bl	80011e8 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e05c      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d0f0      	beq.n	8001bbe <HAL_RCC_OscConfig+0x416>
 8001bdc:	e054      	b.n	8001c88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_RCC_OscConfig+0x478>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fb00 	bl	80011e8 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff fafc 	bl	80011e8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e045      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_RCC_OscConfig+0x470>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x444>
 8001c0a:	e03d      	b.n	8001c88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e038      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <HAL_RCC_OscConfig+0x4ec>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d028      	beq.n	8001c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d121      	bne.n	8001c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d11a      	bne.n	8001c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c54:	4013      	ands	r3, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d111      	bne.n	8001c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	085b      	lsrs	r3, r3, #1
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800

08001c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0cc      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cac:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_RCC_ClockConfig+0x1b8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d90c      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cba:	4b65      	ldr	r3, [pc, #404]	; (8001e50 <HAL_RCC_ClockConfig+0x1b8>)
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0b8      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cec:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d04:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a52      	ldr	r2, [pc, #328]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	494d      	ldr	r1, [pc, #308]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d044      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b47      	ldr	r3, [pc, #284]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d119      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e07f      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d003      	beq.n	8001d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d56:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d109      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e06f      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e067      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f023 0203 	bic.w	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4934      	ldr	r1, [pc, #208]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d88:	f7ff fa2e 	bl	80011e8 <HAL_GetTick>
 8001d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d90:	f7ff fa2a 	bl	80011e8 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e04f      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 020c 	and.w	r2, r3, #12
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d1eb      	bne.n	8001d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <HAL_RCC_ClockConfig+0x1b8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d20c      	bcs.n	8001de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e032      	b.n	8001e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d008      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4916      	ldr	r1, [pc, #88]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d009      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	490e      	ldr	r1, [pc, #56]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e1e:	f000 f821 	bl	8001e64 <HAL_RCC_GetSysClockFreq>
 8001e22:	4602      	mov	r2, r0
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	490a      	ldr	r1, [pc, #40]	; (8001e58 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	5ccb      	ldrb	r3, [r1, r3]
 8001e32:	fa22 f303 	lsr.w	r3, r2, r3
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f98e 	bl	8001160 <HAL_InitTick>

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023c00 	.word	0x40023c00
 8001e54:	40023800 	.word	0x40023800
 8001e58:	0800338c 	.word	0x0800338c
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000004 	.word	0x20000004

08001e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e68:	b090      	sub	sp, #64	; 0x40
 8001e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e70:	2300      	movs	r3, #0
 8001e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e74:	2300      	movs	r3, #0
 8001e76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e7c:	4b59      	ldr	r3, [pc, #356]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d00d      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	f200 80a1 	bhi.w	8001fd0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x34>
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e96:	e09b      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e98:	4b53      	ldr	r3, [pc, #332]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001e9c:	e09b      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e9e:	4b53      	ldr	r3, [pc, #332]	; (8001fec <HAL_RCC_GetSysClockFreq+0x188>)
 8001ea0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ea2:	e098      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ea4:	4b4f      	ldr	r3, [pc, #316]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eae:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d028      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eba:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	099b      	lsrs	r3, r3, #6
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	627a      	str	r2, [r7, #36]	; 0x24
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4b47      	ldr	r3, [pc, #284]	; (8001fec <HAL_RCC_GetSysClockFreq+0x188>)
 8001ed0:	fb03 f201 	mul.w	r2, r3, r1
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	fb00 f303 	mul.w	r3, r0, r3
 8001eda:	4413      	add	r3, r2
 8001edc:	4a43      	ldr	r2, [pc, #268]	; (8001fec <HAL_RCC_GetSysClockFreq+0x188>)
 8001ede:	fba0 1202 	umull	r1, r2, r0, r2
 8001ee2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eea:	4413      	add	r3, r2
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	61fa      	str	r2, [r7, #28]
 8001ef6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001efa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001efe:	f7fe f9bf 	bl	8000280 <__aeabi_uldivmod>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4613      	mov	r3, r2
 8001f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f0a:	e053      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0c:	4b35      	ldr	r3, [pc, #212]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	099b      	lsrs	r3, r3, #6
 8001f12:	2200      	movs	r2, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	617a      	str	r2, [r7, #20]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f1e:	f04f 0b00 	mov.w	fp, #0
 8001f22:	4652      	mov	r2, sl
 8001f24:	465b      	mov	r3, fp
 8001f26:	f04f 0000 	mov.w	r0, #0
 8001f2a:	f04f 0100 	mov.w	r1, #0
 8001f2e:	0159      	lsls	r1, r3, #5
 8001f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f34:	0150      	lsls	r0, r2, #5
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	ebb2 080a 	subs.w	r8, r2, sl
 8001f3e:	eb63 090b 	sbc.w	r9, r3, fp
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f56:	ebb2 0408 	subs.w	r4, r2, r8
 8001f5a:	eb63 0509 	sbc.w	r5, r3, r9
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f04f 0300 	mov.w	r3, #0
 8001f66:	00eb      	lsls	r3, r5, #3
 8001f68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f6c:	00e2      	lsls	r2, r4, #3
 8001f6e:	4614      	mov	r4, r2
 8001f70:	461d      	mov	r5, r3
 8001f72:	eb14 030a 	adds.w	r3, r4, sl
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	eb45 030b 	adc.w	r3, r5, fp
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f8a:	4629      	mov	r1, r5
 8001f8c:	028b      	lsls	r3, r1, #10
 8001f8e:	4621      	mov	r1, r4
 8001f90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f94:	4621      	mov	r1, r4
 8001f96:	028a      	lsls	r2, r1, #10
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	60fa      	str	r2, [r7, #12]
 8001fa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fa8:	f7fe f96a 	bl	8000280 <__aeabi_uldivmod>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	0c1b      	lsrs	r3, r3, #16
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001fc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fce:	e002      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fd2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3740      	adds	r7, #64	; 0x40
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	00f42400 	.word	0x00f42400
 8001fec:	017d7840 	.word	0x017d7840

08001ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e041      	b.n	8002086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe ff40 	bl	8000e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f000 fac2 	bl	80025b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d001      	beq.n	80020a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e03c      	b.n	8002122 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1e      	ldr	r2, [pc, #120]	; (8002130 <HAL_TIM_Base_Start+0xa0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d018      	beq.n	80020ec <HAL_TIM_Base_Start+0x5c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c2:	d013      	beq.n	80020ec <HAL_TIM_Base_Start+0x5c>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1a      	ldr	r2, [pc, #104]	; (8002134 <HAL_TIM_Base_Start+0xa4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00e      	beq.n	80020ec <HAL_TIM_Base_Start+0x5c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_TIM_Base_Start+0xa8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_TIM_Base_Start+0x5c>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a17      	ldr	r2, [pc, #92]	; (800213c <HAL_TIM_Base_Start+0xac>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_TIM_Base_Start+0x5c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_TIM_Base_Start+0xb0>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d111      	bne.n	8002110 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d010      	beq.n	8002120 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800210e:	e007      	b.n	8002120 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40010000 	.word	0x40010000
 8002134:	40000400 	.word	0x40000400
 8002138:	40000800 	.word	0x40000800
 800213c:	40000c00 	.word	0x40000c00
 8002140:	40014000 	.word	0x40014000

08002144 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b02      	cmp	r3, #2
 8002158:	d122      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b02      	cmp	r3, #2
 8002166:	d11b      	bne.n	80021a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0202 	mvn.w	r2, #2
 8002170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f9f7 	bl	800257a <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f9e9 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f9fa 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d122      	bne.n	80021f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d11b      	bne.n	80021f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0204 	mvn.w	r2, #4
 80021c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f9cd 	bl	800257a <HAL_TIM_IC_CaptureCallback>
 80021e0:	e005      	b.n	80021ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f9bf 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f9d0 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d122      	bne.n	8002248 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b08      	cmp	r3, #8
 800220e:	d11b      	bne.n	8002248 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0208 	mvn.w	r2, #8
 8002218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2204      	movs	r2, #4
 800221e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f9a3 	bl	800257a <HAL_TIM_IC_CaptureCallback>
 8002234:	e005      	b.n	8002242 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f995 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f9a6 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b10      	cmp	r3, #16
 8002254:	d122      	bne.n	800229c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0310 	and.w	r3, r3, #16
 8002260:	2b10      	cmp	r3, #16
 8002262:	d11b      	bne.n	800229c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0210 	mvn.w	r2, #16
 800226c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2208      	movs	r2, #8
 8002272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f979 	bl	800257a <HAL_TIM_IC_CaptureCallback>
 8002288:	e005      	b.n	8002296 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f96b 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f97c 	bl	800258e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d10e      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d107      	bne.n	80022c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0201 	mvn.w	r2, #1
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe fda4 	bl	8000e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d2:	2b80      	cmp	r3, #128	; 0x80
 80022d4:	d10e      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e0:	2b80      	cmp	r3, #128	; 0x80
 80022e2:	d107      	bne.n	80022f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fb86 	bl	8002a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b40      	cmp	r3, #64	; 0x40
 8002300:	d10e      	bne.n	8002320 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	2b40      	cmp	r3, #64	; 0x40
 800230e:	d107      	bne.n	8002320 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f941 	bl	80025a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b20      	cmp	r3, #32
 800232c:	d10e      	bne.n	800234c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b20      	cmp	r3, #32
 800233a:	d107      	bne.n	800234c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0220 	mvn.w	r2, #32
 8002344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fb50 	bl	80029ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_TIM_ConfigClockSource+0x1c>
 800236c:	2302      	movs	r3, #2
 800236e:	e0b4      	b.n	80024da <HAL_TIM_ConfigClockSource+0x186>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800238e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002396:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023a8:	d03e      	beq.n	8002428 <HAL_TIM_ConfigClockSource+0xd4>
 80023aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ae:	f200 8087 	bhi.w	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b6:	f000 8086 	beq.w	80024c6 <HAL_TIM_ConfigClockSource+0x172>
 80023ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023be:	d87f      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023c0:	2b70      	cmp	r3, #112	; 0x70
 80023c2:	d01a      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0xa6>
 80023c4:	2b70      	cmp	r3, #112	; 0x70
 80023c6:	d87b      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023c8:	2b60      	cmp	r3, #96	; 0x60
 80023ca:	d050      	beq.n	800246e <HAL_TIM_ConfigClockSource+0x11a>
 80023cc:	2b60      	cmp	r3, #96	; 0x60
 80023ce:	d877      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d0:	2b50      	cmp	r3, #80	; 0x50
 80023d2:	d03c      	beq.n	800244e <HAL_TIM_ConfigClockSource+0xfa>
 80023d4:	2b50      	cmp	r3, #80	; 0x50
 80023d6:	d873      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	d058      	beq.n	800248e <HAL_TIM_ConfigClockSource+0x13a>
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d86f      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e0:	2b30      	cmp	r3, #48	; 0x30
 80023e2:	d064      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x15a>
 80023e4:	2b30      	cmp	r3, #48	; 0x30
 80023e6:	d86b      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d060      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x15a>
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d867      	bhi.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d05c      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x15a>
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d05a      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x15a>
 80023f8:	e062      	b.n	80024c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f000 fa60 	bl	80028ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800241c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	609a      	str	r2, [r3, #8]
      break;
 8002426:	e04f      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f000 fa49 	bl	80028ce <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800244a:	609a      	str	r2, [r3, #8]
      break;
 800244c:	e03c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	6859      	ldr	r1, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	461a      	mov	r2, r3
 800245c:	f000 f9bd 	bl	80027da <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2150      	movs	r1, #80	; 0x50
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fa16 	bl	8002898 <TIM_ITRx_SetConfig>
      break;
 800246c:	e02c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6859      	ldr	r1, [r3, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	461a      	mov	r2, r3
 800247c:	f000 f9dc 	bl	8002838 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2160      	movs	r1, #96	; 0x60
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fa06 	bl	8002898 <TIM_ITRx_SetConfig>
      break;
 800248c:	e01c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	461a      	mov	r2, r3
 800249c:	f000 f99d 	bl	80027da <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2140      	movs	r1, #64	; 0x40
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f9f6 	bl	8002898 <TIM_ITRx_SetConfig>
      break;
 80024ac:	e00c      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f000 f9ed 	bl	8002898 <TIM_ITRx_SetConfig>
      break;
 80024be:	e003      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      break;
 80024c4:	e000      	b.n	80024c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_TIM_SlaveConfigSynchro+0x18>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e031      	b.n	800255e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800250a:	6839      	ldr	r1, [r7, #0]
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f8d3 	bl	80026b8 <TIM_SlaveTimer_SetConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e018      	b.n	800255e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800253a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800254a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a34      	ldr	r2, [pc, #208]	; (800269c <TIM_Base_SetConfig+0xe4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00f      	beq.n	80025f0 <TIM_Base_SetConfig+0x38>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d6:	d00b      	beq.n	80025f0 <TIM_Base_SetConfig+0x38>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a31      	ldr	r2, [pc, #196]	; (80026a0 <TIM_Base_SetConfig+0xe8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d007      	beq.n	80025f0 <TIM_Base_SetConfig+0x38>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a30      	ldr	r2, [pc, #192]	; (80026a4 <TIM_Base_SetConfig+0xec>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d003      	beq.n	80025f0 <TIM_Base_SetConfig+0x38>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a2f      	ldr	r2, [pc, #188]	; (80026a8 <TIM_Base_SetConfig+0xf0>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d108      	bne.n	8002602 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a25      	ldr	r2, [pc, #148]	; (800269c <TIM_Base_SetConfig+0xe4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01b      	beq.n	8002642 <TIM_Base_SetConfig+0x8a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002610:	d017      	beq.n	8002642 <TIM_Base_SetConfig+0x8a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a22      	ldr	r2, [pc, #136]	; (80026a0 <TIM_Base_SetConfig+0xe8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <TIM_Base_SetConfig+0x8a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a21      	ldr	r2, [pc, #132]	; (80026a4 <TIM_Base_SetConfig+0xec>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00f      	beq.n	8002642 <TIM_Base_SetConfig+0x8a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a20      	ldr	r2, [pc, #128]	; (80026a8 <TIM_Base_SetConfig+0xf0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00b      	beq.n	8002642 <TIM_Base_SetConfig+0x8a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a1f      	ldr	r2, [pc, #124]	; (80026ac <TIM_Base_SetConfig+0xf4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <TIM_Base_SetConfig+0x8a>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <TIM_Base_SetConfig+0xf8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d003      	beq.n	8002642 <TIM_Base_SetConfig+0x8a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a1d      	ldr	r2, [pc, #116]	; (80026b4 <TIM_Base_SetConfig+0xfc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d108      	bne.n	8002654 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002648:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a08      	ldr	r2, [pc, #32]	; (800269c <TIM_Base_SetConfig+0xe4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d103      	bne.n	8002688 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	615a      	str	r2, [r3, #20]
}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40010000 	.word	0x40010000
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40000800 	.word	0x40000800
 80026a8:	40000c00 	.word	0x40000c00
 80026ac:	40014000 	.word	0x40014000
 80026b0:	40014400 	.word	0x40014400
 80026b4:	40014800 	.word	0x40014800

080026b8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f023 0307 	bic.w	r3, r3, #7
 80026e6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b70      	cmp	r3, #112	; 0x70
 8002700:	d01a      	beq.n	8002738 <TIM_SlaveTimer_SetConfig+0x80>
 8002702:	2b70      	cmp	r3, #112	; 0x70
 8002704:	d860      	bhi.n	80027c8 <TIM_SlaveTimer_SetConfig+0x110>
 8002706:	2b60      	cmp	r3, #96	; 0x60
 8002708:	d054      	beq.n	80027b4 <TIM_SlaveTimer_SetConfig+0xfc>
 800270a:	2b60      	cmp	r3, #96	; 0x60
 800270c:	d85c      	bhi.n	80027c8 <TIM_SlaveTimer_SetConfig+0x110>
 800270e:	2b50      	cmp	r3, #80	; 0x50
 8002710:	d046      	beq.n	80027a0 <TIM_SlaveTimer_SetConfig+0xe8>
 8002712:	2b50      	cmp	r3, #80	; 0x50
 8002714:	d858      	bhi.n	80027c8 <TIM_SlaveTimer_SetConfig+0x110>
 8002716:	2b40      	cmp	r3, #64	; 0x40
 8002718:	d019      	beq.n	800274e <TIM_SlaveTimer_SetConfig+0x96>
 800271a:	2b40      	cmp	r3, #64	; 0x40
 800271c:	d854      	bhi.n	80027c8 <TIM_SlaveTimer_SetConfig+0x110>
 800271e:	2b30      	cmp	r3, #48	; 0x30
 8002720:	d055      	beq.n	80027ce <TIM_SlaveTimer_SetConfig+0x116>
 8002722:	2b30      	cmp	r3, #48	; 0x30
 8002724:	d850      	bhi.n	80027c8 <TIM_SlaveTimer_SetConfig+0x110>
 8002726:	2b20      	cmp	r3, #32
 8002728:	d051      	beq.n	80027ce <TIM_SlaveTimer_SetConfig+0x116>
 800272a:	2b20      	cmp	r3, #32
 800272c:	d84c      	bhi.n	80027c8 <TIM_SlaveTimer_SetConfig+0x110>
 800272e:	2b00      	cmp	r3, #0
 8002730:	d04d      	beq.n	80027ce <TIM_SlaveTimer_SetConfig+0x116>
 8002732:	2b10      	cmp	r3, #16
 8002734:	d04b      	beq.n	80027ce <TIM_SlaveTimer_SetConfig+0x116>
 8002736:	e047      	b.n	80027c8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68d9      	ldr	r1, [r3, #12]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f000 f8c1 	bl	80028ce <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800274c:	e040      	b.n	80027d0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b05      	cmp	r3, #5
 8002754:	d101      	bne.n	800275a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e03b      	b.n	80027d2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6a1a      	ldr	r2, [r3, #32]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0201 	bic.w	r2, r2, #1
 8002770:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002780:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	4313      	orrs	r3, r2
 800278c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	621a      	str	r2, [r3, #32]
      break;
 800279e:	e017      	b.n	80027d0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6899      	ldr	r1, [r3, #8]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	461a      	mov	r2, r3
 80027ae:	f000 f814 	bl	80027da <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80027b2:	e00d      	b.n	80027d0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6899      	ldr	r1, [r3, #8]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	461a      	mov	r2, r3
 80027c2:	f000 f839 	bl	8002838 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80027c6:	e003      	b.n	80027d0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	75fb      	strb	r3, [r7, #23]
      break;
 80027cc:	e000      	b.n	80027d0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80027ce:	bf00      	nop
  }

  return status;
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027da:	b480      	push	{r7}
 80027dc:	b087      	sub	sp, #28
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f023 0201 	bic.w	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f023 030a 	bic.w	r3, r3, #10
 8002816:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	621a      	str	r2, [r3, #32]
}
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f023 0210 	bic.w	r2, r3, #16
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	031b      	lsls	r3, r3, #12
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002874:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	621a      	str	r2, [r3, #32]
}
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f043 0307 	orr.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	609a      	str	r2, [r3, #8]
}
 80028c2:	bf00      	nop
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b087      	sub	sp, #28
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	021a      	lsls	r2, r3, #8
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	431a      	orrs	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	609a      	str	r2, [r3, #8]
}
 8002902:	bf00      	nop
 8002904:	371c      	adds	r7, #28
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002924:	2302      	movs	r3, #2
 8002926:	e050      	b.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800294e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d018      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002974:	d013      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a18      	ldr	r2, [pc, #96]	; (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a15      	ldr	r2, [pc, #84]	; (80029e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a13      	ldr	r2, [pc, #76]	; (80029e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d10c      	bne.n	80029b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40010000 	.word	0x40010000
 80029dc:	40000400 	.word	0x40000400
 80029e0:	40000800 	.word	0x40000800
 80029e4:	40000c00 	.word	0x40000c00
 80029e8:	40014000 	.word	0x40014000

080029ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <__errno>:
 8002a14:	4b01      	ldr	r3, [pc, #4]	; (8002a1c <__errno+0x8>)
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000000c 	.word	0x2000000c

08002a20 <__libc_init_array>:
 8002a20:	b570      	push	{r4, r5, r6, lr}
 8002a22:	4d0d      	ldr	r5, [pc, #52]	; (8002a58 <__libc_init_array+0x38>)
 8002a24:	4c0d      	ldr	r4, [pc, #52]	; (8002a5c <__libc_init_array+0x3c>)
 8002a26:	1b64      	subs	r4, r4, r5
 8002a28:	10a4      	asrs	r4, r4, #2
 8002a2a:	2600      	movs	r6, #0
 8002a2c:	42a6      	cmp	r6, r4
 8002a2e:	d109      	bne.n	8002a44 <__libc_init_array+0x24>
 8002a30:	4d0b      	ldr	r5, [pc, #44]	; (8002a60 <__libc_init_array+0x40>)
 8002a32:	4c0c      	ldr	r4, [pc, #48]	; (8002a64 <__libc_init_array+0x44>)
 8002a34:	f000 fc8e 	bl	8003354 <_init>
 8002a38:	1b64      	subs	r4, r4, r5
 8002a3a:	10a4      	asrs	r4, r4, #2
 8002a3c:	2600      	movs	r6, #0
 8002a3e:	42a6      	cmp	r6, r4
 8002a40:	d105      	bne.n	8002a4e <__libc_init_array+0x2e>
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
 8002a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a48:	4798      	blx	r3
 8002a4a:	3601      	adds	r6, #1
 8002a4c:	e7ee      	b.n	8002a2c <__libc_init_array+0xc>
 8002a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a52:	4798      	blx	r3
 8002a54:	3601      	adds	r6, #1
 8002a56:	e7f2      	b.n	8002a3e <__libc_init_array+0x1e>
 8002a58:	080033d8 	.word	0x080033d8
 8002a5c:	080033d8 	.word	0x080033d8
 8002a60:	080033d8 	.word	0x080033d8
 8002a64:	080033dc 	.word	0x080033dc

08002a68 <memset>:
 8002a68:	4402      	add	r2, r0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d100      	bne.n	8002a72 <memset+0xa>
 8002a70:	4770      	bx	lr
 8002a72:	f803 1b01 	strb.w	r1, [r3], #1
 8002a76:	e7f9      	b.n	8002a6c <memset+0x4>

08002a78 <siprintf>:
 8002a78:	b40e      	push	{r1, r2, r3}
 8002a7a:	b500      	push	{lr}
 8002a7c:	b09c      	sub	sp, #112	; 0x70
 8002a7e:	ab1d      	add	r3, sp, #116	; 0x74
 8002a80:	9002      	str	r0, [sp, #8]
 8002a82:	9006      	str	r0, [sp, #24]
 8002a84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a88:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <siprintf+0x38>)
 8002a8a:	9107      	str	r1, [sp, #28]
 8002a8c:	9104      	str	r1, [sp, #16]
 8002a8e:	4909      	ldr	r1, [pc, #36]	; (8002ab4 <siprintf+0x3c>)
 8002a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a94:	9105      	str	r1, [sp, #20]
 8002a96:	6800      	ldr	r0, [r0, #0]
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	a902      	add	r1, sp, #8
 8002a9c:	f000 f868 	bl	8002b70 <_svfiprintf_r>
 8002aa0:	9b02      	ldr	r3, [sp, #8]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	b01c      	add	sp, #112	; 0x70
 8002aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002aac:	b003      	add	sp, #12
 8002aae:	4770      	bx	lr
 8002ab0:	2000000c 	.word	0x2000000c
 8002ab4:	ffff0208 	.word	0xffff0208

08002ab8 <__ssputs_r>:
 8002ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002abc:	688e      	ldr	r6, [r1, #8]
 8002abe:	429e      	cmp	r6, r3
 8002ac0:	4682      	mov	sl, r0
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	4690      	mov	r8, r2
 8002ac6:	461f      	mov	r7, r3
 8002ac8:	d838      	bhi.n	8002b3c <__ssputs_r+0x84>
 8002aca:	898a      	ldrh	r2, [r1, #12]
 8002acc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ad0:	d032      	beq.n	8002b38 <__ssputs_r+0x80>
 8002ad2:	6825      	ldr	r5, [r4, #0]
 8002ad4:	6909      	ldr	r1, [r1, #16]
 8002ad6:	eba5 0901 	sub.w	r9, r5, r1
 8002ada:	6965      	ldr	r5, [r4, #20]
 8002adc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	444b      	add	r3, r9
 8002ae8:	106d      	asrs	r5, r5, #1
 8002aea:	429d      	cmp	r5, r3
 8002aec:	bf38      	it	cc
 8002aee:	461d      	movcc	r5, r3
 8002af0:	0553      	lsls	r3, r2, #21
 8002af2:	d531      	bpl.n	8002b58 <__ssputs_r+0xa0>
 8002af4:	4629      	mov	r1, r5
 8002af6:	f000 fb63 	bl	80031c0 <_malloc_r>
 8002afa:	4606      	mov	r6, r0
 8002afc:	b950      	cbnz	r0, 8002b14 <__ssputs_r+0x5c>
 8002afe:	230c      	movs	r3, #12
 8002b00:	f8ca 3000 	str.w	r3, [sl]
 8002b04:	89a3      	ldrh	r3, [r4, #12]
 8002b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b0a:	81a3      	strh	r3, [r4, #12]
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b14:	6921      	ldr	r1, [r4, #16]
 8002b16:	464a      	mov	r2, r9
 8002b18:	f000 fabe 	bl	8003098 <memcpy>
 8002b1c:	89a3      	ldrh	r3, [r4, #12]
 8002b1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b26:	81a3      	strh	r3, [r4, #12]
 8002b28:	6126      	str	r6, [r4, #16]
 8002b2a:	6165      	str	r5, [r4, #20]
 8002b2c:	444e      	add	r6, r9
 8002b2e:	eba5 0509 	sub.w	r5, r5, r9
 8002b32:	6026      	str	r6, [r4, #0]
 8002b34:	60a5      	str	r5, [r4, #8]
 8002b36:	463e      	mov	r6, r7
 8002b38:	42be      	cmp	r6, r7
 8002b3a:	d900      	bls.n	8002b3e <__ssputs_r+0x86>
 8002b3c:	463e      	mov	r6, r7
 8002b3e:	6820      	ldr	r0, [r4, #0]
 8002b40:	4632      	mov	r2, r6
 8002b42:	4641      	mov	r1, r8
 8002b44:	f000 fab6 	bl	80030b4 <memmove>
 8002b48:	68a3      	ldr	r3, [r4, #8]
 8002b4a:	1b9b      	subs	r3, r3, r6
 8002b4c:	60a3      	str	r3, [r4, #8]
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	4433      	add	r3, r6
 8002b52:	6023      	str	r3, [r4, #0]
 8002b54:	2000      	movs	r0, #0
 8002b56:	e7db      	b.n	8002b10 <__ssputs_r+0x58>
 8002b58:	462a      	mov	r2, r5
 8002b5a:	f000 fba5 	bl	80032a8 <_realloc_r>
 8002b5e:	4606      	mov	r6, r0
 8002b60:	2800      	cmp	r0, #0
 8002b62:	d1e1      	bne.n	8002b28 <__ssputs_r+0x70>
 8002b64:	6921      	ldr	r1, [r4, #16]
 8002b66:	4650      	mov	r0, sl
 8002b68:	f000 fabe 	bl	80030e8 <_free_r>
 8002b6c:	e7c7      	b.n	8002afe <__ssputs_r+0x46>
	...

08002b70 <_svfiprintf_r>:
 8002b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b74:	4698      	mov	r8, r3
 8002b76:	898b      	ldrh	r3, [r1, #12]
 8002b78:	061b      	lsls	r3, r3, #24
 8002b7a:	b09d      	sub	sp, #116	; 0x74
 8002b7c:	4607      	mov	r7, r0
 8002b7e:	460d      	mov	r5, r1
 8002b80:	4614      	mov	r4, r2
 8002b82:	d50e      	bpl.n	8002ba2 <_svfiprintf_r+0x32>
 8002b84:	690b      	ldr	r3, [r1, #16]
 8002b86:	b963      	cbnz	r3, 8002ba2 <_svfiprintf_r+0x32>
 8002b88:	2140      	movs	r1, #64	; 0x40
 8002b8a:	f000 fb19 	bl	80031c0 <_malloc_r>
 8002b8e:	6028      	str	r0, [r5, #0]
 8002b90:	6128      	str	r0, [r5, #16]
 8002b92:	b920      	cbnz	r0, 8002b9e <_svfiprintf_r+0x2e>
 8002b94:	230c      	movs	r3, #12
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	e0d1      	b.n	8002d42 <_svfiprintf_r+0x1d2>
 8002b9e:	2340      	movs	r3, #64	; 0x40
 8002ba0:	616b      	str	r3, [r5, #20]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bac:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bb0:	2330      	movs	r3, #48	; 0x30
 8002bb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002d5c <_svfiprintf_r+0x1ec>
 8002bb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bba:	f04f 0901 	mov.w	r9, #1
 8002bbe:	4623      	mov	r3, r4
 8002bc0:	469a      	mov	sl, r3
 8002bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bc6:	b10a      	cbz	r2, 8002bcc <_svfiprintf_r+0x5c>
 8002bc8:	2a25      	cmp	r2, #37	; 0x25
 8002bca:	d1f9      	bne.n	8002bc0 <_svfiprintf_r+0x50>
 8002bcc:	ebba 0b04 	subs.w	fp, sl, r4
 8002bd0:	d00b      	beq.n	8002bea <_svfiprintf_r+0x7a>
 8002bd2:	465b      	mov	r3, fp
 8002bd4:	4622      	mov	r2, r4
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	4638      	mov	r0, r7
 8002bda:	f7ff ff6d 	bl	8002ab8 <__ssputs_r>
 8002bde:	3001      	adds	r0, #1
 8002be0:	f000 80aa 	beq.w	8002d38 <_svfiprintf_r+0x1c8>
 8002be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002be6:	445a      	add	r2, fp
 8002be8:	9209      	str	r2, [sp, #36]	; 0x24
 8002bea:	f89a 3000 	ldrb.w	r3, [sl]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 80a2 	beq.w	8002d38 <_svfiprintf_r+0x1c8>
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bfe:	f10a 0a01 	add.w	sl, sl, #1
 8002c02:	9304      	str	r3, [sp, #16]
 8002c04:	9307      	str	r3, [sp, #28]
 8002c06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8002c0c:	4654      	mov	r4, sl
 8002c0e:	2205      	movs	r2, #5
 8002c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c14:	4851      	ldr	r0, [pc, #324]	; (8002d5c <_svfiprintf_r+0x1ec>)
 8002c16:	f7fd fae3 	bl	80001e0 <memchr>
 8002c1a:	9a04      	ldr	r2, [sp, #16]
 8002c1c:	b9d8      	cbnz	r0, 8002c56 <_svfiprintf_r+0xe6>
 8002c1e:	06d0      	lsls	r0, r2, #27
 8002c20:	bf44      	itt	mi
 8002c22:	2320      	movmi	r3, #32
 8002c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c28:	0711      	lsls	r1, r2, #28
 8002c2a:	bf44      	itt	mi
 8002c2c:	232b      	movmi	r3, #43	; 0x2b
 8002c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c32:	f89a 3000 	ldrb.w	r3, [sl]
 8002c36:	2b2a      	cmp	r3, #42	; 0x2a
 8002c38:	d015      	beq.n	8002c66 <_svfiprintf_r+0xf6>
 8002c3a:	9a07      	ldr	r2, [sp, #28]
 8002c3c:	4654      	mov	r4, sl
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f04f 0c0a 	mov.w	ip, #10
 8002c44:	4621      	mov	r1, r4
 8002c46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c4a:	3b30      	subs	r3, #48	; 0x30
 8002c4c:	2b09      	cmp	r3, #9
 8002c4e:	d94e      	bls.n	8002cee <_svfiprintf_r+0x17e>
 8002c50:	b1b0      	cbz	r0, 8002c80 <_svfiprintf_r+0x110>
 8002c52:	9207      	str	r2, [sp, #28]
 8002c54:	e014      	b.n	8002c80 <_svfiprintf_r+0x110>
 8002c56:	eba0 0308 	sub.w	r3, r0, r8
 8002c5a:	fa09 f303 	lsl.w	r3, r9, r3
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	9304      	str	r3, [sp, #16]
 8002c62:	46a2      	mov	sl, r4
 8002c64:	e7d2      	b.n	8002c0c <_svfiprintf_r+0x9c>
 8002c66:	9b03      	ldr	r3, [sp, #12]
 8002c68:	1d19      	adds	r1, r3, #4
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	9103      	str	r1, [sp, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bfbb      	ittet	lt
 8002c72:	425b      	neglt	r3, r3
 8002c74:	f042 0202 	orrlt.w	r2, r2, #2
 8002c78:	9307      	strge	r3, [sp, #28]
 8002c7a:	9307      	strlt	r3, [sp, #28]
 8002c7c:	bfb8      	it	lt
 8002c7e:	9204      	strlt	r2, [sp, #16]
 8002c80:	7823      	ldrb	r3, [r4, #0]
 8002c82:	2b2e      	cmp	r3, #46	; 0x2e
 8002c84:	d10c      	bne.n	8002ca0 <_svfiprintf_r+0x130>
 8002c86:	7863      	ldrb	r3, [r4, #1]
 8002c88:	2b2a      	cmp	r3, #42	; 0x2a
 8002c8a:	d135      	bne.n	8002cf8 <_svfiprintf_r+0x188>
 8002c8c:	9b03      	ldr	r3, [sp, #12]
 8002c8e:	1d1a      	adds	r2, r3, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	9203      	str	r2, [sp, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bfb8      	it	lt
 8002c98:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c9c:	3402      	adds	r4, #2
 8002c9e:	9305      	str	r3, [sp, #20]
 8002ca0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002d6c <_svfiprintf_r+0x1fc>
 8002ca4:	7821      	ldrb	r1, [r4, #0]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	4650      	mov	r0, sl
 8002caa:	f7fd fa99 	bl	80001e0 <memchr>
 8002cae:	b140      	cbz	r0, 8002cc2 <_svfiprintf_r+0x152>
 8002cb0:	2340      	movs	r3, #64	; 0x40
 8002cb2:	eba0 000a 	sub.w	r0, r0, sl
 8002cb6:	fa03 f000 	lsl.w	r0, r3, r0
 8002cba:	9b04      	ldr	r3, [sp, #16]
 8002cbc:	4303      	orrs	r3, r0
 8002cbe:	3401      	adds	r4, #1
 8002cc0:	9304      	str	r3, [sp, #16]
 8002cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cc6:	4826      	ldr	r0, [pc, #152]	; (8002d60 <_svfiprintf_r+0x1f0>)
 8002cc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ccc:	2206      	movs	r2, #6
 8002cce:	f7fd fa87 	bl	80001e0 <memchr>
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d038      	beq.n	8002d48 <_svfiprintf_r+0x1d8>
 8002cd6:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <_svfiprintf_r+0x1f4>)
 8002cd8:	bb1b      	cbnz	r3, 8002d22 <_svfiprintf_r+0x1b2>
 8002cda:	9b03      	ldr	r3, [sp, #12]
 8002cdc:	3307      	adds	r3, #7
 8002cde:	f023 0307 	bic.w	r3, r3, #7
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	9303      	str	r3, [sp, #12]
 8002ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ce8:	4433      	add	r3, r6
 8002cea:	9309      	str	r3, [sp, #36]	; 0x24
 8002cec:	e767      	b.n	8002bbe <_svfiprintf_r+0x4e>
 8002cee:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	e7a5      	b.n	8002c44 <_svfiprintf_r+0xd4>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	3401      	adds	r4, #1
 8002cfc:	9305      	str	r3, [sp, #20]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f04f 0c0a 	mov.w	ip, #10
 8002d04:	4620      	mov	r0, r4
 8002d06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d0a:	3a30      	subs	r2, #48	; 0x30
 8002d0c:	2a09      	cmp	r2, #9
 8002d0e:	d903      	bls.n	8002d18 <_svfiprintf_r+0x1a8>
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0c5      	beq.n	8002ca0 <_svfiprintf_r+0x130>
 8002d14:	9105      	str	r1, [sp, #20]
 8002d16:	e7c3      	b.n	8002ca0 <_svfiprintf_r+0x130>
 8002d18:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e7f0      	b.n	8002d04 <_svfiprintf_r+0x194>
 8002d22:	ab03      	add	r3, sp, #12
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	462a      	mov	r2, r5
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <_svfiprintf_r+0x1f8>)
 8002d2a:	a904      	add	r1, sp, #16
 8002d2c:	4638      	mov	r0, r7
 8002d2e:	f3af 8000 	nop.w
 8002d32:	1c42      	adds	r2, r0, #1
 8002d34:	4606      	mov	r6, r0
 8002d36:	d1d6      	bne.n	8002ce6 <_svfiprintf_r+0x176>
 8002d38:	89ab      	ldrh	r3, [r5, #12]
 8002d3a:	065b      	lsls	r3, r3, #25
 8002d3c:	f53f af2c 	bmi.w	8002b98 <_svfiprintf_r+0x28>
 8002d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d42:	b01d      	add	sp, #116	; 0x74
 8002d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d48:	ab03      	add	r3, sp, #12
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	462a      	mov	r2, r5
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <_svfiprintf_r+0x1f8>)
 8002d50:	a904      	add	r1, sp, #16
 8002d52:	4638      	mov	r0, r7
 8002d54:	f000 f87a 	bl	8002e4c <_printf_i>
 8002d58:	e7eb      	b.n	8002d32 <_svfiprintf_r+0x1c2>
 8002d5a:	bf00      	nop
 8002d5c:	0800339c 	.word	0x0800339c
 8002d60:	080033a6 	.word	0x080033a6
 8002d64:	00000000 	.word	0x00000000
 8002d68:	08002ab9 	.word	0x08002ab9
 8002d6c:	080033a2 	.word	0x080033a2

08002d70 <_printf_common>:
 8002d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d74:	4616      	mov	r6, r2
 8002d76:	4699      	mov	r9, r3
 8002d78:	688a      	ldr	r2, [r1, #8]
 8002d7a:	690b      	ldr	r3, [r1, #16]
 8002d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d80:	4293      	cmp	r3, r2
 8002d82:	bfb8      	it	lt
 8002d84:	4613      	movlt	r3, r2
 8002d86:	6033      	str	r3, [r6, #0]
 8002d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d8c:	4607      	mov	r7, r0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	b10a      	cbz	r2, 8002d96 <_printf_common+0x26>
 8002d92:	3301      	adds	r3, #1
 8002d94:	6033      	str	r3, [r6, #0]
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	0699      	lsls	r1, r3, #26
 8002d9a:	bf42      	ittt	mi
 8002d9c:	6833      	ldrmi	r3, [r6, #0]
 8002d9e:	3302      	addmi	r3, #2
 8002da0:	6033      	strmi	r3, [r6, #0]
 8002da2:	6825      	ldr	r5, [r4, #0]
 8002da4:	f015 0506 	ands.w	r5, r5, #6
 8002da8:	d106      	bne.n	8002db8 <_printf_common+0x48>
 8002daa:	f104 0a19 	add.w	sl, r4, #25
 8002dae:	68e3      	ldr	r3, [r4, #12]
 8002db0:	6832      	ldr	r2, [r6, #0]
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	42ab      	cmp	r3, r5
 8002db6:	dc26      	bgt.n	8002e06 <_printf_common+0x96>
 8002db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002dbc:	1e13      	subs	r3, r2, #0
 8002dbe:	6822      	ldr	r2, [r4, #0]
 8002dc0:	bf18      	it	ne
 8002dc2:	2301      	movne	r3, #1
 8002dc4:	0692      	lsls	r2, r2, #26
 8002dc6:	d42b      	bmi.n	8002e20 <_printf_common+0xb0>
 8002dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dcc:	4649      	mov	r1, r9
 8002dce:	4638      	mov	r0, r7
 8002dd0:	47c0      	blx	r8
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	d01e      	beq.n	8002e14 <_printf_common+0xa4>
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	68e5      	ldr	r5, [r4, #12]
 8002dda:	6832      	ldr	r2, [r6, #0]
 8002ddc:	f003 0306 	and.w	r3, r3, #6
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	bf08      	it	eq
 8002de4:	1aad      	subeq	r5, r5, r2
 8002de6:	68a3      	ldr	r3, [r4, #8]
 8002de8:	6922      	ldr	r2, [r4, #16]
 8002dea:	bf0c      	ite	eq
 8002dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002df0:	2500      	movne	r5, #0
 8002df2:	4293      	cmp	r3, r2
 8002df4:	bfc4      	itt	gt
 8002df6:	1a9b      	subgt	r3, r3, r2
 8002df8:	18ed      	addgt	r5, r5, r3
 8002dfa:	2600      	movs	r6, #0
 8002dfc:	341a      	adds	r4, #26
 8002dfe:	42b5      	cmp	r5, r6
 8002e00:	d11a      	bne.n	8002e38 <_printf_common+0xc8>
 8002e02:	2000      	movs	r0, #0
 8002e04:	e008      	b.n	8002e18 <_printf_common+0xa8>
 8002e06:	2301      	movs	r3, #1
 8002e08:	4652      	mov	r2, sl
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	4638      	mov	r0, r7
 8002e0e:	47c0      	blx	r8
 8002e10:	3001      	adds	r0, #1
 8002e12:	d103      	bne.n	8002e1c <_printf_common+0xac>
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295
 8002e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e1c:	3501      	adds	r5, #1
 8002e1e:	e7c6      	b.n	8002dae <_printf_common+0x3e>
 8002e20:	18e1      	adds	r1, r4, r3
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	2030      	movs	r0, #48	; 0x30
 8002e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e2a:	4422      	add	r2, r4
 8002e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e34:	3302      	adds	r3, #2
 8002e36:	e7c7      	b.n	8002dc8 <_printf_common+0x58>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	4622      	mov	r2, r4
 8002e3c:	4649      	mov	r1, r9
 8002e3e:	4638      	mov	r0, r7
 8002e40:	47c0      	blx	r8
 8002e42:	3001      	adds	r0, #1
 8002e44:	d0e6      	beq.n	8002e14 <_printf_common+0xa4>
 8002e46:	3601      	adds	r6, #1
 8002e48:	e7d9      	b.n	8002dfe <_printf_common+0x8e>
	...

08002e4c <_printf_i>:
 8002e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e50:	7e0f      	ldrb	r7, [r1, #24]
 8002e52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e54:	2f78      	cmp	r7, #120	; 0x78
 8002e56:	4691      	mov	r9, r2
 8002e58:	4680      	mov	r8, r0
 8002e5a:	460c      	mov	r4, r1
 8002e5c:	469a      	mov	sl, r3
 8002e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e62:	d807      	bhi.n	8002e74 <_printf_i+0x28>
 8002e64:	2f62      	cmp	r7, #98	; 0x62
 8002e66:	d80a      	bhi.n	8002e7e <_printf_i+0x32>
 8002e68:	2f00      	cmp	r7, #0
 8002e6a:	f000 80d8 	beq.w	800301e <_printf_i+0x1d2>
 8002e6e:	2f58      	cmp	r7, #88	; 0x58
 8002e70:	f000 80a3 	beq.w	8002fba <_printf_i+0x16e>
 8002e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e7c:	e03a      	b.n	8002ef4 <_printf_i+0xa8>
 8002e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e82:	2b15      	cmp	r3, #21
 8002e84:	d8f6      	bhi.n	8002e74 <_printf_i+0x28>
 8002e86:	a101      	add	r1, pc, #4	; (adr r1, 8002e8c <_printf_i+0x40>)
 8002e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e8c:	08002ee5 	.word	0x08002ee5
 8002e90:	08002ef9 	.word	0x08002ef9
 8002e94:	08002e75 	.word	0x08002e75
 8002e98:	08002e75 	.word	0x08002e75
 8002e9c:	08002e75 	.word	0x08002e75
 8002ea0:	08002e75 	.word	0x08002e75
 8002ea4:	08002ef9 	.word	0x08002ef9
 8002ea8:	08002e75 	.word	0x08002e75
 8002eac:	08002e75 	.word	0x08002e75
 8002eb0:	08002e75 	.word	0x08002e75
 8002eb4:	08002e75 	.word	0x08002e75
 8002eb8:	08003005 	.word	0x08003005
 8002ebc:	08002f29 	.word	0x08002f29
 8002ec0:	08002fe7 	.word	0x08002fe7
 8002ec4:	08002e75 	.word	0x08002e75
 8002ec8:	08002e75 	.word	0x08002e75
 8002ecc:	08003027 	.word	0x08003027
 8002ed0:	08002e75 	.word	0x08002e75
 8002ed4:	08002f29 	.word	0x08002f29
 8002ed8:	08002e75 	.word	0x08002e75
 8002edc:	08002e75 	.word	0x08002e75
 8002ee0:	08002fef 	.word	0x08002fef
 8002ee4:	682b      	ldr	r3, [r5, #0]
 8002ee6:	1d1a      	adds	r2, r3, #4
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	602a      	str	r2, [r5, #0]
 8002eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0a3      	b.n	8003040 <_printf_i+0x1f4>
 8002ef8:	6820      	ldr	r0, [r4, #0]
 8002efa:	6829      	ldr	r1, [r5, #0]
 8002efc:	0606      	lsls	r6, r0, #24
 8002efe:	f101 0304 	add.w	r3, r1, #4
 8002f02:	d50a      	bpl.n	8002f1a <_printf_i+0xce>
 8002f04:	680e      	ldr	r6, [r1, #0]
 8002f06:	602b      	str	r3, [r5, #0]
 8002f08:	2e00      	cmp	r6, #0
 8002f0a:	da03      	bge.n	8002f14 <_printf_i+0xc8>
 8002f0c:	232d      	movs	r3, #45	; 0x2d
 8002f0e:	4276      	negs	r6, r6
 8002f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f14:	485e      	ldr	r0, [pc, #376]	; (8003090 <_printf_i+0x244>)
 8002f16:	230a      	movs	r3, #10
 8002f18:	e019      	b.n	8002f4e <_printf_i+0x102>
 8002f1a:	680e      	ldr	r6, [r1, #0]
 8002f1c:	602b      	str	r3, [r5, #0]
 8002f1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f22:	bf18      	it	ne
 8002f24:	b236      	sxthne	r6, r6
 8002f26:	e7ef      	b.n	8002f08 <_printf_i+0xbc>
 8002f28:	682b      	ldr	r3, [r5, #0]
 8002f2a:	6820      	ldr	r0, [r4, #0]
 8002f2c:	1d19      	adds	r1, r3, #4
 8002f2e:	6029      	str	r1, [r5, #0]
 8002f30:	0601      	lsls	r1, r0, #24
 8002f32:	d501      	bpl.n	8002f38 <_printf_i+0xec>
 8002f34:	681e      	ldr	r6, [r3, #0]
 8002f36:	e002      	b.n	8002f3e <_printf_i+0xf2>
 8002f38:	0646      	lsls	r6, r0, #25
 8002f3a:	d5fb      	bpl.n	8002f34 <_printf_i+0xe8>
 8002f3c:	881e      	ldrh	r6, [r3, #0]
 8002f3e:	4854      	ldr	r0, [pc, #336]	; (8003090 <_printf_i+0x244>)
 8002f40:	2f6f      	cmp	r7, #111	; 0x6f
 8002f42:	bf0c      	ite	eq
 8002f44:	2308      	moveq	r3, #8
 8002f46:	230a      	movne	r3, #10
 8002f48:	2100      	movs	r1, #0
 8002f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f4e:	6865      	ldr	r5, [r4, #4]
 8002f50:	60a5      	str	r5, [r4, #8]
 8002f52:	2d00      	cmp	r5, #0
 8002f54:	bfa2      	ittt	ge
 8002f56:	6821      	ldrge	r1, [r4, #0]
 8002f58:	f021 0104 	bicge.w	r1, r1, #4
 8002f5c:	6021      	strge	r1, [r4, #0]
 8002f5e:	b90e      	cbnz	r6, 8002f64 <_printf_i+0x118>
 8002f60:	2d00      	cmp	r5, #0
 8002f62:	d04d      	beq.n	8003000 <_printf_i+0x1b4>
 8002f64:	4615      	mov	r5, r2
 8002f66:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f6a:	fb03 6711 	mls	r7, r3, r1, r6
 8002f6e:	5dc7      	ldrb	r7, [r0, r7]
 8002f70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f74:	4637      	mov	r7, r6
 8002f76:	42bb      	cmp	r3, r7
 8002f78:	460e      	mov	r6, r1
 8002f7a:	d9f4      	bls.n	8002f66 <_printf_i+0x11a>
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d10b      	bne.n	8002f98 <_printf_i+0x14c>
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	07de      	lsls	r6, r3, #31
 8002f84:	d508      	bpl.n	8002f98 <_printf_i+0x14c>
 8002f86:	6923      	ldr	r3, [r4, #16]
 8002f88:	6861      	ldr	r1, [r4, #4]
 8002f8a:	4299      	cmp	r1, r3
 8002f8c:	bfde      	ittt	le
 8002f8e:	2330      	movle	r3, #48	; 0x30
 8002f90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f98:	1b52      	subs	r2, r2, r5
 8002f9a:	6122      	str	r2, [r4, #16]
 8002f9c:	f8cd a000 	str.w	sl, [sp]
 8002fa0:	464b      	mov	r3, r9
 8002fa2:	aa03      	add	r2, sp, #12
 8002fa4:	4621      	mov	r1, r4
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	f7ff fee2 	bl	8002d70 <_printf_common>
 8002fac:	3001      	adds	r0, #1
 8002fae:	d14c      	bne.n	800304a <_printf_i+0x1fe>
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	b004      	add	sp, #16
 8002fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fba:	4835      	ldr	r0, [pc, #212]	; (8003090 <_printf_i+0x244>)
 8002fbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002fc0:	6829      	ldr	r1, [r5, #0]
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8002fc8:	6029      	str	r1, [r5, #0]
 8002fca:	061d      	lsls	r5, r3, #24
 8002fcc:	d514      	bpl.n	8002ff8 <_printf_i+0x1ac>
 8002fce:	07df      	lsls	r7, r3, #31
 8002fd0:	bf44      	itt	mi
 8002fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8002fd6:	6023      	strmi	r3, [r4, #0]
 8002fd8:	b91e      	cbnz	r6, 8002fe2 <_printf_i+0x196>
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	f023 0320 	bic.w	r3, r3, #32
 8002fe0:	6023      	str	r3, [r4, #0]
 8002fe2:	2310      	movs	r3, #16
 8002fe4:	e7b0      	b.n	8002f48 <_printf_i+0xfc>
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	f043 0320 	orr.w	r3, r3, #32
 8002fec:	6023      	str	r3, [r4, #0]
 8002fee:	2378      	movs	r3, #120	; 0x78
 8002ff0:	4828      	ldr	r0, [pc, #160]	; (8003094 <_printf_i+0x248>)
 8002ff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ff6:	e7e3      	b.n	8002fc0 <_printf_i+0x174>
 8002ff8:	0659      	lsls	r1, r3, #25
 8002ffa:	bf48      	it	mi
 8002ffc:	b2b6      	uxthmi	r6, r6
 8002ffe:	e7e6      	b.n	8002fce <_printf_i+0x182>
 8003000:	4615      	mov	r5, r2
 8003002:	e7bb      	b.n	8002f7c <_printf_i+0x130>
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	6826      	ldr	r6, [r4, #0]
 8003008:	6961      	ldr	r1, [r4, #20]
 800300a:	1d18      	adds	r0, r3, #4
 800300c:	6028      	str	r0, [r5, #0]
 800300e:	0635      	lsls	r5, r6, #24
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	d501      	bpl.n	8003018 <_printf_i+0x1cc>
 8003014:	6019      	str	r1, [r3, #0]
 8003016:	e002      	b.n	800301e <_printf_i+0x1d2>
 8003018:	0670      	lsls	r0, r6, #25
 800301a:	d5fb      	bpl.n	8003014 <_printf_i+0x1c8>
 800301c:	8019      	strh	r1, [r3, #0]
 800301e:	2300      	movs	r3, #0
 8003020:	6123      	str	r3, [r4, #16]
 8003022:	4615      	mov	r5, r2
 8003024:	e7ba      	b.n	8002f9c <_printf_i+0x150>
 8003026:	682b      	ldr	r3, [r5, #0]
 8003028:	1d1a      	adds	r2, r3, #4
 800302a:	602a      	str	r2, [r5, #0]
 800302c:	681d      	ldr	r5, [r3, #0]
 800302e:	6862      	ldr	r2, [r4, #4]
 8003030:	2100      	movs	r1, #0
 8003032:	4628      	mov	r0, r5
 8003034:	f7fd f8d4 	bl	80001e0 <memchr>
 8003038:	b108      	cbz	r0, 800303e <_printf_i+0x1f2>
 800303a:	1b40      	subs	r0, r0, r5
 800303c:	6060      	str	r0, [r4, #4]
 800303e:	6863      	ldr	r3, [r4, #4]
 8003040:	6123      	str	r3, [r4, #16]
 8003042:	2300      	movs	r3, #0
 8003044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003048:	e7a8      	b.n	8002f9c <_printf_i+0x150>
 800304a:	6923      	ldr	r3, [r4, #16]
 800304c:	462a      	mov	r2, r5
 800304e:	4649      	mov	r1, r9
 8003050:	4640      	mov	r0, r8
 8003052:	47d0      	blx	sl
 8003054:	3001      	adds	r0, #1
 8003056:	d0ab      	beq.n	8002fb0 <_printf_i+0x164>
 8003058:	6823      	ldr	r3, [r4, #0]
 800305a:	079b      	lsls	r3, r3, #30
 800305c:	d413      	bmi.n	8003086 <_printf_i+0x23a>
 800305e:	68e0      	ldr	r0, [r4, #12]
 8003060:	9b03      	ldr	r3, [sp, #12]
 8003062:	4298      	cmp	r0, r3
 8003064:	bfb8      	it	lt
 8003066:	4618      	movlt	r0, r3
 8003068:	e7a4      	b.n	8002fb4 <_printf_i+0x168>
 800306a:	2301      	movs	r3, #1
 800306c:	4632      	mov	r2, r6
 800306e:	4649      	mov	r1, r9
 8003070:	4640      	mov	r0, r8
 8003072:	47d0      	blx	sl
 8003074:	3001      	adds	r0, #1
 8003076:	d09b      	beq.n	8002fb0 <_printf_i+0x164>
 8003078:	3501      	adds	r5, #1
 800307a:	68e3      	ldr	r3, [r4, #12]
 800307c:	9903      	ldr	r1, [sp, #12]
 800307e:	1a5b      	subs	r3, r3, r1
 8003080:	42ab      	cmp	r3, r5
 8003082:	dcf2      	bgt.n	800306a <_printf_i+0x21e>
 8003084:	e7eb      	b.n	800305e <_printf_i+0x212>
 8003086:	2500      	movs	r5, #0
 8003088:	f104 0619 	add.w	r6, r4, #25
 800308c:	e7f5      	b.n	800307a <_printf_i+0x22e>
 800308e:	bf00      	nop
 8003090:	080033ad 	.word	0x080033ad
 8003094:	080033be 	.word	0x080033be

08003098 <memcpy>:
 8003098:	440a      	add	r2, r1
 800309a:	4291      	cmp	r1, r2
 800309c:	f100 33ff 	add.w	r3, r0, #4294967295
 80030a0:	d100      	bne.n	80030a4 <memcpy+0xc>
 80030a2:	4770      	bx	lr
 80030a4:	b510      	push	{r4, lr}
 80030a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030ae:	4291      	cmp	r1, r2
 80030b0:	d1f9      	bne.n	80030a6 <memcpy+0xe>
 80030b2:	bd10      	pop	{r4, pc}

080030b4 <memmove>:
 80030b4:	4288      	cmp	r0, r1
 80030b6:	b510      	push	{r4, lr}
 80030b8:	eb01 0402 	add.w	r4, r1, r2
 80030bc:	d902      	bls.n	80030c4 <memmove+0x10>
 80030be:	4284      	cmp	r4, r0
 80030c0:	4623      	mov	r3, r4
 80030c2:	d807      	bhi.n	80030d4 <memmove+0x20>
 80030c4:	1e43      	subs	r3, r0, #1
 80030c6:	42a1      	cmp	r1, r4
 80030c8:	d008      	beq.n	80030dc <memmove+0x28>
 80030ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030d2:	e7f8      	b.n	80030c6 <memmove+0x12>
 80030d4:	4402      	add	r2, r0
 80030d6:	4601      	mov	r1, r0
 80030d8:	428a      	cmp	r2, r1
 80030da:	d100      	bne.n	80030de <memmove+0x2a>
 80030dc:	bd10      	pop	{r4, pc}
 80030de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030e6:	e7f7      	b.n	80030d8 <memmove+0x24>

080030e8 <_free_r>:
 80030e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030ea:	2900      	cmp	r1, #0
 80030ec:	d044      	beq.n	8003178 <_free_r+0x90>
 80030ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030f2:	9001      	str	r0, [sp, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f1a1 0404 	sub.w	r4, r1, #4
 80030fa:	bfb8      	it	lt
 80030fc:	18e4      	addlt	r4, r4, r3
 80030fe:	f000 f913 	bl	8003328 <__malloc_lock>
 8003102:	4a1e      	ldr	r2, [pc, #120]	; (800317c <_free_r+0x94>)
 8003104:	9801      	ldr	r0, [sp, #4]
 8003106:	6813      	ldr	r3, [r2, #0]
 8003108:	b933      	cbnz	r3, 8003118 <_free_r+0x30>
 800310a:	6063      	str	r3, [r4, #4]
 800310c:	6014      	str	r4, [r2, #0]
 800310e:	b003      	add	sp, #12
 8003110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003114:	f000 b90e 	b.w	8003334 <__malloc_unlock>
 8003118:	42a3      	cmp	r3, r4
 800311a:	d908      	bls.n	800312e <_free_r+0x46>
 800311c:	6825      	ldr	r5, [r4, #0]
 800311e:	1961      	adds	r1, r4, r5
 8003120:	428b      	cmp	r3, r1
 8003122:	bf01      	itttt	eq
 8003124:	6819      	ldreq	r1, [r3, #0]
 8003126:	685b      	ldreq	r3, [r3, #4]
 8003128:	1949      	addeq	r1, r1, r5
 800312a:	6021      	streq	r1, [r4, #0]
 800312c:	e7ed      	b.n	800310a <_free_r+0x22>
 800312e:	461a      	mov	r2, r3
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	b10b      	cbz	r3, 8003138 <_free_r+0x50>
 8003134:	42a3      	cmp	r3, r4
 8003136:	d9fa      	bls.n	800312e <_free_r+0x46>
 8003138:	6811      	ldr	r1, [r2, #0]
 800313a:	1855      	adds	r5, r2, r1
 800313c:	42a5      	cmp	r5, r4
 800313e:	d10b      	bne.n	8003158 <_free_r+0x70>
 8003140:	6824      	ldr	r4, [r4, #0]
 8003142:	4421      	add	r1, r4
 8003144:	1854      	adds	r4, r2, r1
 8003146:	42a3      	cmp	r3, r4
 8003148:	6011      	str	r1, [r2, #0]
 800314a:	d1e0      	bne.n	800310e <_free_r+0x26>
 800314c:	681c      	ldr	r4, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	6053      	str	r3, [r2, #4]
 8003152:	4421      	add	r1, r4
 8003154:	6011      	str	r1, [r2, #0]
 8003156:	e7da      	b.n	800310e <_free_r+0x26>
 8003158:	d902      	bls.n	8003160 <_free_r+0x78>
 800315a:	230c      	movs	r3, #12
 800315c:	6003      	str	r3, [r0, #0]
 800315e:	e7d6      	b.n	800310e <_free_r+0x26>
 8003160:	6825      	ldr	r5, [r4, #0]
 8003162:	1961      	adds	r1, r4, r5
 8003164:	428b      	cmp	r3, r1
 8003166:	bf04      	itt	eq
 8003168:	6819      	ldreq	r1, [r3, #0]
 800316a:	685b      	ldreq	r3, [r3, #4]
 800316c:	6063      	str	r3, [r4, #4]
 800316e:	bf04      	itt	eq
 8003170:	1949      	addeq	r1, r1, r5
 8003172:	6021      	streq	r1, [r4, #0]
 8003174:	6054      	str	r4, [r2, #4]
 8003176:	e7ca      	b.n	800310e <_free_r+0x26>
 8003178:	b003      	add	sp, #12
 800317a:	bd30      	pop	{r4, r5, pc}
 800317c:	2000016c 	.word	0x2000016c

08003180 <sbrk_aligned>:
 8003180:	b570      	push	{r4, r5, r6, lr}
 8003182:	4e0e      	ldr	r6, [pc, #56]	; (80031bc <sbrk_aligned+0x3c>)
 8003184:	460c      	mov	r4, r1
 8003186:	6831      	ldr	r1, [r6, #0]
 8003188:	4605      	mov	r5, r0
 800318a:	b911      	cbnz	r1, 8003192 <sbrk_aligned+0x12>
 800318c:	f000 f8bc 	bl	8003308 <_sbrk_r>
 8003190:	6030      	str	r0, [r6, #0]
 8003192:	4621      	mov	r1, r4
 8003194:	4628      	mov	r0, r5
 8003196:	f000 f8b7 	bl	8003308 <_sbrk_r>
 800319a:	1c43      	adds	r3, r0, #1
 800319c:	d00a      	beq.n	80031b4 <sbrk_aligned+0x34>
 800319e:	1cc4      	adds	r4, r0, #3
 80031a0:	f024 0403 	bic.w	r4, r4, #3
 80031a4:	42a0      	cmp	r0, r4
 80031a6:	d007      	beq.n	80031b8 <sbrk_aligned+0x38>
 80031a8:	1a21      	subs	r1, r4, r0
 80031aa:	4628      	mov	r0, r5
 80031ac:	f000 f8ac 	bl	8003308 <_sbrk_r>
 80031b0:	3001      	adds	r0, #1
 80031b2:	d101      	bne.n	80031b8 <sbrk_aligned+0x38>
 80031b4:	f04f 34ff 	mov.w	r4, #4294967295
 80031b8:	4620      	mov	r0, r4
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	20000170 	.word	0x20000170

080031c0 <_malloc_r>:
 80031c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031c4:	1ccd      	adds	r5, r1, #3
 80031c6:	f025 0503 	bic.w	r5, r5, #3
 80031ca:	3508      	adds	r5, #8
 80031cc:	2d0c      	cmp	r5, #12
 80031ce:	bf38      	it	cc
 80031d0:	250c      	movcc	r5, #12
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	4607      	mov	r7, r0
 80031d6:	db01      	blt.n	80031dc <_malloc_r+0x1c>
 80031d8:	42a9      	cmp	r1, r5
 80031da:	d905      	bls.n	80031e8 <_malloc_r+0x28>
 80031dc:	230c      	movs	r3, #12
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	2600      	movs	r6, #0
 80031e2:	4630      	mov	r0, r6
 80031e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031e8:	4e2e      	ldr	r6, [pc, #184]	; (80032a4 <_malloc_r+0xe4>)
 80031ea:	f000 f89d 	bl	8003328 <__malloc_lock>
 80031ee:	6833      	ldr	r3, [r6, #0]
 80031f0:	461c      	mov	r4, r3
 80031f2:	bb34      	cbnz	r4, 8003242 <_malloc_r+0x82>
 80031f4:	4629      	mov	r1, r5
 80031f6:	4638      	mov	r0, r7
 80031f8:	f7ff ffc2 	bl	8003180 <sbrk_aligned>
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	4604      	mov	r4, r0
 8003200:	d14d      	bne.n	800329e <_malloc_r+0xde>
 8003202:	6834      	ldr	r4, [r6, #0]
 8003204:	4626      	mov	r6, r4
 8003206:	2e00      	cmp	r6, #0
 8003208:	d140      	bne.n	800328c <_malloc_r+0xcc>
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	4631      	mov	r1, r6
 800320e:	4638      	mov	r0, r7
 8003210:	eb04 0803 	add.w	r8, r4, r3
 8003214:	f000 f878 	bl	8003308 <_sbrk_r>
 8003218:	4580      	cmp	r8, r0
 800321a:	d13a      	bne.n	8003292 <_malloc_r+0xd2>
 800321c:	6821      	ldr	r1, [r4, #0]
 800321e:	3503      	adds	r5, #3
 8003220:	1a6d      	subs	r5, r5, r1
 8003222:	f025 0503 	bic.w	r5, r5, #3
 8003226:	3508      	adds	r5, #8
 8003228:	2d0c      	cmp	r5, #12
 800322a:	bf38      	it	cc
 800322c:	250c      	movcc	r5, #12
 800322e:	4629      	mov	r1, r5
 8003230:	4638      	mov	r0, r7
 8003232:	f7ff ffa5 	bl	8003180 <sbrk_aligned>
 8003236:	3001      	adds	r0, #1
 8003238:	d02b      	beq.n	8003292 <_malloc_r+0xd2>
 800323a:	6823      	ldr	r3, [r4, #0]
 800323c:	442b      	add	r3, r5
 800323e:	6023      	str	r3, [r4, #0]
 8003240:	e00e      	b.n	8003260 <_malloc_r+0xa0>
 8003242:	6822      	ldr	r2, [r4, #0]
 8003244:	1b52      	subs	r2, r2, r5
 8003246:	d41e      	bmi.n	8003286 <_malloc_r+0xc6>
 8003248:	2a0b      	cmp	r2, #11
 800324a:	d916      	bls.n	800327a <_malloc_r+0xba>
 800324c:	1961      	adds	r1, r4, r5
 800324e:	42a3      	cmp	r3, r4
 8003250:	6025      	str	r5, [r4, #0]
 8003252:	bf18      	it	ne
 8003254:	6059      	strne	r1, [r3, #4]
 8003256:	6863      	ldr	r3, [r4, #4]
 8003258:	bf08      	it	eq
 800325a:	6031      	streq	r1, [r6, #0]
 800325c:	5162      	str	r2, [r4, r5]
 800325e:	604b      	str	r3, [r1, #4]
 8003260:	4638      	mov	r0, r7
 8003262:	f104 060b 	add.w	r6, r4, #11
 8003266:	f000 f865 	bl	8003334 <__malloc_unlock>
 800326a:	f026 0607 	bic.w	r6, r6, #7
 800326e:	1d23      	adds	r3, r4, #4
 8003270:	1af2      	subs	r2, r6, r3
 8003272:	d0b6      	beq.n	80031e2 <_malloc_r+0x22>
 8003274:	1b9b      	subs	r3, r3, r6
 8003276:	50a3      	str	r3, [r4, r2]
 8003278:	e7b3      	b.n	80031e2 <_malloc_r+0x22>
 800327a:	6862      	ldr	r2, [r4, #4]
 800327c:	42a3      	cmp	r3, r4
 800327e:	bf0c      	ite	eq
 8003280:	6032      	streq	r2, [r6, #0]
 8003282:	605a      	strne	r2, [r3, #4]
 8003284:	e7ec      	b.n	8003260 <_malloc_r+0xa0>
 8003286:	4623      	mov	r3, r4
 8003288:	6864      	ldr	r4, [r4, #4]
 800328a:	e7b2      	b.n	80031f2 <_malloc_r+0x32>
 800328c:	4634      	mov	r4, r6
 800328e:	6876      	ldr	r6, [r6, #4]
 8003290:	e7b9      	b.n	8003206 <_malloc_r+0x46>
 8003292:	230c      	movs	r3, #12
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	4638      	mov	r0, r7
 8003298:	f000 f84c 	bl	8003334 <__malloc_unlock>
 800329c:	e7a1      	b.n	80031e2 <_malloc_r+0x22>
 800329e:	6025      	str	r5, [r4, #0]
 80032a0:	e7de      	b.n	8003260 <_malloc_r+0xa0>
 80032a2:	bf00      	nop
 80032a4:	2000016c 	.word	0x2000016c

080032a8 <_realloc_r>:
 80032a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ac:	4680      	mov	r8, r0
 80032ae:	4614      	mov	r4, r2
 80032b0:	460e      	mov	r6, r1
 80032b2:	b921      	cbnz	r1, 80032be <_realloc_r+0x16>
 80032b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032b8:	4611      	mov	r1, r2
 80032ba:	f7ff bf81 	b.w	80031c0 <_malloc_r>
 80032be:	b92a      	cbnz	r2, 80032cc <_realloc_r+0x24>
 80032c0:	f7ff ff12 	bl	80030e8 <_free_r>
 80032c4:	4625      	mov	r5, r4
 80032c6:	4628      	mov	r0, r5
 80032c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032cc:	f000 f838 	bl	8003340 <_malloc_usable_size_r>
 80032d0:	4284      	cmp	r4, r0
 80032d2:	4607      	mov	r7, r0
 80032d4:	d802      	bhi.n	80032dc <_realloc_r+0x34>
 80032d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80032da:	d812      	bhi.n	8003302 <_realloc_r+0x5a>
 80032dc:	4621      	mov	r1, r4
 80032de:	4640      	mov	r0, r8
 80032e0:	f7ff ff6e 	bl	80031c0 <_malloc_r>
 80032e4:	4605      	mov	r5, r0
 80032e6:	2800      	cmp	r0, #0
 80032e8:	d0ed      	beq.n	80032c6 <_realloc_r+0x1e>
 80032ea:	42bc      	cmp	r4, r7
 80032ec:	4622      	mov	r2, r4
 80032ee:	4631      	mov	r1, r6
 80032f0:	bf28      	it	cs
 80032f2:	463a      	movcs	r2, r7
 80032f4:	f7ff fed0 	bl	8003098 <memcpy>
 80032f8:	4631      	mov	r1, r6
 80032fa:	4640      	mov	r0, r8
 80032fc:	f7ff fef4 	bl	80030e8 <_free_r>
 8003300:	e7e1      	b.n	80032c6 <_realloc_r+0x1e>
 8003302:	4635      	mov	r5, r6
 8003304:	e7df      	b.n	80032c6 <_realloc_r+0x1e>
	...

08003308 <_sbrk_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	4d06      	ldr	r5, [pc, #24]	; (8003324 <_sbrk_r+0x1c>)
 800330c:	2300      	movs	r3, #0
 800330e:	4604      	mov	r4, r0
 8003310:	4608      	mov	r0, r1
 8003312:	602b      	str	r3, [r5, #0]
 8003314:	f7fd fe90 	bl	8001038 <_sbrk>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d102      	bne.n	8003322 <_sbrk_r+0x1a>
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	b103      	cbz	r3, 8003322 <_sbrk_r+0x1a>
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	bd38      	pop	{r3, r4, r5, pc}
 8003324:	20000174 	.word	0x20000174

08003328 <__malloc_lock>:
 8003328:	4801      	ldr	r0, [pc, #4]	; (8003330 <__malloc_lock+0x8>)
 800332a:	f000 b811 	b.w	8003350 <__retarget_lock_acquire_recursive>
 800332e:	bf00      	nop
 8003330:	20000178 	.word	0x20000178

08003334 <__malloc_unlock>:
 8003334:	4801      	ldr	r0, [pc, #4]	; (800333c <__malloc_unlock+0x8>)
 8003336:	f000 b80c 	b.w	8003352 <__retarget_lock_release_recursive>
 800333a:	bf00      	nop
 800333c:	20000178 	.word	0x20000178

08003340 <_malloc_usable_size_r>:
 8003340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003344:	1f18      	subs	r0, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	bfbc      	itt	lt
 800334a:	580b      	ldrlt	r3, [r1, r0]
 800334c:	18c0      	addlt	r0, r0, r3
 800334e:	4770      	bx	lr

08003350 <__retarget_lock_acquire_recursive>:
 8003350:	4770      	bx	lr

08003352 <__retarget_lock_release_recursive>:
 8003352:	4770      	bx	lr

08003354 <_init>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	bf00      	nop
 8003358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335a:	bc08      	pop	{r3}
 800335c:	469e      	mov	lr, r3
 800335e:	4770      	bx	lr

08003360 <_fini>:
 8003360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003362:	bf00      	nop
 8003364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003366:	bc08      	pop	{r3}
 8003368:	469e      	mov	lr, r3
 800336a:	4770      	bx	lr
