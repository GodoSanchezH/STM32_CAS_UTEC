
adc_fisico.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c30  08004c30  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c38  08004c38  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c38  08004c38  00014c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08004cb0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004cb0  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d517  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c46  00000000  00000000  0002d5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002fd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3ba  00000000  00000000  00030808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cda6  00000000  00000000  0004bbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1f6d  00000000  00000000  00058968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a8d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003274  00000000  00000000  0010a928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b90 	.word	0x08004b90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004b90 	.word	0x08004b90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fad6 	bl	8000b3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f833 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f91b 	bl	80007cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000596:	f000 f8e9 	bl	800076c <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800059a:	f000 f883 	bl	80006a4 <MX_ADC2_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  	  HAL_ADC_Start(&hadc2);
 800059e:	4813      	ldr	r0, [pc, #76]	; (80005ec <main+0x68>)
 80005a0:	f000 fef8 	bl	8001394 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc2, 100);
 80005a4:	2164      	movs	r1, #100	; 0x64
 80005a6:	4811      	ldr	r0, [pc, #68]	; (80005ec <main+0x68>)
 80005a8:	f000 ffe2 	bl	8001570 <HAL_ADC_PollForConversion>
	  	  dato_anx = HAL_ADC_GetValue(&hadc2);
 80005ac:	480f      	ldr	r0, [pc, #60]	; (80005ec <main+0x68>)
 80005ae:	f001 f8b7 	bl	8001720 <HAL_ADC_GetValue>
 80005b2:	4603      	mov	r3, r0
 80005b4:	82fb      	strh	r3, [r7, #22]
	  	  HAL_ADC_Stop(&hadc2);
 80005b6:	480d      	ldr	r0, [pc, #52]	; (80005ec <main+0x68>)
 80005b8:	f000 ffa6 	bl	8001508 <HAL_ADC_Stop>

	  	  sprintf(cadena2,"Valor: %u\n\r",dato_anx);
 80005bc:	8afa      	ldrh	r2, [r7, #22]
 80005be:	463b      	mov	r3, r7
 80005c0:	490b      	ldr	r1, [pc, #44]	; (80005f0 <main+0x6c>)
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fe76 	bl	80042b4 <siprintf>
	  	  HAL_UART_Transmit(&huart2, (const uint8_t *)cadena2,(uint16_t) strlen(cadena2), HAL_MAX_DELAY);
 80005c8:	463b      	mov	r3, r7
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff fe00 	bl	80001d0 <strlen>
 80005d0:	4603      	mov	r3, r0
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4639      	mov	r1, r7
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <main+0x70>)
 80005dc:	f003 f99a 	bl	8003914 <HAL_UART_Transmit>
	  	  HAL_Delay(200);
 80005e0:	20c8      	movs	r0, #200	; 0xc8
 80005e2:	f000 fb1f 	bl	8000c24 <HAL_Delay>
	  	  asm("NOP");
 80005e6:	bf00      	nop
  {
 80005e8:	e7d9      	b.n	800059e <main+0x1a>
 80005ea:	bf00      	nop
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	08004ba8 	.word	0x08004ba8
 80005f4:	200000f0 	.word	0x200000f0

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	; 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0314 	add.w	r3, r7, #20
 8000602:	2244      	movs	r2, #68	; 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fe4c 	bl	80042a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	463b      	mov	r3, r7
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061e:	f002 f8b9 	bl	8002794 <HAL_PWREx_ControlVoltageScaling>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000628:	f000 f91a 	bl	8000860 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800062c:	f002 f894 	bl	8002758 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <SystemClock_Config+0xa8>)
 8000632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000636:	4a1a      	ldr	r2, [pc, #104]	; (80006a0 <SystemClock_Config+0xa8>)
 8000638:	f023 0318 	bic.w	r3, r3, #24
 800063c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000640:	2314      	movs	r3, #20
 8000642:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000644:	2301      	movs	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000650:	23a0      	movs	r3, #160	; 0xa0
 8000652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000654:	2300      	movs	r3, #0
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4618      	mov	r0, r3
 800065e:	f002 f8ef 	bl	8002840 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000668:	f000 f8fa 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	2101      	movs	r1, #1
 8000684:	4618      	mov	r0, r3
 8000686:	f002 fd3d 	bl	8003104 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000690:	f000 f8e6 	bl	8000860 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000694:	f003 f8e0 	bl	8003858 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000698:	bf00      	nop
 800069a:	3758      	adds	r7, #88	; 0x58
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000

080006a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
 80006b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <MX_ADC2_Init+0xbc>)
 80006bc:	4a29      	ldr	r2, [pc, #164]	; (8000764 <MX_ADC2_Init+0xc0>)
 80006be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_ADC2_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <MX_ADC2_Init+0xbc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <MX_ADC2_Init+0xbc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006d2:	4b23      	ldr	r3, [pc, #140]	; (8000760 <MX_ADC2_Init+0xbc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_ADC2_Init+0xbc>)
 80006da:	2204      	movs	r2, #4
 80006dc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <MX_ADC2_Init+0xbc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_ADC2_Init+0xbc>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_ADC2_Init+0xbc>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_ADC2_Init+0xbc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_ADC2_Init+0xbc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_ADC2_Init+0xbc>)
 8000700:	2200      	movs	r2, #0
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_ADC2_Init+0xbc>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_ADC2_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_ADC2_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800071a:	4811      	ldr	r0, [pc, #68]	; (8000760 <MX_ADC2_Init+0xbc>)
 800071c:	f000 fcea 	bl	80010f4 <HAL_ADC_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000726:	f000 f89b 	bl	8000860 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_ADC2_Init+0xc4>)
 800072c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800072e:	2306      	movs	r3, #6
 8000730:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000736:	237f      	movs	r3, #127	; 0x7f
 8000738:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800073a:	2304      	movs	r3, #4
 800073c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_ADC2_Init+0xbc>)
 8000748:	f000 fff8 	bl	800173c <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000752:	f000 f885 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000008c 	.word	0x2000008c
 8000764:	50040100 	.word	0x50040100
 8000768:	21800100 	.word	0x21800100

0800076c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <MX_USART2_UART_Init+0x5c>)
 8000774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000792:	220c      	movs	r2, #12
 8000794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USART2_UART_Init+0x58>)
 80007b0:	f003 f862 	bl	8003878 <HAL_UART_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f851 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000f0 	.word	0x200000f0
 80007c8:	40004400 	.word	0x40004400

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_GPIO_Init+0x8c>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <MX_GPIO_Init+0x8c>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_GPIO_Init+0x8c>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_GPIO_Init+0x8c>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a16      	ldr	r2, [pc, #88]	; (8000858 <MX_GPIO_Init+0x8c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_GPIO_Init+0x8c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_GPIO_Init+0x8c>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <MX_GPIO_Init+0x8c>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_GPIO_Init+0x8c>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <MX_GPIO_Init+0x90>)
 8000830:	f001 ff7a 	bl	8002728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000834:	2308      	movs	r3, #8
 8000836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4619      	mov	r1, r3
 800084a:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_GPIO_Init+0x90>)
 800084c:	f001 fdfa 	bl	8002444 <HAL_GPIO_Init>

}
 8000850:	bf00      	nop
 8000852:	3720      	adds	r7, #32
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	48000400 	.word	0x48000400

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_MspInit+0x44>)
 8000874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <HAL_MspInit+0x44>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6613      	str	r3, [r2, #96]	; 0x60
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_MspInit+0x44>)
 8000880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <HAL_MspInit+0x44>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_MspInit+0x44>)
 8000890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000894:	6593      	str	r3, [r2, #88]	; 0x58
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_MspInit+0x44>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a15      	ldr	r2, [pc, #84]	; (8000928 <HAL_ADC_MspInit+0x74>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d124      	bne.n	8000920 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <HAL_ADC_MspInit+0x78>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <HAL_ADC_MspInit+0x78>)
 80008dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_ADC_MspInit+0x78>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <HAL_ADC_MspInit+0x78>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_ADC_MspInit+0x78>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <HAL_ADC_MspInit+0x78>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA3     ------> ADC2_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000906:	2308      	movs	r3, #8
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800090a:	230b      	movs	r3, #11
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f001 fd92 	bl	8002444 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	50040100 	.word	0x50040100
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b096      	sub	sp, #88	; 0x58
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	2234      	movs	r2, #52	; 0x34
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f003 fca7 	bl	80042a4 <memset>
  if(huart->Instance==USART2)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a28      	ldr	r2, [pc, #160]	; (80009fc <HAL_UART_MspInit+0xcc>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d148      	bne.n	80009f2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000960:	2302      	movs	r3, #2
 8000962:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000968:	f107 0310 	add.w	r3, r7, #16
 800096c:	4618      	mov	r0, r3
 800096e:	f002 fded 	bl	800354c <HAL_RCCEx_PeriphCLKConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000978:	f7ff ff72 	bl	8000860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800097c:	4b20      	ldr	r3, [pc, #128]	; (8000a00 <HAL_UART_MspInit+0xd0>)
 800097e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000980:	4a1f      	ldr	r2, [pc, #124]	; (8000a00 <HAL_UART_MspInit+0xd0>)
 8000982:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000986:	6593      	str	r3, [r2, #88]	; 0x58
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <HAL_UART_MspInit+0xd0>)
 800098a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <HAL_UART_MspInit+0xd0>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_UART_MspInit+0xd0>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0xd0>)
 80009a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009ac:	2304      	movs	r3, #4
 80009ae:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009bc:	2307      	movs	r3, #7
 80009be:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009c4:	4619      	mov	r1, r3
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f001 fd3b 	bl	8002444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009d2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009dc:	2303      	movs	r3, #3
 80009de:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009e0:	2303      	movs	r3, #3
 80009e2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009e8:	4619      	mov	r1, r3
 80009ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ee:	f001 fd29 	bl	8002444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3758      	adds	r7, #88	; 0x58
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40021000 	.word	0x40021000

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler+0x4>

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a50:	f000 f8c8 	bl	8000be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a60:	4a14      	ldr	r2, [pc, #80]	; (8000ab4 <_sbrk+0x5c>)
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <_sbrk+0x60>)
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d102      	bne.n	8000a7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <_sbrk+0x64>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <_sbrk+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d207      	bcs.n	8000a98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a88:	f003 fbe2 	bl	8004250 <__errno>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	220c      	movs	r2, #12
 8000a90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	e009      	b.n	8000aac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <_sbrk+0x64>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <_sbrk+0x64>)
 8000aa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	2000a000 	.word	0x2000a000
 8000ab8:	00000400 	.word	0x00000400
 8000abc:	20000174 	.word	0x20000174
 8000ac0:	20000190 	.word	0x20000190

08000ac4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aec:	f7ff ffea 	bl	8000ac4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	; (8000b24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	; (8000b28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <LoopForever+0xe>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <LoopForever+0x16>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b16:	f003 fba1 	bl	800425c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1a:	f7ff fd33 	bl	8000584 <main>

08000b1e <LoopForever>:

LoopForever:
    b LoopForever
 8000b1e:	e7fe      	b.n	8000b1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b20:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b2c:	08004c40 	.word	0x08004c40
  ldr r2, =_sbss
 8000b30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b34:	2000018c 	.word	0x2000018c

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>

08000b3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f001 fc49 	bl	80023dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f000 f80e 	bl	8000b6c <HAL_InitTick>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	71fb      	strb	r3, [r7, #7]
 8000b5a:	e001      	b.n	8000b60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b5c:	f7ff fe86 	bl	800086c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_InitTick+0x6c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d023      	beq.n	8000bc8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_InitTick+0x70>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_InitTick+0x6c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fc47 	bl	800242a <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10f      	bne.n	8000bc2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	d809      	bhi.n	8000bbc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f001 fc1f 	bl	80023f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_InitTick+0x74>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e007      	b.n	8000bcc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
 8000bc0:	e004      	b.n	8000bcc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	e001      	b.n	8000bcc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000004 	.word	0x20000004

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000178 	.word	0x20000178

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000178 	.word	0x20000178

08000c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c2c:	f7ff ffee 	bl	8000c0c <HAL_GetTick>
 8000c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c3c:	d005      	beq.n	8000c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_Delay+0x44>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	461a      	mov	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4413      	add	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4a:	bf00      	nop
 8000c4c:	f7ff ffde 	bl	8000c0c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d8f7      	bhi.n	8000c4c <HAL_Delay+0x28>
  {
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008

08000c6c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	431a      	orrs	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	609a      	str	r2, [r3, #8]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	609a      	str	r2, [r3, #8]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
 8000ce0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3360      	adds	r3, #96	; 0x60
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <LL_ADC_SetOffset+0x44>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000cfe:	683a      	ldr	r2, [r7, #0]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	4313      	orrs	r3, r2
 8000d04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d0c:	bf00      	nop
 8000d0e:	371c      	adds	r7, #28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	03fff000 	.word	0x03fff000

08000d1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3360      	adds	r3, #96	; 0x60
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b087      	sub	sp, #28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	3360      	adds	r3, #96	; 0x60
 8000d58:	461a      	mov	r2, r3
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	431a      	orrs	r2, r3
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d72:	bf00      	nop
 8000d74:	371c      	adds	r7, #28
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	431a      	orrs	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	615a      	str	r2, [r3, #20]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b087      	sub	sp, #28
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3330      	adds	r3, #48	; 0x30
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	4413      	add	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	f003 031f 	and.w	r3, r3, #31
 8000df4:	211f      	movs	r1, #31
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	0e9b      	lsrs	r3, r3, #26
 8000e02:	f003 011f 	and.w	r1, r3, #31
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	f003 031f 	and.w	r3, r3, #31
 8000e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e10:	431a      	orrs	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e16:	bf00      	nop
 8000e18:	371c      	adds	r7, #28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b087      	sub	sp, #28
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	60f8      	str	r0, [r7, #12]
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	3314      	adds	r3, #20
 8000e32:	461a      	mov	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	0e5b      	lsrs	r3, r3, #25
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	4413      	add	r3, r2
 8000e40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	0d1b      	lsrs	r3, r3, #20
 8000e4a:	f003 031f 	and.w	r3, r3, #31
 8000e4e:	2107      	movs	r1, #7
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	401a      	ands	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	0d1b      	lsrs	r3, r3, #20
 8000e5c:	f003 031f 	and.w	r3, r3, #31
 8000e60:	6879      	ldr	r1, [r7, #4]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	431a      	orrs	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000e6c:	bf00      	nop
 8000e6e:	371c      	adds	r7, #28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e90:	43db      	mvns	r3, r3
 8000e92:	401a      	ands	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0318 	and.w	r3, r3, #24
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000e9c:	40d9      	lsrs	r1, r3
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	400b      	ands	r3, r1
 8000ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000eae:	bf00      	nop
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	0007ffff 	.word	0x0007ffff

08000ec0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f003 031f 	and.w	r3, r3, #31
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	6093      	str	r3, [r2, #8]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f30:	d101      	bne.n	8000f36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000f54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000f80:	d101      	bne.n	8000f86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fa8:	f043 0201 	orr.w	r2, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fd0:	f043 0202 	orr.w	r2, r3, #2
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <LL_ADC_IsEnabled+0x18>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <LL_ADC_IsEnabled+0x1a>
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b02      	cmp	r3, #2
 800101c:	d101      	bne.n	8001022 <LL_ADC_IsDisableOngoing+0x18>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <LL_ADC_IsDisableOngoing+0x1a>
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001040:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001044:	f043 0204 	orr.w	r2, r3, #4
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800106c:	f043 0210 	orr.w	r2, r3, #16
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	2b04      	cmp	r3, #4
 8001092:	d101      	bne.n	8001098 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001094:	2301      	movs	r3, #1
 8001096:	e000      	b.n	800109a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010ba:	f043 0220 	orr.w	r2, r3, #32
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 0308 	and.w	r3, r3, #8
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d101      	bne.n	80010e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e131      	b.n	8001372 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001118:	2b00      	cmp	r3, #0
 800111a:	d109      	bne.n	8001130 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fbc9 	bl	80008b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fef1 	bl	8000f1c <LL_ADC_IsDeepPowerDownEnabled>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fed7 	bl	8000ef8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff0c 	bl	8000f6c <LL_ADC_IsInternalRegulatorEnabled>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d115      	bne.n	8001186 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fef0 	bl	8000f44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001164:	4b85      	ldr	r3, [pc, #532]	; (800137c <HAL_ADC_Init+0x288>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	099b      	lsrs	r3, r3, #6
 800116a:	4a85      	ldr	r2, [pc, #532]	; (8001380 <HAL_ADC_Init+0x28c>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	099b      	lsrs	r3, r3, #6
 8001172:	3301      	adds	r3, #1
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001178:	e002      	b.n	8001180 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3b01      	subs	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f9      	bne.n	800117a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff feee 	bl	8000f6c <LL_ADC_IsInternalRegulatorEnabled>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10d      	bne.n	80011b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119a:	f043 0210 	orr.w	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	f043 0201 	orr.w	r2, r3, #1
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff62 	bl	8001080 <LL_ADC_REG_IsConversionOngoing>
 80011bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 80ca 	bne.w	8001360 <HAL_ADC_Init+0x26c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f040 80c6 	bne.w	8001360 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80011dc:	f043 0202 	orr.w	r2, r3, #2
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fefb 	bl	8000fe4 <LL_ADC_IsEnabled>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d110      	bne.n	8001216 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011f4:	4863      	ldr	r0, [pc, #396]	; (8001384 <HAL_ADC_Init+0x290>)
 80011f6:	f7ff fef5 	bl	8000fe4 <LL_ADC_IsEnabled>
 80011fa:	4604      	mov	r4, r0
 80011fc:	4862      	ldr	r0, [pc, #392]	; (8001388 <HAL_ADC_Init+0x294>)
 80011fe:	f7ff fef1 	bl	8000fe4 <LL_ADC_IsEnabled>
 8001202:	4603      	mov	r3, r0
 8001204:	4323      	orrs	r3, r4
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	4619      	mov	r1, r3
 8001210:	485e      	ldr	r0, [pc, #376]	; (800138c <HAL_ADC_Init+0x298>)
 8001212:	f7ff fd2b 	bl	8000c6c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7e5b      	ldrb	r3, [r3, #25]
 800121a:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001220:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001226:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800122c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001234:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d106      	bne.n	8001252 <HAL_ADC_Init+0x15e>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	3b01      	subs	r3, #1
 800124a:	045b      	lsls	r3, r3, #17
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <HAL_ADC_Init+0x17a>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001266:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	4b46      	ldr	r3, [pc, #280]	; (8001390 <HAL_ADC_Init+0x29c>)
 8001276:	4013      	ands	r3, r2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	69b9      	ldr	r1, [r7, #24]
 800127e:	430b      	orrs	r3, r1
 8001280:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fefa 	bl	8001080 <LL_ADC_REG_IsConversionOngoing>
 800128c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff1b 	bl	80010ce <LL_ADC_INJ_IsConversionOngoing>
 8001298:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d13d      	bne.n	800131c <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d13a      	bne.n	800131c <HAL_ADC_Init+0x228>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012b2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012c2:	f023 0302 	bic.w	r3, r3, #2
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	430b      	orrs	r3, r1
 80012ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d118      	bne.n	800130c <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012e4:	f023 0304 	bic.w	r3, r3, #4
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012f0:	4311      	orrs	r1, r2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80012f6:	4311      	orrs	r1, r2
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80012fc:	430a      	orrs	r2, r1
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0201 	orr.w	r2, r2, #1
 8001308:	611a      	str	r2, [r3, #16]
 800130a:	e007      	b.n	800131c <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0201 	bic.w	r2, r2, #1
 800131a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d10c      	bne.n	800133e <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f023 010f 	bic.w	r1, r3, #15
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	1e5a      	subs	r2, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
 800133c:	e007      	b.n	800134e <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 020f 	bic.w	r2, r2, #15
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001352:	f023 0303 	bic.w	r3, r3, #3
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	655a      	str	r2, [r3, #84]	; 0x54
 800135e:	e007      	b.n	8001370 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001364:	f043 0210 	orr.w	r2, r3, #16
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001370:	7ffb      	ldrb	r3, [r7, #31]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3724      	adds	r7, #36	; 0x24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd90      	pop	{r4, r7, pc}
 800137a:	bf00      	nop
 800137c:	20000000 	.word	0x20000000
 8001380:	053e2d63 	.word	0x053e2d63
 8001384:	50040000 	.word	0x50040000
 8001388:	50040100 	.word	0x50040100
 800138c:	50040300 	.word	0x50040300
 8001390:	fff0c007 	.word	0xfff0c007

08001394 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800139c:	4857      	ldr	r0, [pc, #348]	; (80014fc <HAL_ADC_Start+0x168>)
 800139e:	f7ff fd8f 	bl	8000ec0 <LL_ADC_GetMultimode>
 80013a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe69 	bl	8001080 <LL_ADC_REG_IsConversionOngoing>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f040 809c 	bne.w	80014ee <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <HAL_ADC_Start+0x30>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e097      	b.n	80014f4 <HAL_ADC_Start+0x160>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fe6d 	bl	80020ac <ADC_Enable>
 80013d2:	4603      	mov	r3, r0
 80013d4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	f040 8083 	bne.w	80014e4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a42      	ldr	r2, [pc, #264]	; (8001500 <HAL_ADC_Start+0x16c>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d002      	beq.n	8001402 <HAL_ADC_Start+0x6e>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	e000      	b.n	8001404 <HAL_ADC_Start+0x70>
 8001402:	4b40      	ldr	r3, [pc, #256]	; (8001504 <HAL_ADC_Start+0x170>)
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	4293      	cmp	r3, r2
 800140a:	d002      	beq.n	8001412 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d105      	bne.n	800141e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001416:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800142a:	d106      	bne.n	800143a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	f023 0206 	bic.w	r2, r3, #6
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	659a      	str	r2, [r3, #88]	; 0x58
 8001438:	e002      	b.n	8001440 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	221c      	movs	r2, #28
 8001446:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a2a      	ldr	r2, [pc, #168]	; (8001500 <HAL_ADC_Start+0x16c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d002      	beq.n	8001460 <HAL_ADC_Start+0xcc>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	e000      	b.n	8001462 <HAL_ADC_Start+0xce>
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_ADC_Start+0x170>)
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	4293      	cmp	r3, r2
 8001468:	d008      	beq.n	800147c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d002      	beq.n	800147c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	2b09      	cmp	r3, #9
 800147a:	d114      	bne.n	80014a6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001492:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff fdc6 	bl	8001030 <LL_ADC_REG_StartConversion>
 80014a4:	e025      	b.n	80014f2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <HAL_ADC_Start+0x16c>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d002      	beq.n	80014c2 <HAL_ADC_Start+0x12e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	e000      	b.n	80014c4 <HAL_ADC_Start+0x130>
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_ADC_Start+0x170>)
 80014c4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00f      	beq.n	80014f2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
 80014e2:	e006      	b.n	80014f2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80014ec:	e001      	b.n	80014f2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014ee:	2302      	movs	r3, #2
 80014f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	50040300 	.word	0x50040300
 8001500:	50040100 	.word	0x50040100
 8001504:	50040000 	.word	0x50040000

08001508 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_ADC_Stop+0x16>
 800151a:	2302      	movs	r3, #2
 800151c:	e023      	b.n	8001566 <HAL_ADC_Stop+0x5e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001526:	2103      	movs	r1, #3
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fd03 	bl	8001f34 <ADC_ConversionStop>
 800152e:	4603      	mov	r3, r0
 8001530:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001532:	7bfb      	ldrb	r3, [r7, #15]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d111      	bne.n	800155c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 fe3d 	bl	80021b8 <ADC_Disable>
 800153e:	4603      	mov	r3, r0
 8001540:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800157a:	4866      	ldr	r0, [pc, #408]	; (8001714 <HAL_ADC_PollForConversion+0x1a4>)
 800157c:	f7ff fca0 	bl	8000ec0 <LL_ADC_GetMultimode>
 8001580:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	2b08      	cmp	r3, #8
 8001588:	d102      	bne.n	8001590 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800158a:	2308      	movs	r3, #8
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e02a      	b.n	80015e6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b05      	cmp	r3, #5
 800159a:	d002      	beq.n	80015a2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2b09      	cmp	r3, #9
 80015a0:	d111      	bne.n	80015c6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d007      	beq.n	80015c0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f043 0220 	orr.w	r2, r3, #32
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0a4      	b.n	800170a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015c0:	2304      	movs	r3, #4
 80015c2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015c4:	e00f      	b.n	80015e6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80015c6:	4853      	ldr	r0, [pc, #332]	; (8001714 <HAL_ADC_PollForConversion+0x1a4>)
 80015c8:	f7ff fc88 	bl	8000edc <LL_ADC_GetMultiDMATransfer>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d6:	f043 0220 	orr.w	r2, r3, #32
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e093      	b.n	800170a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80015e2:	2304      	movs	r3, #4
 80015e4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80015e6:	f7ff fb11 	bl	8000c0c <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015ec:	e021      	b.n	8001632 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d01d      	beq.n	8001632 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80015f6:	f7ff fb09 	bl	8000c0c <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d302      	bcc.n	800160c <HAL_ADC_PollForConversion+0x9c>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d112      	bne.n	8001632 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10b      	bne.n	8001632 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161e:	f043 0204 	orr.w	r2, r3, #4
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e06b      	b.n	800170a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0d6      	beq.n	80015ee <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001644:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fba7 	bl	8000da4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d01c      	beq.n	8001696 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7e5b      	ldrb	r3, [r3, #25]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d118      	bne.n	8001696 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b08      	cmp	r3, #8
 8001670:	d111      	bne.n	8001696 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <HAL_ADC_PollForConversion+0x1a8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d002      	beq.n	80016a6 <HAL_ADC_PollForConversion+0x136>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	e000      	b.n	80016a8 <HAL_ADC_PollForConversion+0x138>
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_ADC_PollForConversion+0x1ac>)
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d008      	beq.n	80016c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d002      	beq.n	80016c2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2b09      	cmp	r3, #9
 80016c0:	d104      	bne.n	80016cc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	e00c      	b.n	80016e6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_ADC_PollForConversion+0x1a8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d002      	beq.n	80016dc <HAL_ADC_PollForConversion+0x16c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	e000      	b.n	80016de <HAL_ADC_PollForConversion+0x16e>
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_ADC_PollForConversion+0x1ac>)
 80016de:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d104      	bne.n	80016f6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2208      	movs	r2, #8
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e008      	b.n	8001708 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d103      	bne.n	8001708 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	220c      	movs	r2, #12
 8001706:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	50040300 	.word	0x50040300
 8001718:	50040100 	.word	0x50040100
 800171c:	50040000 	.word	0x50040000

08001720 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b0b6      	sub	sp, #216	; 0xd8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001756:	2b01      	cmp	r3, #1
 8001758:	d101      	bne.n	800175e <HAL_ADC_ConfigChannel+0x22>
 800175a:	2302      	movs	r3, #2
 800175c:	e3d5      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x7ce>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fc88 	bl	8001080 <LL_ADC_REG_IsConversionOngoing>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	f040 83ba 	bne.w	8001eec <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d824      	bhi.n	80017ca <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	3b02      	subs	r3, #2
 8001786:	2b03      	cmp	r3, #3
 8001788:	d81b      	bhi.n	80017c2 <HAL_ADC_ConfigChannel+0x86>
 800178a:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <HAL_ADC_ConfigChannel+0x54>)
 800178c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001790:	080017a1 	.word	0x080017a1
 8001794:	080017a9 	.word	0x080017a9
 8001798:	080017b1 	.word	0x080017b1
 800179c:	080017b9 	.word	0x080017b9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	220c      	movs	r2, #12
 80017a4:	605a      	str	r2, [r3, #4]
          break;
 80017a6:	e011      	b.n	80017cc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2212      	movs	r2, #18
 80017ac:	605a      	str	r2, [r3, #4]
          break;
 80017ae:	e00d      	b.n	80017cc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2218      	movs	r2, #24
 80017b4:	605a      	str	r2, [r3, #4]
          break;
 80017b6:	e009      	b.n	80017cc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017be:	605a      	str	r2, [r3, #4]
          break;
 80017c0:	e004      	b.n	80017cc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2206      	movs	r2, #6
 80017c6:	605a      	str	r2, [r3, #4]
          break;
 80017c8:	e000      	b.n	80017cc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80017ca:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	f7ff faf6 	bl	8000dca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fc4c 	bl	8001080 <LL_ADC_REG_IsConversionOngoing>
 80017e8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fc6c 	bl	80010ce <LL_ADC_INJ_IsConversionOngoing>
 80017f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 81c1 	bne.w	8001b86 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001804:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001808:	2b00      	cmp	r3, #0
 800180a:	f040 81bc 	bne.w	8001b86 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001816:	d10f      	bne.n	8001838 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff fafd 	bl	8000e22 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff faa4 	bl	8000d7e <LL_ADC_SetSamplingTimeCommonConfig>
 8001836:	e00e      	b.n	8001856 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6819      	ldr	r1, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	461a      	mov	r2, r3
 8001846:	f7ff faec 	bl	8000e22 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fa94 	bl	8000d7e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	08db      	lsrs	r3, r3, #3
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	2b04      	cmp	r3, #4
 8001876:	d00a      	beq.n	800188e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6919      	ldr	r1, [r3, #16]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001888:	f7ff fa24 	bl	8000cd4 <LL_ADC_SetOffset>
 800188c:	e17b      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fa41 	bl	8000d1c <LL_ADC_GetOffsetChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10a      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x17e>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fa36 	bl	8000d1c <LL_ADC_GetOffsetChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	0e9b      	lsrs	r3, r3, #26
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	e01e      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x1bc>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fa2b 	bl	8000d1c <LL_ADC_GetOffsetChannel>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80018e8:	2320      	movs	r3, #32
 80018ea:	e004      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80018ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001900:	2b00      	cmp	r3, #0
 8001902:	d105      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x1d4>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0e9b      	lsrs	r3, r3, #26
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	e018      	b.n	8001942 <HAL_ADC_ConfigChannel+0x206>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001918:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800191c:	fa93 f3a3 	rbit	r3, r3
 8001920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800192c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001934:	2320      	movs	r3, #32
 8001936:	e004      	b.n	8001942 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001938:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001942:	429a      	cmp	r2, r3
 8001944:	d106      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f9fa 	bl	8000d48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f9de 	bl	8000d1c <LL_ADC_GetOffsetChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10a      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x244>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2101      	movs	r1, #1
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f9d3 	bl	8000d1c <LL_ADC_GetOffsetChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	0e9b      	lsrs	r3, r3, #26
 800197a:	f003 021f 	and.w	r2, r3, #31
 800197e:	e01e      	b.n	80019be <HAL_ADC_ConfigChannel+0x282>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f9c8 	bl	8000d1c <LL_ADC_GetOffsetChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800199e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80019a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80019a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80019ae:	2320      	movs	r3, #32
 80019b0:	e004      	b.n	80019bc <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80019b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019b6:	fab3 f383 	clz	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d105      	bne.n	80019d6 <HAL_ADC_ConfigChannel+0x29a>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	0e9b      	lsrs	r3, r3, #26
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	e018      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x2cc>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80019ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80019ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80019f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80019fa:	2320      	movs	r3, #32
 80019fc:	e004      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80019fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a02:	fab3 f383 	clz	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d106      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	2101      	movs	r1, #1
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f997 	bl	8000d48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2102      	movs	r1, #2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff f97b 	bl	8000d1c <LL_ADC_GetOffsetChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10a      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x30a>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2102      	movs	r1, #2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f970 	bl	8000d1c <LL_ADC_GetOffsetChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	0e9b      	lsrs	r3, r3, #26
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	e01e      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x348>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f965 	bl	8000d1c <LL_ADC_GetOffsetChannel>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a5c:	fa93 f3a3 	rbit	r3, r3
 8001a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001a74:	2320      	movs	r3, #32
 8001a76:	e004      	b.n	8001a82 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a7c:	fab3 f383 	clz	r3, r3
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x360>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0e9b      	lsrs	r3, r3, #26
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	e016      	b.n	8001aca <HAL_ADC_ConfigChannel+0x38e>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001abc:	2320      	movs	r3, #32
 8001abe:	e004      	b.n	8001aca <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001ac0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d106      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f936 	bl	8000d48 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2103      	movs	r1, #3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f91a 	bl	8000d1c <LL_ADC_GetOffsetChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10a      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x3cc>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2103      	movs	r1, #3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f90f 	bl	8000d1c <LL_ADC_GetOffsetChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	0e9b      	lsrs	r3, r3, #26
 8001b02:	f003 021f 	and.w	r2, r3, #31
 8001b06:	e017      	b.n	8001b38 <HAL_ADC_ConfigChannel+0x3fc>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f904 	bl	8000d1c <LL_ADC_GetOffsetChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b22:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	e003      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d105      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x414>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	0e9b      	lsrs	r3, r3, #26
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	e011      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x438>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b58:	fa93 f3a3 	rbit	r3, r3
 8001b5c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001b5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b60:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001b68:	2320      	movs	r3, #32
 8001b6a:	e003      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d106      	bne.n	8001b86 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2103      	movs	r1, #3
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff f8e1 	bl	8000d48 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fa2a 	bl	8000fe4 <LL_ADC_IsEnabled>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 8140 	bne.w	8001e18 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f7ff f967 	bl	8000e78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	4a8f      	ldr	r2, [pc, #572]	; (8001dec <HAL_ADC_ConfigChannel+0x6b0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f040 8131 	bne.w	8001e18 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10b      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x4a2>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	0e9b      	lsrs	r3, r3, #26
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	2b09      	cmp	r3, #9
 8001bd4:	bf94      	ite	ls
 8001bd6:	2301      	movls	r3, #1
 8001bd8:	2300      	movhi	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	e019      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x4d6>
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bee:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001bf6:	2320      	movs	r3, #32
 8001bf8:	e003      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3301      	adds	r3, #1
 8001c04:	f003 031f 	and.w	r3, r3, #31
 8001c08:	2b09      	cmp	r3, #9
 8001c0a:	bf94      	ite	ls
 8001c0c:	2301      	movls	r3, #1
 8001c0e:	2300      	movhi	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d079      	beq.n	8001d0a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d107      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x4f6>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	0e9b      	lsrs	r3, r3, #26
 8001c28:	3301      	adds	r3, #1
 8001c2a:	069b      	lsls	r3, r3, #26
 8001c2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c30:	e015      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x522>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c42:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	e003      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	3301      	adds	r3, #1
 8001c58:	069b      	lsls	r3, r3, #26
 8001c5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x542>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	0e9b      	lsrs	r3, r3, #26
 8001c70:	3301      	adds	r3, #1
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	2101      	movs	r1, #1
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	e017      	b.n	8001cae <HAL_ADC_ConfigChannel+0x572>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001c96:	2320      	movs	r3, #32
 8001c98:	e003      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	2101      	movs	r1, #1
 8001caa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cae:	ea42 0103 	orr.w	r1, r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10a      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x598>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	0e9b      	lsrs	r3, r3, #26
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f003 021f 	and.w	r2, r3, #31
 8001cca:	4613      	mov	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4413      	add	r3, r2
 8001cd0:	051b      	lsls	r3, r3, #20
 8001cd2:	e018      	b.n	8001d06 <HAL_ADC_ConfigChannel+0x5ca>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001cec:	2320      	movs	r3, #32
 8001cee:	e003      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f003 021f 	and.w	r2, r3, #31
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d06:	430b      	orrs	r3, r1
 8001d08:	e081      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x5ea>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0e9b      	lsrs	r3, r3, #26
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	069b      	lsls	r3, r3, #26
 8001d20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d24:	e015      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x616>
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2e:	fa93 f3a3 	rbit	r3, r3
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	e003      	b.n	8001d4a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d44:	fab3 f383 	clz	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	069b      	lsls	r3, r3, #26
 8001d4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x636>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	0e9b      	lsrs	r3, r3, #26
 8001d64:	3301      	adds	r3, #1
 8001d66:	f003 031f 	and.w	r3, r3, #31
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d70:	e017      	b.n	8001da2 <HAL_ADC_ConfigChannel+0x666>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	61fb      	str	r3, [r7, #28]
  return result;
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001d8a:	2320      	movs	r3, #32
 8001d8c:	e003      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	fab3 f383 	clz	r3, r3
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	f003 031f 	and.w	r3, r3, #31
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	ea42 0103 	orr.w	r1, r2, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10d      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x692>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0e9b      	lsrs	r3, r3, #26
 8001db8:	3301      	adds	r3, #1
 8001dba:	f003 021f 	and.w	r2, r3, #31
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b1e      	subs	r3, #30
 8001dc6:	051b      	lsls	r3, r3, #20
 8001dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	e01e      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x6d0>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	613b      	str	r3, [r7, #16]
  return result;
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d104      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001de6:	2320      	movs	r3, #32
 8001de8:	e006      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x6bc>
 8001dea:	bf00      	nop
 8001dec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fab3 f383 	clz	r3, r3
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f003 021f 	and.w	r2, r3, #31
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	3b1e      	subs	r3, #30
 8001e06:	051b      	lsls	r3, r3, #20
 8001e08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	6892      	ldr	r2, [r2, #8]
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7ff f805 	bl	8000e22 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d06c      	beq.n	8001efe <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e24:	483c      	ldr	r0, [pc, #240]	; (8001f18 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e26:	f7fe ff47 	bl	8000cb8 <LL_ADC_GetCommonPathInternalCh>
 8001e2a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a3a      	ldr	r2, [pc, #232]	; (8001f1c <HAL_ADC_ConfigChannel+0x7e0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d127      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d121      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a35      	ldr	r2, [pc, #212]	; (8001f20 <HAL_ADC_ConfigChannel+0x7e4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d157      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e56:	4619      	mov	r1, r3
 8001e58:	482f      	ldr	r0, [pc, #188]	; (8001f18 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e5a:	f7fe ff1a 	bl	8000c92 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e5e:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <HAL_ADC_ConfigChannel+0x7e8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	4a30      	ldr	r2, [pc, #192]	; (8001f28 <HAL_ADC_ConfigChannel+0x7ec>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	1c5a      	adds	r2, r3, #1
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e78:	e002      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f9      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e86:	e03a      	b.n	8001efe <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <HAL_ADC_ConfigChannel+0x7f0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d113      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x77e>
 8001e92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10d      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <HAL_ADC_ConfigChannel+0x7e4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d12a      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ea8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4819      	ldr	r0, [pc, #100]	; (8001f18 <HAL_ADC_ConfigChannel+0x7dc>)
 8001eb4:	f7fe feed 	bl	8000c92 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001eb8:	e021      	b.n	8001efe <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_ADC_ConfigChannel+0x7f4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d11c      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ec4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d116      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_ADC_ConfigChannel+0x7e4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d111      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ede:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ee6:	f7fe fed4 	bl	8000c92 <LL_ADC_SetCommonPathInternalCh>
 8001eea:	e008      	b.n	8001efe <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef0:	f043 0220 	orr.w	r2, r3, #32
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f06:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	37d8      	adds	r7, #216	; 0xd8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	80080000 	.word	0x80080000
 8001f18:	50040300 	.word	0x50040300
 8001f1c:	c7520000 	.word	0xc7520000
 8001f20:	50040000 	.word	0x50040000
 8001f24:	20000000 	.word	0x20000000
 8001f28:	053e2d63 	.word	0x053e2d63
 8001f2c:	cb840000 	.word	0xcb840000
 8001f30:	80000001 	.word	0x80000001

08001f34 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f898 	bl	8001080 <LL_ADC_REG_IsConversionOngoing>
 8001f50:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f8b9 	bl	80010ce <LL_ADC_INJ_IsConversionOngoing>
 8001f5c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8098 	beq.w	800209c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d02a      	beq.n	8001fd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7e5b      	ldrb	r3, [r3, #25]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d126      	bne.n	8001fd0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7e1b      	ldrb	r3, [r3, #24]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d122      	bne.n	8001fd0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001f8e:	e014      	b.n	8001fba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	4a45      	ldr	r2, [pc, #276]	; (80020a8 <ADC_ConversionStop+0x174>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d90d      	bls.n	8001fb4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f9c:	f043 0210 	orr.w	r2, r3, #16
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e074      	b.n	800209e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc4:	2b40      	cmp	r3, #64	; 0x40
 8001fc6:	d1e3      	bne.n	8001f90 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2240      	movs	r2, #64	; 0x40
 8001fce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d014      	beq.n	8002000 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff f850 	bl	8001080 <LL_ADC_REG_IsConversionOngoing>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00c      	beq.n	8002000 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f80d 	bl	800100a <LL_ADC_IsDisableOngoing>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d104      	bne.n	8002000 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff f82c 	bl	8001058 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d014      	beq.n	8002030 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff f85f 	bl	80010ce <LL_ADC_INJ_IsConversionOngoing>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d00c      	beq.n	8002030 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fff5 	bl	800100a <LL_ADC_IsDisableOngoing>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d104      	bne.n	8002030 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff f83b 	bl	80010a6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d005      	beq.n	8002042 <ADC_ConversionStop+0x10e>
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d105      	bne.n	8002048 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800203c:	230c      	movs	r3, #12
 800203e:	617b      	str	r3, [r7, #20]
        break;
 8002040:	e005      	b.n	800204e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002042:	2308      	movs	r3, #8
 8002044:	617b      	str	r3, [r7, #20]
        break;
 8002046:	e002      	b.n	800204e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002048:	2304      	movs	r3, #4
 800204a:	617b      	str	r3, [r7, #20]
        break;
 800204c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800204e:	f7fe fddd 	bl	8000c0c <HAL_GetTick>
 8002052:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002054:	e01b      	b.n	800208e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002056:	f7fe fdd9 	bl	8000c0c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b05      	cmp	r3, #5
 8002062:	d914      	bls.n	800208e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00d      	beq.n	800208e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	f043 0210 	orr.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e007      	b.n	800209e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1dc      	bne.n	8002056 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	a33fffff 	.word	0xa33fffff

080020ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe ff91 	bl	8000fe4 <LL_ADC_IsEnabled>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d169      	bne.n	800219c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <ADC_Enable+0xfc>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00d      	beq.n	80020f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	f043 0210 	orr.w	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	f043 0201 	orr.w	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e055      	b.n	800219e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe ff4c 	bl	8000f94 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80020fc:	482b      	ldr	r0, [pc, #172]	; (80021ac <ADC_Enable+0x100>)
 80020fe:	f7fe fddb 	bl	8000cb8 <LL_ADC_GetCommonPathInternalCh>
 8002102:	4603      	mov	r3, r0
 8002104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <ADC_Enable+0x104>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	099b      	lsrs	r3, r3, #6
 8002112:	4a28      	ldr	r2, [pc, #160]	; (80021b4 <ADC_Enable+0x108>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002126:	e002      	b.n	800212e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	3b01      	subs	r3, #1
 800212c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f9      	bne.n	8002128 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002134:	f7fe fd6a 	bl	8000c0c <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800213a:	e028      	b.n	800218e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe ff4f 	bl	8000fe4 <LL_ADC_IsEnabled>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d104      	bne.n	8002156 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe ff1f 	bl	8000f94 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002156:	f7fe fd59 	bl	8000c0c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d914      	bls.n	800218e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d00d      	beq.n	800218e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002176:	f043 0210 	orr.w	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e007      	b.n	800219e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b01      	cmp	r3, #1
 800219a:	d1cf      	bne.n	800213c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	8000003f 	.word	0x8000003f
 80021ac:	50040300 	.word	0x50040300
 80021b0:	20000000 	.word	0x20000000
 80021b4:	053e2d63 	.word	0x053e2d63

080021b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe ff20 	bl	800100a <LL_ADC_IsDisableOngoing>
 80021ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe ff07 	bl	8000fe4 <LL_ADC_IsEnabled>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d047      	beq.n	800226c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d144      	bne.n	800226c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 030d 	and.w	r3, r3, #13
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d10c      	bne.n	800220a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe fee1 	bl	8000fbc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2203      	movs	r2, #3
 8002200:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002202:	f7fe fd03 	bl	8000c0c <HAL_GetTick>
 8002206:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002208:	e029      	b.n	800225e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	f043 0210 	orr.w	r2, r3, #16
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f043 0201 	orr.w	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e023      	b.n	800226e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002226:	f7fe fcf1 	bl	8000c0c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d914      	bls.n	800225e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00d      	beq.n	800225e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	f043 0210 	orr.w	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e007      	b.n	800226e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1dc      	bne.n	8002226 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0a      	blt.n	8002306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	490c      	ldr	r1, [pc, #48]	; (8002328 <__NVIC_SetPriority+0x4c>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	0112      	lsls	r2, r2, #4
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	440b      	add	r3, r1
 8002300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002304:	e00a      	b.n	800231c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4908      	ldr	r1, [pc, #32]	; (800232c <__NVIC_SetPriority+0x50>)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	3b04      	subs	r3, #4
 8002314:	0112      	lsls	r2, r2, #4
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	440b      	add	r3, r1
 800231a:	761a      	strb	r2, [r3, #24]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000e100 	.word	0xe000e100
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f1c3 0307 	rsb	r3, r3, #7
 800234a:	2b04      	cmp	r3, #4
 800234c:	bf28      	it	cs
 800234e:	2304      	movcs	r3, #4
 8002350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	2b06      	cmp	r3, #6
 8002358:	d902      	bls.n	8002360 <NVIC_EncodePriority+0x30>
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3b03      	subs	r3, #3
 800235e:	e000      	b.n	8002362 <NVIC_EncodePriority+0x32>
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	401a      	ands	r2, r3
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002378:	f04f 31ff 	mov.w	r1, #4294967295
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43d9      	mvns	r1, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	4313      	orrs	r3, r2
         );
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a8:	d301      	bcc.n	80023ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00f      	b.n	80023ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <SysTick_Config+0x40>)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023b6:	210f      	movs	r1, #15
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f7ff ff8e 	bl	80022dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <SysTick_Config+0x40>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <SysTick_Config+0x40>)
 80023c8:	2207      	movs	r2, #7
 80023ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	e000e010 	.word	0xe000e010

080023dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ff47 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002404:	f7ff ff5c 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 8002408:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	6978      	ldr	r0, [r7, #20]
 8002410:	f7ff ff8e 	bl	8002330 <NVIC_EncodePriority>
 8002414:	4602      	mov	r2, r0
 8002416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff5d 	bl	80022dc <__NVIC_SetPriority>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffb0 	bl	8002398 <SysTick_Config>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002444:	b480      	push	{r7}
 8002446:	b087      	sub	sp, #28
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002452:	e14e      	b.n	80026f2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2101      	movs	r1, #1
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	4013      	ands	r3, r2
 8002462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8140 	beq.w	80026ec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d005      	beq.n	8002484 <HAL_GPIO_Init+0x40>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d130      	bne.n	80024e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4013      	ands	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68da      	ldr	r2, [r3, #12]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ba:	2201      	movs	r2, #1
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	f003 0201 	and.w	r2, r3, #1
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d017      	beq.n	8002522 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d123      	bne.n	8002576 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	08da      	lsrs	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3208      	adds	r2, #8
 8002536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	220f      	movs	r2, #15
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	08da      	lsrs	r2, r3, #3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3208      	adds	r2, #8
 8002570:	6939      	ldr	r1, [r7, #16]
 8002572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2203      	movs	r2, #3
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0203 	and.w	r2, r3, #3
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 809a 	beq.w	80026ec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b8:	4b55      	ldr	r3, [pc, #340]	; (8002710 <HAL_GPIO_Init+0x2cc>)
 80025ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025bc:	4a54      	ldr	r2, [pc, #336]	; (8002710 <HAL_GPIO_Init+0x2cc>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6613      	str	r3, [r2, #96]	; 0x60
 80025c4:	4b52      	ldr	r3, [pc, #328]	; (8002710 <HAL_GPIO_Init+0x2cc>)
 80025c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80025d0:	4a50      	ldr	r2, [pc, #320]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f003 0303 	and.w	r3, r3, #3
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	220f      	movs	r2, #15
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025fa:	d013      	beq.n	8002624 <HAL_GPIO_Init+0x1e0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a46      	ldr	r2, [pc, #280]	; (8002718 <HAL_GPIO_Init+0x2d4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00d      	beq.n	8002620 <HAL_GPIO_Init+0x1dc>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a45      	ldr	r2, [pc, #276]	; (800271c <HAL_GPIO_Init+0x2d8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <HAL_GPIO_Init+0x1d8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a44      	ldr	r2, [pc, #272]	; (8002720 <HAL_GPIO_Init+0x2dc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_GPIO_Init+0x1d4>
 8002614:	2303      	movs	r3, #3
 8002616:	e006      	b.n	8002626 <HAL_GPIO_Init+0x1e2>
 8002618:	2307      	movs	r3, #7
 800261a:	e004      	b.n	8002626 <HAL_GPIO_Init+0x1e2>
 800261c:	2302      	movs	r3, #2
 800261e:	e002      	b.n	8002626 <HAL_GPIO_Init+0x1e2>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_GPIO_Init+0x1e2>
 8002624:	2300      	movs	r3, #0
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	f002 0203 	and.w	r2, r2, #3
 800262c:	0092      	lsls	r2, r2, #2
 800262e:	4093      	lsls	r3, r2
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002636:	4937      	ldr	r1, [pc, #220]	; (8002714 <HAL_GPIO_Init+0x2d0>)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	3302      	adds	r3, #2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002644:	4b37      	ldr	r3, [pc, #220]	; (8002724 <HAL_GPIO_Init+0x2e0>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002668:	4a2e      	ldr	r2, [pc, #184]	; (8002724 <HAL_GPIO_Init+0x2e0>)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800266e:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_GPIO_Init+0x2e0>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	43db      	mvns	r3, r3
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002692:	4a24      	ldr	r2, [pc, #144]	; (8002724 <HAL_GPIO_Init+0x2e0>)
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002698:	4b22      	ldr	r3, [pc, #136]	; (8002724 <HAL_GPIO_Init+0x2e0>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026bc:	4a19      	ldr	r2, [pc, #100]	; (8002724 <HAL_GPIO_Init+0x2e0>)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80026c2:	4b18      	ldr	r3, [pc, #96]	; (8002724 <HAL_GPIO_Init+0x2e0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026e6:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <HAL_GPIO_Init+0x2e0>)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	3301      	adds	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f47f aea9 	bne.w	8002454 <HAL_GPIO_Init+0x10>
  }
}
 8002702:	bf00      	nop
 8002704:	bf00      	nop
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40021000 	.word	0x40021000
 8002714:	40010000 	.word	0x40010000
 8002718:	48000400 	.word	0x48000400
 800271c:	48000800 	.word	0x48000800
 8002720:	48000c00 	.word	0x48000c00
 8002724:	40010400 	.word	0x40010400

08002728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
 8002734:	4613      	mov	r3, r2
 8002736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002738:	787b      	ldrb	r3, [r7, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800273e:	887a      	ldrh	r2, [r7, #2]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002744:	e002      	b.n	800274c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800275c:	4b05      	ldr	r3, [pc, #20]	; (8002774 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002766:	6013      	str	r3, [r2, #0]
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40007000 	.word	0x40007000

08002778 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <HAL_PWREx_GetVoltageRange+0x18>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002784:	4618      	mov	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40007000 	.word	0x40007000

08002794 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a2:	d130      	bne.n	8002806 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027a4:	4b23      	ldr	r3, [pc, #140]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b0:	d038      	beq.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027ba:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2232      	movs	r2, #50	; 0x32
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	0c9b      	lsrs	r3, r3, #18
 80027d4:	3301      	adds	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027d8:	e002      	b.n	80027e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3b01      	subs	r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ec:	d102      	bne.n	80027f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f2      	bne.n	80027da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002800:	d110      	bne.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e00f      	b.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800280e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002812:	d007      	beq.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800281c:	4a05      	ldr	r2, [pc, #20]	; (8002834 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800281e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002822:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40007000 	.word	0x40007000
 8002838:	20000000 	.word	0x20000000
 800283c:	431bde83 	.word	0x431bde83

08002840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	f000 bc4f 	b.w	80030f2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002854:	4b97      	ldr	r3, [pc, #604]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800285e:	4b95      	ldr	r3, [pc, #596]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80e6 	beq.w	8002a42 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <HAL_RCC_OscConfig+0x4c>
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	2b0c      	cmp	r3, #12
 8002880:	f040 808d 	bne.w	800299e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b01      	cmp	r3, #1
 8002888:	f040 8089 	bne.w	800299e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800288c:	4b89      	ldr	r3, [pc, #548]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d006      	beq.n	80028a6 <HAL_RCC_OscConfig+0x66>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f000 bc26 	b.w	80030f2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028aa:	4b82      	ldr	r3, [pc, #520]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <HAL_RCC_OscConfig+0x80>
 80028b6:	4b7f      	ldr	r3, [pc, #508]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028be:	e005      	b.n	80028cc <HAL_RCC_OscConfig+0x8c>
 80028c0:	4b7c      	ldr	r3, [pc, #496]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d224      	bcs.n	800291a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fdd9 	bl	800348c <RCC_SetFlashLatencyFromMSIRange>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f000 bc06 	b.w	80030f2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028e6:	4b73      	ldr	r3, [pc, #460]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a72      	ldr	r2, [pc, #456]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028ec:	f043 0308 	orr.w	r3, r3, #8
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b70      	ldr	r3, [pc, #448]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	496d      	ldr	r1, [pc, #436]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002904:	4b6b      	ldr	r3, [pc, #428]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	4968      	ldr	r1, [pc, #416]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002914:	4313      	orrs	r3, r2
 8002916:	604b      	str	r3, [r1, #4]
 8002918:	e025      	b.n	8002966 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800291a:	4b66      	ldr	r3, [pc, #408]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a65      	ldr	r2, [pc, #404]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002920:	f043 0308 	orr.w	r3, r3, #8
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	4960      	ldr	r1, [pc, #384]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002938:	4b5e      	ldr	r3, [pc, #376]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	495b      	ldr	r1, [pc, #364]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800294c:	6a3b      	ldr	r3, [r7, #32]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d109      	bne.n	8002966 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fd98 	bl	800348c <RCC_SetFlashLatencyFromMSIRange>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e3c5      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002966:	f000 fccd 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 800296a:	4602      	mov	r2, r0
 800296c:	4b51      	ldr	r3, [pc, #324]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	4950      	ldr	r1, [pc, #320]	; (8002ab8 <HAL_RCC_OscConfig+0x278>)
 8002978:	5ccb      	ldrb	r3, [r1, r3]
 800297a:	f003 031f 	and.w	r3, r3, #31
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	4a4e      	ldr	r2, [pc, #312]	; (8002abc <HAL_RCC_OscConfig+0x27c>)
 8002984:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002986:	4b4e      	ldr	r3, [pc, #312]	; (8002ac0 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe f8ee 	bl	8000b6c <HAL_InitTick>
 8002990:	4603      	mov	r3, r0
 8002992:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d052      	beq.n	8002a40 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800299a:	7dfb      	ldrb	r3, [r7, #23]
 800299c:	e3a9      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d032      	beq.n	8002a0c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029a6:	4b43      	ldr	r3, [pc, #268]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a42      	ldr	r2, [pc, #264]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029b2:	f7fe f92b 	bl	8000c0c <HAL_GetTick>
 80029b6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029ba:	f7fe f927 	bl	8000c0c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e392      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029cc:	4b39      	ldr	r3, [pc, #228]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d8:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a35      	ldr	r2, [pc, #212]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80029de:	f043 0308 	orr.w	r3, r3, #8
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	4b33      	ldr	r3, [pc, #204]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	4930      	ldr	r1, [pc, #192]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f6:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	492b      	ldr	r1, [pc, #172]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
 8002a0a:	e01a      	b.n	8002a42 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a28      	ldr	r2, [pc, #160]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a18:	f7fe f8f8 	bl	8000c0c <HAL_GetTick>
 8002a1c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a20:	f7fe f8f4 	bl	8000c0c <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e35f      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x1e0>
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d073      	beq.n	8002b36 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_OscConfig+0x220>
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	d10e      	bne.n	8002a78 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d10b      	bne.n	8002a78 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d063      	beq.n	8002b34 <HAL_RCC_OscConfig+0x2f4>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d15f      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e33c      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a80:	d106      	bne.n	8002a90 <HAL_RCC_OscConfig+0x250>
 8002a82:	4b0c      	ldr	r3, [pc, #48]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a0b      	ldr	r2, [pc, #44]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e025      	b.n	8002adc <HAL_RCC_OscConfig+0x29c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a98:	d114      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x284>
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a02      	ldr	r2, [pc, #8]	; (8002ab4 <HAL_RCC_OscConfig+0x274>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e013      	b.n	8002adc <HAL_RCC_OscConfig+0x29c>
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08004bb4 	.word	0x08004bb4
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000004 	.word	0x20000004
 8002ac4:	4b8f      	ldr	r3, [pc, #572]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a8e      	ldr	r2, [pc, #568]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b8c      	ldr	r3, [pc, #560]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a8b      	ldr	r2, [pc, #556]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe f892 	bl	8000c0c <HAL_GetTick>
 8002ae8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe f88e 	bl	8000c0c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e2f9      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afe:	4b81      	ldr	r3, [pc, #516]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x2ac>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe f87e 	bl	8000c0c <HAL_GetTick>
 8002b10:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe f87a 	bl	8000c0c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e2e5      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b26:	4b77      	ldr	r3, [pc, #476]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x2d4>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d060      	beq.n	8002c04 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_OscConfig+0x314>
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d119      	bne.n	8002b82 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d116      	bne.n	8002b82 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b54:	4b6b      	ldr	r3, [pc, #428]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_OscConfig+0x32c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e2c2      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b65      	ldr	r3, [pc, #404]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	061b      	lsls	r3, r3, #24
 8002b7a:	4962      	ldr	r1, [pc, #392]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b80:	e040      	b.n	8002c04 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d023      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8a:	4b5e      	ldr	r3, [pc, #376]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a5d      	ldr	r2, [pc, #372]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b96:	f7fe f839 	bl	8000c0c <HAL_GetTick>
 8002b9a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b9e:	f7fe f835 	bl	8000c0c <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e2a0      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb0:	4b54      	ldr	r3, [pc, #336]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0f0      	beq.n	8002b9e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbc:	4b51      	ldr	r3, [pc, #324]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	061b      	lsls	r3, r3, #24
 8002bca:	494e      	ldr	r1, [pc, #312]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]
 8002bd0:	e018      	b.n	8002c04 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd2:	4b4c      	ldr	r3, [pc, #304]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a4b      	ldr	r2, [pc, #300]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bde:	f7fe f815 	bl	8000c0c <HAL_GetTick>
 8002be2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe f811 	bl	8000c0c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e27c      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf8:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8082 	beq.w	8002d16 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d05f      	beq.n	8002cda <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002c1a:	4b3a      	ldr	r3, [pc, #232]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c20:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d037      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e254      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01b      	beq.n	8002c8a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002c52:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c58:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c62:	f7fd ffd3 	bl	8000c0c <HAL_GetTick>
 8002c66:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6a:	f7fd ffcf 	bl	8000c0c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b11      	cmp	r3, #17
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e23a      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c7c:	4b21      	ldr	r3, [pc, #132]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ef      	bne.n	8002c6a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c90:	f023 0210 	bic.w	r2, r3, #16
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	491a      	ldr	r1, [pc, #104]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fd ffac 	bl	8000c0c <HAL_GetTick>
 8002cb4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7fd ffa8 	bl	8000c0c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b11      	cmp	r3, #17
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e213      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ef      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x478>
 8002cd8:	e01d      	b.n	8002d16 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce0:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fd ff8f 	bl	8000c0c <HAL_GetTick>
 8002cee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf2:	f7fd ff8b 	bl	8000c0c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b11      	cmp	r3, #17
 8002cfe:	d903      	bls.n	8002d08 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e1f6      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
 8002d04:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d08:	4ba9      	ldr	r3, [pc, #676]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ed      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80bd 	beq.w	8002e9e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d2a:	4ba1      	ldr	r3, [pc, #644]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10e      	bne.n	8002d54 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b9e      	ldr	r3, [pc, #632]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	4a9d      	ldr	r2, [pc, #628]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6593      	str	r3, [r2, #88]	; 0x58
 8002d42:	4b9b      	ldr	r3, [pc, #620]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d54:	4b97      	ldr	r3, [pc, #604]	; (8002fb4 <HAL_RCC_OscConfig+0x774>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d118      	bne.n	8002d92 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d60:	4b94      	ldr	r3, [pc, #592]	; (8002fb4 <HAL_RCC_OscConfig+0x774>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a93      	ldr	r2, [pc, #588]	; (8002fb4 <HAL_RCC_OscConfig+0x774>)
 8002d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6c:	f7fd ff4e 	bl	8000c0c <HAL_GetTick>
 8002d70:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d74:	f7fd ff4a 	bl	8000c0c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1b5      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d86:	4b8b      	ldr	r3, [pc, #556]	; (8002fb4 <HAL_RCC_OscConfig+0x774>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d02c      	beq.n	8002df8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002d9e:	4b84      	ldr	r3, [pc, #528]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	497f      	ldr	r1, [pc, #508]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002dc4:	4b7a      	ldr	r3, [pc, #488]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	4a79      	ldr	r2, [pc, #484]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dd4:	4b76      	ldr	r3, [pc, #472]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	4a75      	ldr	r2, [pc, #468]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002de4:	e018      	b.n	8002e18 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002de6:	4b72      	ldr	r3, [pc, #456]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	4a70      	ldr	r2, [pc, #448]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002df6:	e00f      	b.n	8002e18 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002df8:	4b6d      	ldr	r3, [pc, #436]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfe:	4a6c      	ldr	r2, [pc, #432]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e08:	4b69      	ldr	r3, [pc, #420]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	4a68      	ldr	r2, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002e10:	f023 0304 	bic.w	r3, r3, #4
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d016      	beq.n	8002e4e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7fd fef4 	bl	8000c0c <HAL_GetTick>
 8002e24:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e26:	e00a      	b.n	8002e3e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7fd fef0 	bl	8000c0c <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e159      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3e:	4b5c      	ldr	r3, [pc, #368]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ed      	beq.n	8002e28 <HAL_RCC_OscConfig+0x5e8>
 8002e4c:	e01d      	b.n	8002e8a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4e:	f7fd fedd 	bl	8000c0c <HAL_GetTick>
 8002e52:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fd fed9 	bl	8000c0c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e142      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e6c:	4b50      	ldr	r3, [pc, #320]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1ed      	bne.n	8002e56 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002e7a:	4b4d      	ldr	r3, [pc, #308]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	4a4b      	ldr	r2, [pc, #300]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d105      	bne.n	8002e9e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e92:	4b47      	ldr	r3, [pc, #284]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	4a46      	ldr	r2, [pc, #280]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d03c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01c      	beq.n	8002eec <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eb8:	4a3d      	ldr	r2, [pc, #244]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec2:	f7fd fea3 	bl	8000c0c <HAL_GetTick>
 8002ec6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eca:	f7fd fe9f 	bl	8000c0c <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e10a      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002edc:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ef      	beq.n	8002eca <HAL_RCC_OscConfig+0x68a>
 8002eea:	e01b      	b.n	8002f24 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eec:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ef2:	4a2f      	ldr	r2, [pc, #188]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fd fe86 	bl	8000c0c <HAL_GetTick>
 8002f00:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f04:	f7fd fe82 	bl	8000c0c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e0ed      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f16:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002f18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1ef      	bne.n	8002f04 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 80e1 	beq.w	80030f0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	f040 80b5 	bne.w	80030a2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	f003 0203 	and.w	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d124      	bne.n	8002f96 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	3b01      	subs	r3, #1
 8002f58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d11b      	bne.n	8002f96 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d113      	bne.n	8002f96 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	085b      	lsrs	r3, r3, #1
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d109      	bne.n	8002f96 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	085b      	lsrs	r3, r3, #1
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d05f      	beq.n	8003056 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	2b0c      	cmp	r3, #12
 8002f9a:	d05a      	beq.n	8003052 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <HAL_RCC_OscConfig+0x770>)
 8002fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fa8:	f7fd fe30 	bl	8000c0c <HAL_GetTick>
 8002fac:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fae:	e00c      	b.n	8002fca <HAL_RCC_OscConfig+0x78a>
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fd fe28 	bl	8000c0c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e093      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fca:	4b4c      	ldr	r3, [pc, #304]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd6:	4b49      	ldr	r3, [pc, #292]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	4b49      	ldr	r3, [pc, #292]	; (8003100 <HAL_RCC_OscConfig+0x8c0>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fe6:	3a01      	subs	r2, #1
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	4311      	orrs	r1, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff0:	0212      	lsls	r2, r2, #8
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ff8:	0852      	lsrs	r2, r2, #1
 8002ffa:	3a01      	subs	r2, #1
 8002ffc:	0552      	lsls	r2, r2, #21
 8002ffe:	4311      	orrs	r1, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003004:	0852      	lsrs	r2, r2, #1
 8003006:	3a01      	subs	r2, #1
 8003008:	0652      	lsls	r2, r2, #25
 800300a:	430a      	orrs	r2, r1
 800300c:	493b      	ldr	r1, [pc, #236]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 800300e:	4313      	orrs	r3, r2
 8003010:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003012:	4b3a      	ldr	r3, [pc, #232]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a39      	ldr	r2, [pc, #228]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8003018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	4a36      	ldr	r2, [pc, #216]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8003024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003028:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800302a:	f7fd fdef 	bl	8000c0c <HAL_GetTick>
 800302e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003032:	f7fd fdeb 	bl	8000c0c <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e056      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003044:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003050:	e04e      	b.n	80030f0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e04d      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003056:	4b29      	ldr	r3, [pc, #164]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d146      	bne.n	80030f0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a25      	ldr	r2, [pc, #148]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8003068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800306e:	4b23      	ldr	r3, [pc, #140]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	4a22      	ldr	r2, [pc, #136]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8003074:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003078:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800307a:	f7fd fdc7 	bl	8000c0c <HAL_GetTick>
 800307e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7fd fdc3 	bl	8000c0c <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e02e      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x842>
 80030a0:	e026      	b.n	80030f0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	d021      	beq.n	80030ec <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a8:	4b14      	ldr	r3, [pc, #80]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a13      	ldr	r2, [pc, #76]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 80030ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fd fdaa 	bl	8000c0c <HAL_GetTick>
 80030b8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fd fda6 	bl	8000c0c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e011      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80030da:	4b08      	ldr	r3, [pc, #32]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	4a07      	ldr	r2, [pc, #28]	; (80030fc <HAL_RCC_OscConfig+0x8bc>)
 80030e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030e4:	f023 0303 	bic.w	r3, r3, #3
 80030e8:	60d3      	str	r3, [r2, #12]
 80030ea:	e001      	b.n	80030f0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3728      	adds	r7, #40	; 0x28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	f99f808c 	.word	0xf99f808c

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0e7      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b75      	ldr	r3, [pc, #468]	; (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d910      	bls.n	8003148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b72      	ldr	r3, [pc, #456]	; (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 0207 	bic.w	r2, r3, #7
 800312e:	4970      	ldr	r1, [pc, #448]	; (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b6e      	ldr	r3, [pc, #440]	; (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0cf      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d010      	beq.n	8003176 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	4b66      	ldr	r3, [pc, #408]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003160:	429a      	cmp	r2, r3
 8003162:	d908      	bls.n	8003176 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b63      	ldr	r3, [pc, #396]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4960      	ldr	r1, [pc, #384]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d04c      	beq.n	800321c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318a:	4b5a      	ldr	r3, [pc, #360]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d121      	bne.n	80031da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0a6      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a2:	4b54      	ldr	r3, [pc, #336]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d115      	bne.n	80031da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e09a      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ba:	4b4e      	ldr	r3, [pc, #312]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e08e      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ca:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e086      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031da:	4b46      	ldr	r3, [pc, #280]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4943      	ldr	r1, [pc, #268]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ec:	f7fd fd0e 	bl	8000c0c <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	e00a      	b.n	800320a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7fd fd0a 	bl	8000c0c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e06e      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	4b3a      	ldr	r3, [pc, #232]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 020c 	and.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	429a      	cmp	r2, r3
 800321a:	d1eb      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d010      	beq.n	800324a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003234:	429a      	cmp	r2, r3
 8003236:	d208      	bcs.n	800324a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	492b      	ldr	r1, [pc, #172]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800324a:	4b29      	ldr	r3, [pc, #164]	; (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d210      	bcs.n	800327a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f023 0207 	bic.w	r2, r3, #7
 8003260:	4923      	ldr	r1, [pc, #140]	; (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	4313      	orrs	r3, r2
 8003266:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003268:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d001      	beq.n	800327a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e036      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003286:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4918      	ldr	r1, [pc, #96]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003294:	4313      	orrs	r3, r2
 8003296:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d009      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a4:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4910      	ldr	r1, [pc, #64]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032b8:	f000 f824 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	490b      	ldr	r1, [pc, #44]	; (80032f8 <HAL_RCC_ClockConfig+0x1f4>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
 80032d4:	4a09      	ldr	r2, [pc, #36]	; (80032fc <HAL_RCC_ClockConfig+0x1f8>)
 80032d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1fc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fd fc45 	bl	8000b6c <HAL_InitTick>
 80032e2:	4603      	mov	r3, r0
 80032e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80032e6:	7afb      	ldrb	r3, [r7, #11]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08004bb4 	.word	0x08004bb4
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003312:	4b3e      	ldr	r3, [pc, #248]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800331c:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x34>
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d121      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d11e      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003338:	4b34      	ldr	r3, [pc, #208]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d107      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003344:	4b31      	ldr	r3, [pc, #196]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 8003346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	e005      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003354:	4b2d      	ldr	r3, [pc, #180]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003360:	4a2b      	ldr	r2, [pc, #172]	; (8003410 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003368:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10d      	bne.n	800338c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003374:	e00a      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b04      	cmp	r3, #4
 800337a:	d102      	bne.n	8003382 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_RCC_GetSysClockFreq+0x110>)
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	e004      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d101      	bne.n	800338c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003388:	4b23      	ldr	r3, [pc, #140]	; (8003418 <HAL_RCC_GetSysClockFreq+0x114>)
 800338a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d134      	bne.n	80033fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003392:	4b1e      	ldr	r3, [pc, #120]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d003      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0xa6>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d003      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0xac>
 80033a8:	e005      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033aa:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <HAL_RCC_GetSysClockFreq+0x110>)
 80033ac:	617b      	str	r3, [r7, #20]
      break;
 80033ae:	e005      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_GetSysClockFreq+0x114>)
 80033b2:	617b      	str	r3, [r7, #20]
      break;
 80033b4:	e002      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	617b      	str	r3, [r7, #20]
      break;
 80033ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033bc:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	3301      	adds	r3, #1
 80033c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	fb03 f202 	mul.w	r2, r3, r2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	0e5b      	lsrs	r3, r3, #25
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	3301      	adds	r3, #1
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033fc:	69bb      	ldr	r3, [r7, #24]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3724      	adds	r7, #36	; 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	08004bcc 	.word	0x08004bcc
 8003414:	00f42400 	.word	0x00f42400
 8003418:	007a1200 	.word	0x007a1200

0800341c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003420:	4b03      	ldr	r3, [pc, #12]	; (8003430 <HAL_RCC_GetHCLKFreq+0x14>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000000 	.word	0x20000000

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003438:	f7ff fff0 	bl	800341c <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4904      	ldr	r1, [pc, #16]	; (800345c <HAL_RCC_GetPCLK1Freq+0x28>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000
 800345c:	08004bc4 	.word	0x08004bc4

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003464:	f7ff ffda 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0adb      	lsrs	r3, r3, #11
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4904      	ldr	r1, [pc, #16]	; (8003488 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021000 	.word	0x40021000
 8003488:	08004bc4 	.word	0x08004bc4

0800348c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003498:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80034a4:	f7ff f968 	bl	8002778 <HAL_PWREx_GetVoltageRange>
 80034a8:	6178      	str	r0, [r7, #20]
 80034aa:	e014      	b.n	80034d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	4a24      	ldr	r2, [pc, #144]	; (8003544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b6:	6593      	str	r3, [r2, #88]	; 0x58
 80034b8:	4b22      	ldr	r3, [pc, #136]	; (8003544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034c4:	f7ff f958 	bl	8002778 <HAL_PWREx_GetVoltageRange>
 80034c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034dc:	d10b      	bne.n	80034f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d919      	bls.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2ba0      	cmp	r3, #160	; 0xa0
 80034e8:	d902      	bls.n	80034f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034ea:	2302      	movs	r3, #2
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	e013      	b.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034f0:	2301      	movs	r3, #1
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e010      	b.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d902      	bls.n	8003502 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034fc:	2303      	movs	r3, #3
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	e00a      	b.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b80      	cmp	r3, #128	; 0x80
 8003506:	d102      	bne.n	800350e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003508:	2302      	movs	r3, #2
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	e004      	b.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b70      	cmp	r3, #112	; 0x70
 8003512:	d101      	bne.n	8003518 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003514:	2301      	movs	r3, #1
 8003516:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 0207 	bic.w	r2, r3, #7
 8003520:	4909      	ldr	r1, [pc, #36]	; (8003548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	429a      	cmp	r2, r3
 8003534:	d001      	beq.n	800353a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000
 8003548:	40022000 	.word	0x40022000

0800354c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003554:	2300      	movs	r3, #0
 8003556:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003558:	2300      	movs	r3, #0
 800355a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 809e 	beq.w	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356a:	2300      	movs	r3, #0
 800356c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800356e:	4b46      	ldr	r3, [pc, #280]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800357e:	2300      	movs	r3, #0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00d      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003584:	4b40      	ldr	r3, [pc, #256]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	4a3f      	ldr	r2, [pc, #252]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800358a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358e:	6593      	str	r3, [r2, #88]	; 0x58
 8003590:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359c:	2301      	movs	r3, #1
 800359e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035a0:	4b3a      	ldr	r3, [pc, #232]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a39      	ldr	r2, [pc, #228]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035ac:	f7fd fb2e 	bl	8000c0c <HAL_GetTick>
 80035b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035b2:	e009      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b4:	f7fd fb2a 	bl	8000c0c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d902      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	74fb      	strb	r3, [r7, #19]
        break;
 80035c6:	e005      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035c8:	4b30      	ldr	r3, [pc, #192]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ef      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d15a      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035da:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01e      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d019      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003600:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	4a1f      	ldr	r2, [pc, #124]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800360a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800360e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003612:	4b1d      	ldr	r3, [pc, #116]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003618:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800361e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003622:	4a19      	ldr	r2, [pc, #100]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d016      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd faea 	bl	8000c0c <HAL_GetTick>
 8003638:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363a:	e00b      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fd fae6 	bl	8000c0c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d902      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	74fb      	strb	r3, [r7, #19]
            break;
 8003652:	e006      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ec      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4904      	ldr	r1, [pc, #16]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800367e:	e009      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
 8003684:	e006      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003694:	7c7b      	ldrb	r3, [r7, #17]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4b6e      	ldr	r3, [pc, #440]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800369c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369e:	4a6d      	ldr	r2, [pc, #436]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036b2:	4b68      	ldr	r3, [pc, #416]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f023 0203 	bic.w	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4964      	ldr	r1, [pc, #400]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036d4:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036da:	f023 020c 	bic.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	495c      	ldr	r1, [pc, #368]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036f6:	4b57      	ldr	r3, [pc, #348]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4953      	ldr	r1, [pc, #332]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00a      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003718:	4b4e      	ldr	r3, [pc, #312]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	494b      	ldr	r1, [pc, #300]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800373a:	4b46      	ldr	r3, [pc, #280]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003740:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	4942      	ldr	r1, [pc, #264]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800375c:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003762:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	493a      	ldr	r1, [pc, #232]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800376c:	4313      	orrs	r3, r2
 800376e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800377e:	4b35      	ldr	r3, [pc, #212]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	4931      	ldr	r1, [pc, #196]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00a      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037a0:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	4929      	ldr	r1, [pc, #164]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00a      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	4920      	ldr	r1, [pc, #128]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d015      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037e4:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	4918      	ldr	r1, [pc, #96]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003802:	d105      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003804:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	4a12      	ldr	r2, [pc, #72]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800380a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800380e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d015      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800381c:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	490a      	ldr	r1, [pc, #40]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800383a:	d105      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	4a04      	ldr	r2, [pc, #16]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003846:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003848:	7cbb      	ldrb	r3, [r7, #18]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000

08003858 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a04      	ldr	r2, [pc, #16]	; (8003874 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003862:	f043 0304 	orr.w	r3, r3, #4
 8003866:	6013      	str	r3, [r2, #0]
}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000

08003878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e040      	b.n	800390c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd f848 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2224      	movs	r2, #36	; 0x24
 80038a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0201 	bic.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f8c0 	bl	8003a3c <UART_SetConfig>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e022      	b.n	800390c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fb0e 	bl	8003ef0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fb95 	bl	8004034 <UART_CheckIdleState>
 800390a:	4603      	mov	r3, r0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af02      	add	r7, sp, #8
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003928:	2b20      	cmp	r3, #32
 800392a:	f040 8082 	bne.w	8003a32 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_UART_Transmit+0x26>
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e07a      	b.n	8003a34 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_UART_Transmit+0x38>
 8003948:	2302      	movs	r3, #2
 800394a:	e073      	b.n	8003a34 <HAL_UART_Transmit+0x120>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2221      	movs	r2, #33	; 0x21
 8003960:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003962:	f7fd f953 	bl	8000c0c <HAL_GetTick>
 8003966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	88fa      	ldrh	r2, [r7, #6]
 800396c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	88fa      	ldrh	r2, [r7, #6]
 8003974:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003980:	d108      	bne.n	8003994 <HAL_UART_Transmit+0x80>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	e003      	b.n	800399c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80039a4:	e02d      	b.n	8003a02 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2200      	movs	r2, #0
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fb88 	bl	80040c6 <UART_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e039      	b.n	8003a34 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	881a      	ldrh	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d2:	b292      	uxth	r2, r2
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	3302      	adds	r3, #2
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	e008      	b.n	80039f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	b292      	uxth	r2, r2
 80039e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3301      	adds	r3, #1
 80039ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1cb      	bne.n	80039a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2200      	movs	r2, #0
 8003a16:	2140      	movs	r1, #64	; 0x40
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fb54 	bl	80040c6 <UART_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e005      	b.n	8003a34 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3720      	adds	r7, #32
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a40:	b08a      	sub	sp, #40	; 0x28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b9e      	ldr	r3, [pc, #632]	; (8003ce4 <UART_SetConfig+0x2a8>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	6812      	ldr	r2, [r2, #0]
 8003a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a93      	ldr	r2, [pc, #588]	; (8003ce8 <UART_SetConfig+0x2ac>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a8a      	ldr	r2, [pc, #552]	; (8003cec <UART_SetConfig+0x2b0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d126      	bne.n	8003b14 <UART_SetConfig+0xd8>
 8003ac6:	4b8a      	ldr	r3, [pc, #552]	; (8003cf0 <UART_SetConfig+0x2b4>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f003 0303 	and.w	r3, r3, #3
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d81b      	bhi.n	8003b0c <UART_SetConfig+0xd0>
 8003ad4:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <UART_SetConfig+0xa0>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003aed 	.word	0x08003aed
 8003ae0:	08003afd 	.word	0x08003afd
 8003ae4:	08003af5 	.word	0x08003af5
 8003ae8:	08003b05 	.word	0x08003b05
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af2:	e0ab      	b.n	8003c4c <UART_SetConfig+0x210>
 8003af4:	2302      	movs	r3, #2
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afa:	e0a7      	b.n	8003c4c <UART_SetConfig+0x210>
 8003afc:	2304      	movs	r3, #4
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b02:	e0a3      	b.n	8003c4c <UART_SetConfig+0x210>
 8003b04:	2308      	movs	r3, #8
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0a:	e09f      	b.n	8003c4c <UART_SetConfig+0x210>
 8003b0c:	2310      	movs	r3, #16
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b12:	e09b      	b.n	8003c4c <UART_SetConfig+0x210>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a76      	ldr	r2, [pc, #472]	; (8003cf4 <UART_SetConfig+0x2b8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d138      	bne.n	8003b90 <UART_SetConfig+0x154>
 8003b1e:	4b74      	ldr	r3, [pc, #464]	; (8003cf0 <UART_SetConfig+0x2b4>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	f003 030c 	and.w	r3, r3, #12
 8003b28:	2b0c      	cmp	r3, #12
 8003b2a:	d82d      	bhi.n	8003b88 <UART_SetConfig+0x14c>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <UART_SetConfig+0xf8>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b69 	.word	0x08003b69
 8003b38:	08003b89 	.word	0x08003b89
 8003b3c:	08003b89 	.word	0x08003b89
 8003b40:	08003b89 	.word	0x08003b89
 8003b44:	08003b79 	.word	0x08003b79
 8003b48:	08003b89 	.word	0x08003b89
 8003b4c:	08003b89 	.word	0x08003b89
 8003b50:	08003b89 	.word	0x08003b89
 8003b54:	08003b71 	.word	0x08003b71
 8003b58:	08003b89 	.word	0x08003b89
 8003b5c:	08003b89 	.word	0x08003b89
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b81 	.word	0x08003b81
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6e:	e06d      	b.n	8003c4c <UART_SetConfig+0x210>
 8003b70:	2302      	movs	r3, #2
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b76:	e069      	b.n	8003c4c <UART_SetConfig+0x210>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7e:	e065      	b.n	8003c4c <UART_SetConfig+0x210>
 8003b80:	2308      	movs	r3, #8
 8003b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b86:	e061      	b.n	8003c4c <UART_SetConfig+0x210>
 8003b88:	2310      	movs	r3, #16
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8e:	e05d      	b.n	8003c4c <UART_SetConfig+0x210>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a58      	ldr	r2, [pc, #352]	; (8003cf8 <UART_SetConfig+0x2bc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d125      	bne.n	8003be6 <UART_SetConfig+0x1aa>
 8003b9a:	4b55      	ldr	r3, [pc, #340]	; (8003cf0 <UART_SetConfig+0x2b4>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ba4:	2b30      	cmp	r3, #48	; 0x30
 8003ba6:	d016      	beq.n	8003bd6 <UART_SetConfig+0x19a>
 8003ba8:	2b30      	cmp	r3, #48	; 0x30
 8003baa:	d818      	bhi.n	8003bde <UART_SetConfig+0x1a2>
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d00a      	beq.n	8003bc6 <UART_SetConfig+0x18a>
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d814      	bhi.n	8003bde <UART_SetConfig+0x1a2>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <UART_SetConfig+0x182>
 8003bb8:	2b10      	cmp	r3, #16
 8003bba:	d008      	beq.n	8003bce <UART_SetConfig+0x192>
 8003bbc:	e00f      	b.n	8003bde <UART_SetConfig+0x1a2>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc4:	e042      	b.n	8003c4c <UART_SetConfig+0x210>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bcc:	e03e      	b.n	8003c4c <UART_SetConfig+0x210>
 8003bce:	2304      	movs	r3, #4
 8003bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bd4:	e03a      	b.n	8003c4c <UART_SetConfig+0x210>
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bdc:	e036      	b.n	8003c4c <UART_SetConfig+0x210>
 8003bde:	2310      	movs	r3, #16
 8003be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be4:	e032      	b.n	8003c4c <UART_SetConfig+0x210>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a3f      	ldr	r2, [pc, #252]	; (8003ce8 <UART_SetConfig+0x2ac>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d12a      	bne.n	8003c46 <UART_SetConfig+0x20a>
 8003bf0:	4b3f      	ldr	r3, [pc, #252]	; (8003cf0 <UART_SetConfig+0x2b4>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bfe:	d01a      	beq.n	8003c36 <UART_SetConfig+0x1fa>
 8003c00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c04:	d81b      	bhi.n	8003c3e <UART_SetConfig+0x202>
 8003c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c0a:	d00c      	beq.n	8003c26 <UART_SetConfig+0x1ea>
 8003c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c10:	d815      	bhi.n	8003c3e <UART_SetConfig+0x202>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <UART_SetConfig+0x1e2>
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1a:	d008      	beq.n	8003c2e <UART_SetConfig+0x1f2>
 8003c1c:	e00f      	b.n	8003c3e <UART_SetConfig+0x202>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c24:	e012      	b.n	8003c4c <UART_SetConfig+0x210>
 8003c26:	2302      	movs	r3, #2
 8003c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2c:	e00e      	b.n	8003c4c <UART_SetConfig+0x210>
 8003c2e:	2304      	movs	r3, #4
 8003c30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c34:	e00a      	b.n	8003c4c <UART_SetConfig+0x210>
 8003c36:	2308      	movs	r3, #8
 8003c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3c:	e006      	b.n	8003c4c <UART_SetConfig+0x210>
 8003c3e:	2310      	movs	r3, #16
 8003c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c44:	e002      	b.n	8003c4c <UART_SetConfig+0x210>
 8003c46:	2310      	movs	r3, #16
 8003c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a25      	ldr	r2, [pc, #148]	; (8003ce8 <UART_SetConfig+0x2ac>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	f040 808a 	bne.w	8003d6c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d824      	bhi.n	8003caa <UART_SetConfig+0x26e>
 8003c60:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <UART_SetConfig+0x22c>)
 8003c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c66:	bf00      	nop
 8003c68:	08003c8d 	.word	0x08003c8d
 8003c6c:	08003cab 	.word	0x08003cab
 8003c70:	08003c95 	.word	0x08003c95
 8003c74:	08003cab 	.word	0x08003cab
 8003c78:	08003c9b 	.word	0x08003c9b
 8003c7c:	08003cab 	.word	0x08003cab
 8003c80:	08003cab 	.word	0x08003cab
 8003c84:	08003cab 	.word	0x08003cab
 8003c88:	08003ca3 	.word	0x08003ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c8c:	f7ff fbd2 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8003c90:	61f8      	str	r0, [r7, #28]
        break;
 8003c92:	e010      	b.n	8003cb6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <UART_SetConfig+0x2c0>)
 8003c96:	61fb      	str	r3, [r7, #28]
        break;
 8003c98:	e00d      	b.n	8003cb6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9a:	f7ff fb33 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8003c9e:	61f8      	str	r0, [r7, #28]
        break;
 8003ca0:	e009      	b.n	8003cb6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ca6:	61fb      	str	r3, [r7, #28]
        break;
 8003ca8:	e005      	b.n	8003cb6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8109 	beq.w	8003ed0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	4413      	add	r3, r2
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d305      	bcc.n	8003cda <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d912      	bls.n	8003d00 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ce0:	e0f6      	b.n	8003ed0 <UART_SetConfig+0x494>
 8003ce2:	bf00      	nop
 8003ce4:	efff69f3 	.word	0xefff69f3
 8003ce8:	40008000 	.word	0x40008000
 8003cec:	40013800 	.word	0x40013800
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40004400 	.word	0x40004400
 8003cf8:	40004800 	.word	0x40004800
 8003cfc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	2200      	movs	r2, #0
 8003d04:	461c      	mov	r4, r3
 8003d06:	4615      	mov	r5, r2
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	022b      	lsls	r3, r5, #8
 8003d12:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d16:	0222      	lsls	r2, r4, #8
 8003d18:	68f9      	ldr	r1, [r7, #12]
 8003d1a:	6849      	ldr	r1, [r1, #4]
 8003d1c:	0849      	lsrs	r1, r1, #1
 8003d1e:	2000      	movs	r0, #0
 8003d20:	4688      	mov	r8, r1
 8003d22:	4681      	mov	r9, r0
 8003d24:	eb12 0a08 	adds.w	sl, r2, r8
 8003d28:	eb43 0b09 	adc.w	fp, r3, r9
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d3a:	4650      	mov	r0, sl
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	f7fc fa9f 	bl	8000280 <__aeabi_uldivmod>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4613      	mov	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d50:	d308      	bcc.n	8003d64 <UART_SetConfig+0x328>
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d58:	d204      	bcs.n	8003d64 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	60da      	str	r2, [r3, #12]
 8003d62:	e0b5      	b.n	8003ed0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d6a:	e0b1      	b.n	8003ed0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d74:	d15d      	bne.n	8003e32 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003d76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d827      	bhi.n	8003dce <UART_SetConfig+0x392>
 8003d7e:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <UART_SetConfig+0x348>)
 8003d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d84:	08003da9 	.word	0x08003da9
 8003d88:	08003db1 	.word	0x08003db1
 8003d8c:	08003db9 	.word	0x08003db9
 8003d90:	08003dcf 	.word	0x08003dcf
 8003d94:	08003dbf 	.word	0x08003dbf
 8003d98:	08003dcf 	.word	0x08003dcf
 8003d9c:	08003dcf 	.word	0x08003dcf
 8003da0:	08003dcf 	.word	0x08003dcf
 8003da4:	08003dc7 	.word	0x08003dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da8:	f7ff fb44 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8003dac:	61f8      	str	r0, [r7, #28]
        break;
 8003dae:	e014      	b.n	8003dda <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003db0:	f7ff fb56 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8003db4:	61f8      	str	r0, [r7, #28]
        break;
 8003db6:	e010      	b.n	8003dda <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003db8:	4b4c      	ldr	r3, [pc, #304]	; (8003eec <UART_SetConfig+0x4b0>)
 8003dba:	61fb      	str	r3, [r7, #28]
        break;
 8003dbc:	e00d      	b.n	8003dda <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dbe:	f7ff faa1 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8003dc2:	61f8      	str	r0, [r7, #28]
        break;
 8003dc4:	e009      	b.n	8003dda <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dca:	61fb      	str	r3, [r7, #28]
        break;
 8003dcc:	e005      	b.n	8003dda <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003dd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d077      	beq.n	8003ed0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005a      	lsls	r2, r3, #1
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	085b      	lsrs	r3, r3, #1
 8003dea:	441a      	add	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2b0f      	cmp	r3, #15
 8003dfa:	d916      	bls.n	8003e2a <UART_SetConfig+0x3ee>
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e02:	d212      	bcs.n	8003e2a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f023 030f 	bic.w	r3, r3, #15
 8003e0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	085b      	lsrs	r3, r3, #1
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	8afb      	ldrh	r3, [r7, #22]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	8afa      	ldrh	r2, [r7, #22]
 8003e26:	60da      	str	r2, [r3, #12]
 8003e28:	e052      	b.n	8003ed0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e30:	e04e      	b.n	8003ed0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d827      	bhi.n	8003e8a <UART_SetConfig+0x44e>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <UART_SetConfig+0x404>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e65 	.word	0x08003e65
 8003e44:	08003e6d 	.word	0x08003e6d
 8003e48:	08003e75 	.word	0x08003e75
 8003e4c:	08003e8b 	.word	0x08003e8b
 8003e50:	08003e7b 	.word	0x08003e7b
 8003e54:	08003e8b 	.word	0x08003e8b
 8003e58:	08003e8b 	.word	0x08003e8b
 8003e5c:	08003e8b 	.word	0x08003e8b
 8003e60:	08003e83 	.word	0x08003e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e64:	f7ff fae6 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8003e68:	61f8      	str	r0, [r7, #28]
        break;
 8003e6a:	e014      	b.n	8003e96 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e6c:	f7ff faf8 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8003e70:	61f8      	str	r0, [r7, #28]
        break;
 8003e72:	e010      	b.n	8003e96 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e74:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <UART_SetConfig+0x4b0>)
 8003e76:	61fb      	str	r3, [r7, #28]
        break;
 8003e78:	e00d      	b.n	8003e96 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7a:	f7ff fa43 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8003e7e:	61f8      	str	r0, [r7, #28]
        break;
 8003e80:	e009      	b.n	8003e96 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e86:	61fb      	str	r3, [r7, #28]
        break;
 8003e88:	e005      	b.n	8003e96 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e94:	bf00      	nop
    }

    if (pclk != 0U)
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d019      	beq.n	8003ed0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	085a      	lsrs	r2, r3, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	441a      	add	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2b0f      	cmp	r3, #15
 8003eb4:	d909      	bls.n	8003eca <UART_SetConfig+0x48e>
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d205      	bcs.n	8003eca <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60da      	str	r2, [r3, #12]
 8003ec8:	e002      	b.n	8003ed0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003edc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3728      	adds	r7, #40	; 0x28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eea:	bf00      	nop
 8003eec:	00f42400 	.word	0x00f42400

08003ef0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01a      	beq.n	8004006 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fee:	d10a      	bne.n	8004006 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af02      	add	r7, sp, #8
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004044:	f7fc fde2 	bl	8000c0c <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b08      	cmp	r3, #8
 8004056:	d10e      	bne.n	8004076 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004058:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f82d 	bl	80040c6 <UART_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e023      	b.n	80040be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b04      	cmp	r3, #4
 8004082:	d10e      	bne.n	80040a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f817 	bl	80040c6 <UART_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e00d      	b.n	80040be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b09c      	sub	sp, #112	; 0x70
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	4613      	mov	r3, r2
 80040d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d6:	e0a5      	b.n	8004224 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	f000 80a1 	beq.w	8004224 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7fc fd93 	bl	8000c0c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80040f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d13e      	bne.n	8004176 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004108:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800410c:	667b      	str	r3, [r7, #100]	; 0x64
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004116:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004118:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800411c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e6      	bne.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3308      	adds	r3, #8
 8004130:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	663b      	str	r3, [r7, #96]	; 0x60
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3308      	adds	r3, #8
 8004148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800414a:	64ba      	str	r2, [r7, #72]	; 0x48
 800414c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e5      	bne.n	800412a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e067      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d04f      	beq.n	8004224 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004192:	d147      	bne.n	8004224 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800419c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	e853 3f00 	ldrex	r3, [r3]
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	461a      	mov	r2, r3
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041bc:	637b      	str	r3, [r7, #52]	; 0x34
 80041be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e6      	bne.n	800419e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3308      	adds	r3, #8
 80041d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	613b      	str	r3, [r7, #16]
   return(result);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f023 0301 	bic.w	r3, r3, #1
 80041e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041f0:	623a      	str	r2, [r7, #32]
 80041f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	69f9      	ldr	r1, [r7, #28]
 80041f6:	6a3a      	ldr	r2, [r7, #32]
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e5      	bne.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2220      	movs	r2, #32
 800420e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e010      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	4013      	ands	r3, r2
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	429a      	cmp	r2, r3
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	429a      	cmp	r2, r3
 8004240:	f43f af4a 	beq.w	80040d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3770      	adds	r7, #112	; 0x70
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <__errno>:
 8004250:	4b01      	ldr	r3, [pc, #4]	; (8004258 <__errno+0x8>)
 8004252:	6818      	ldr	r0, [r3, #0]
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	2000000c 	.word	0x2000000c

0800425c <__libc_init_array>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	4d0d      	ldr	r5, [pc, #52]	; (8004294 <__libc_init_array+0x38>)
 8004260:	4c0d      	ldr	r4, [pc, #52]	; (8004298 <__libc_init_array+0x3c>)
 8004262:	1b64      	subs	r4, r4, r5
 8004264:	10a4      	asrs	r4, r4, #2
 8004266:	2600      	movs	r6, #0
 8004268:	42a6      	cmp	r6, r4
 800426a:	d109      	bne.n	8004280 <__libc_init_array+0x24>
 800426c:	4d0b      	ldr	r5, [pc, #44]	; (800429c <__libc_init_array+0x40>)
 800426e:	4c0c      	ldr	r4, [pc, #48]	; (80042a0 <__libc_init_array+0x44>)
 8004270:	f000 fc8e 	bl	8004b90 <_init>
 8004274:	1b64      	subs	r4, r4, r5
 8004276:	10a4      	asrs	r4, r4, #2
 8004278:	2600      	movs	r6, #0
 800427a:	42a6      	cmp	r6, r4
 800427c:	d105      	bne.n	800428a <__libc_init_array+0x2e>
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	f855 3b04 	ldr.w	r3, [r5], #4
 8004284:	4798      	blx	r3
 8004286:	3601      	adds	r6, #1
 8004288:	e7ee      	b.n	8004268 <__libc_init_array+0xc>
 800428a:	f855 3b04 	ldr.w	r3, [r5], #4
 800428e:	4798      	blx	r3
 8004290:	3601      	adds	r6, #1
 8004292:	e7f2      	b.n	800427a <__libc_init_array+0x1e>
 8004294:	08004c38 	.word	0x08004c38
 8004298:	08004c38 	.word	0x08004c38
 800429c:	08004c38 	.word	0x08004c38
 80042a0:	08004c3c 	.word	0x08004c3c

080042a4 <memset>:
 80042a4:	4402      	add	r2, r0
 80042a6:	4603      	mov	r3, r0
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d100      	bne.n	80042ae <memset+0xa>
 80042ac:	4770      	bx	lr
 80042ae:	f803 1b01 	strb.w	r1, [r3], #1
 80042b2:	e7f9      	b.n	80042a8 <memset+0x4>

080042b4 <siprintf>:
 80042b4:	b40e      	push	{r1, r2, r3}
 80042b6:	b500      	push	{lr}
 80042b8:	b09c      	sub	sp, #112	; 0x70
 80042ba:	ab1d      	add	r3, sp, #116	; 0x74
 80042bc:	9002      	str	r0, [sp, #8]
 80042be:	9006      	str	r0, [sp, #24]
 80042c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042c4:	4809      	ldr	r0, [pc, #36]	; (80042ec <siprintf+0x38>)
 80042c6:	9107      	str	r1, [sp, #28]
 80042c8:	9104      	str	r1, [sp, #16]
 80042ca:	4909      	ldr	r1, [pc, #36]	; (80042f0 <siprintf+0x3c>)
 80042cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80042d0:	9105      	str	r1, [sp, #20]
 80042d2:	6800      	ldr	r0, [r0, #0]
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	a902      	add	r1, sp, #8
 80042d8:	f000 f868 	bl	80043ac <_svfiprintf_r>
 80042dc:	9b02      	ldr	r3, [sp, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	b01c      	add	sp, #112	; 0x70
 80042e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042e8:	b003      	add	sp, #12
 80042ea:	4770      	bx	lr
 80042ec:	2000000c 	.word	0x2000000c
 80042f0:	ffff0208 	.word	0xffff0208

080042f4 <__ssputs_r>:
 80042f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f8:	688e      	ldr	r6, [r1, #8]
 80042fa:	429e      	cmp	r6, r3
 80042fc:	4682      	mov	sl, r0
 80042fe:	460c      	mov	r4, r1
 8004300:	4690      	mov	r8, r2
 8004302:	461f      	mov	r7, r3
 8004304:	d838      	bhi.n	8004378 <__ssputs_r+0x84>
 8004306:	898a      	ldrh	r2, [r1, #12]
 8004308:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800430c:	d032      	beq.n	8004374 <__ssputs_r+0x80>
 800430e:	6825      	ldr	r5, [r4, #0]
 8004310:	6909      	ldr	r1, [r1, #16]
 8004312:	eba5 0901 	sub.w	r9, r5, r1
 8004316:	6965      	ldr	r5, [r4, #20]
 8004318:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800431c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004320:	3301      	adds	r3, #1
 8004322:	444b      	add	r3, r9
 8004324:	106d      	asrs	r5, r5, #1
 8004326:	429d      	cmp	r5, r3
 8004328:	bf38      	it	cc
 800432a:	461d      	movcc	r5, r3
 800432c:	0553      	lsls	r3, r2, #21
 800432e:	d531      	bpl.n	8004394 <__ssputs_r+0xa0>
 8004330:	4629      	mov	r1, r5
 8004332:	f000 fb63 	bl	80049fc <_malloc_r>
 8004336:	4606      	mov	r6, r0
 8004338:	b950      	cbnz	r0, 8004350 <__ssputs_r+0x5c>
 800433a:	230c      	movs	r3, #12
 800433c:	f8ca 3000 	str.w	r3, [sl]
 8004340:	89a3      	ldrh	r3, [r4, #12]
 8004342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004346:	81a3      	strh	r3, [r4, #12]
 8004348:	f04f 30ff 	mov.w	r0, #4294967295
 800434c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004350:	6921      	ldr	r1, [r4, #16]
 8004352:	464a      	mov	r2, r9
 8004354:	f000 fabe 	bl	80048d4 <memcpy>
 8004358:	89a3      	ldrh	r3, [r4, #12]
 800435a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800435e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004362:	81a3      	strh	r3, [r4, #12]
 8004364:	6126      	str	r6, [r4, #16]
 8004366:	6165      	str	r5, [r4, #20]
 8004368:	444e      	add	r6, r9
 800436a:	eba5 0509 	sub.w	r5, r5, r9
 800436e:	6026      	str	r6, [r4, #0]
 8004370:	60a5      	str	r5, [r4, #8]
 8004372:	463e      	mov	r6, r7
 8004374:	42be      	cmp	r6, r7
 8004376:	d900      	bls.n	800437a <__ssputs_r+0x86>
 8004378:	463e      	mov	r6, r7
 800437a:	6820      	ldr	r0, [r4, #0]
 800437c:	4632      	mov	r2, r6
 800437e:	4641      	mov	r1, r8
 8004380:	f000 fab6 	bl	80048f0 <memmove>
 8004384:	68a3      	ldr	r3, [r4, #8]
 8004386:	1b9b      	subs	r3, r3, r6
 8004388:	60a3      	str	r3, [r4, #8]
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	4433      	add	r3, r6
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	2000      	movs	r0, #0
 8004392:	e7db      	b.n	800434c <__ssputs_r+0x58>
 8004394:	462a      	mov	r2, r5
 8004396:	f000 fba5 	bl	8004ae4 <_realloc_r>
 800439a:	4606      	mov	r6, r0
 800439c:	2800      	cmp	r0, #0
 800439e:	d1e1      	bne.n	8004364 <__ssputs_r+0x70>
 80043a0:	6921      	ldr	r1, [r4, #16]
 80043a2:	4650      	mov	r0, sl
 80043a4:	f000 fabe 	bl	8004924 <_free_r>
 80043a8:	e7c7      	b.n	800433a <__ssputs_r+0x46>
	...

080043ac <_svfiprintf_r>:
 80043ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b0:	4698      	mov	r8, r3
 80043b2:	898b      	ldrh	r3, [r1, #12]
 80043b4:	061b      	lsls	r3, r3, #24
 80043b6:	b09d      	sub	sp, #116	; 0x74
 80043b8:	4607      	mov	r7, r0
 80043ba:	460d      	mov	r5, r1
 80043bc:	4614      	mov	r4, r2
 80043be:	d50e      	bpl.n	80043de <_svfiprintf_r+0x32>
 80043c0:	690b      	ldr	r3, [r1, #16]
 80043c2:	b963      	cbnz	r3, 80043de <_svfiprintf_r+0x32>
 80043c4:	2140      	movs	r1, #64	; 0x40
 80043c6:	f000 fb19 	bl	80049fc <_malloc_r>
 80043ca:	6028      	str	r0, [r5, #0]
 80043cc:	6128      	str	r0, [r5, #16]
 80043ce:	b920      	cbnz	r0, 80043da <_svfiprintf_r+0x2e>
 80043d0:	230c      	movs	r3, #12
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295
 80043d8:	e0d1      	b.n	800457e <_svfiprintf_r+0x1d2>
 80043da:	2340      	movs	r3, #64	; 0x40
 80043dc:	616b      	str	r3, [r5, #20]
 80043de:	2300      	movs	r3, #0
 80043e0:	9309      	str	r3, [sp, #36]	; 0x24
 80043e2:	2320      	movs	r3, #32
 80043e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80043ec:	2330      	movs	r3, #48	; 0x30
 80043ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004598 <_svfiprintf_r+0x1ec>
 80043f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043f6:	f04f 0901 	mov.w	r9, #1
 80043fa:	4623      	mov	r3, r4
 80043fc:	469a      	mov	sl, r3
 80043fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004402:	b10a      	cbz	r2, 8004408 <_svfiprintf_r+0x5c>
 8004404:	2a25      	cmp	r2, #37	; 0x25
 8004406:	d1f9      	bne.n	80043fc <_svfiprintf_r+0x50>
 8004408:	ebba 0b04 	subs.w	fp, sl, r4
 800440c:	d00b      	beq.n	8004426 <_svfiprintf_r+0x7a>
 800440e:	465b      	mov	r3, fp
 8004410:	4622      	mov	r2, r4
 8004412:	4629      	mov	r1, r5
 8004414:	4638      	mov	r0, r7
 8004416:	f7ff ff6d 	bl	80042f4 <__ssputs_r>
 800441a:	3001      	adds	r0, #1
 800441c:	f000 80aa 	beq.w	8004574 <_svfiprintf_r+0x1c8>
 8004420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004422:	445a      	add	r2, fp
 8004424:	9209      	str	r2, [sp, #36]	; 0x24
 8004426:	f89a 3000 	ldrb.w	r3, [sl]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80a2 	beq.w	8004574 <_svfiprintf_r+0x1c8>
 8004430:	2300      	movs	r3, #0
 8004432:	f04f 32ff 	mov.w	r2, #4294967295
 8004436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800443a:	f10a 0a01 	add.w	sl, sl, #1
 800443e:	9304      	str	r3, [sp, #16]
 8004440:	9307      	str	r3, [sp, #28]
 8004442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004446:	931a      	str	r3, [sp, #104]	; 0x68
 8004448:	4654      	mov	r4, sl
 800444a:	2205      	movs	r2, #5
 800444c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004450:	4851      	ldr	r0, [pc, #324]	; (8004598 <_svfiprintf_r+0x1ec>)
 8004452:	f7fb fec5 	bl	80001e0 <memchr>
 8004456:	9a04      	ldr	r2, [sp, #16]
 8004458:	b9d8      	cbnz	r0, 8004492 <_svfiprintf_r+0xe6>
 800445a:	06d0      	lsls	r0, r2, #27
 800445c:	bf44      	itt	mi
 800445e:	2320      	movmi	r3, #32
 8004460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004464:	0711      	lsls	r1, r2, #28
 8004466:	bf44      	itt	mi
 8004468:	232b      	movmi	r3, #43	; 0x2b
 800446a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800446e:	f89a 3000 	ldrb.w	r3, [sl]
 8004472:	2b2a      	cmp	r3, #42	; 0x2a
 8004474:	d015      	beq.n	80044a2 <_svfiprintf_r+0xf6>
 8004476:	9a07      	ldr	r2, [sp, #28]
 8004478:	4654      	mov	r4, sl
 800447a:	2000      	movs	r0, #0
 800447c:	f04f 0c0a 	mov.w	ip, #10
 8004480:	4621      	mov	r1, r4
 8004482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004486:	3b30      	subs	r3, #48	; 0x30
 8004488:	2b09      	cmp	r3, #9
 800448a:	d94e      	bls.n	800452a <_svfiprintf_r+0x17e>
 800448c:	b1b0      	cbz	r0, 80044bc <_svfiprintf_r+0x110>
 800448e:	9207      	str	r2, [sp, #28]
 8004490:	e014      	b.n	80044bc <_svfiprintf_r+0x110>
 8004492:	eba0 0308 	sub.w	r3, r0, r8
 8004496:	fa09 f303 	lsl.w	r3, r9, r3
 800449a:	4313      	orrs	r3, r2
 800449c:	9304      	str	r3, [sp, #16]
 800449e:	46a2      	mov	sl, r4
 80044a0:	e7d2      	b.n	8004448 <_svfiprintf_r+0x9c>
 80044a2:	9b03      	ldr	r3, [sp, #12]
 80044a4:	1d19      	adds	r1, r3, #4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	9103      	str	r1, [sp, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bfbb      	ittet	lt
 80044ae:	425b      	neglt	r3, r3
 80044b0:	f042 0202 	orrlt.w	r2, r2, #2
 80044b4:	9307      	strge	r3, [sp, #28]
 80044b6:	9307      	strlt	r3, [sp, #28]
 80044b8:	bfb8      	it	lt
 80044ba:	9204      	strlt	r2, [sp, #16]
 80044bc:	7823      	ldrb	r3, [r4, #0]
 80044be:	2b2e      	cmp	r3, #46	; 0x2e
 80044c0:	d10c      	bne.n	80044dc <_svfiprintf_r+0x130>
 80044c2:	7863      	ldrb	r3, [r4, #1]
 80044c4:	2b2a      	cmp	r3, #42	; 0x2a
 80044c6:	d135      	bne.n	8004534 <_svfiprintf_r+0x188>
 80044c8:	9b03      	ldr	r3, [sp, #12]
 80044ca:	1d1a      	adds	r2, r3, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	9203      	str	r2, [sp, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bfb8      	it	lt
 80044d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80044d8:	3402      	adds	r4, #2
 80044da:	9305      	str	r3, [sp, #20]
 80044dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80045a8 <_svfiprintf_r+0x1fc>
 80044e0:	7821      	ldrb	r1, [r4, #0]
 80044e2:	2203      	movs	r2, #3
 80044e4:	4650      	mov	r0, sl
 80044e6:	f7fb fe7b 	bl	80001e0 <memchr>
 80044ea:	b140      	cbz	r0, 80044fe <_svfiprintf_r+0x152>
 80044ec:	2340      	movs	r3, #64	; 0x40
 80044ee:	eba0 000a 	sub.w	r0, r0, sl
 80044f2:	fa03 f000 	lsl.w	r0, r3, r0
 80044f6:	9b04      	ldr	r3, [sp, #16]
 80044f8:	4303      	orrs	r3, r0
 80044fa:	3401      	adds	r4, #1
 80044fc:	9304      	str	r3, [sp, #16]
 80044fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004502:	4826      	ldr	r0, [pc, #152]	; (800459c <_svfiprintf_r+0x1f0>)
 8004504:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004508:	2206      	movs	r2, #6
 800450a:	f7fb fe69 	bl	80001e0 <memchr>
 800450e:	2800      	cmp	r0, #0
 8004510:	d038      	beq.n	8004584 <_svfiprintf_r+0x1d8>
 8004512:	4b23      	ldr	r3, [pc, #140]	; (80045a0 <_svfiprintf_r+0x1f4>)
 8004514:	bb1b      	cbnz	r3, 800455e <_svfiprintf_r+0x1b2>
 8004516:	9b03      	ldr	r3, [sp, #12]
 8004518:	3307      	adds	r3, #7
 800451a:	f023 0307 	bic.w	r3, r3, #7
 800451e:	3308      	adds	r3, #8
 8004520:	9303      	str	r3, [sp, #12]
 8004522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004524:	4433      	add	r3, r6
 8004526:	9309      	str	r3, [sp, #36]	; 0x24
 8004528:	e767      	b.n	80043fa <_svfiprintf_r+0x4e>
 800452a:	fb0c 3202 	mla	r2, ip, r2, r3
 800452e:	460c      	mov	r4, r1
 8004530:	2001      	movs	r0, #1
 8004532:	e7a5      	b.n	8004480 <_svfiprintf_r+0xd4>
 8004534:	2300      	movs	r3, #0
 8004536:	3401      	adds	r4, #1
 8004538:	9305      	str	r3, [sp, #20]
 800453a:	4619      	mov	r1, r3
 800453c:	f04f 0c0a 	mov.w	ip, #10
 8004540:	4620      	mov	r0, r4
 8004542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004546:	3a30      	subs	r2, #48	; 0x30
 8004548:	2a09      	cmp	r2, #9
 800454a:	d903      	bls.n	8004554 <_svfiprintf_r+0x1a8>
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0c5      	beq.n	80044dc <_svfiprintf_r+0x130>
 8004550:	9105      	str	r1, [sp, #20]
 8004552:	e7c3      	b.n	80044dc <_svfiprintf_r+0x130>
 8004554:	fb0c 2101 	mla	r1, ip, r1, r2
 8004558:	4604      	mov	r4, r0
 800455a:	2301      	movs	r3, #1
 800455c:	e7f0      	b.n	8004540 <_svfiprintf_r+0x194>
 800455e:	ab03      	add	r3, sp, #12
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	462a      	mov	r2, r5
 8004564:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <_svfiprintf_r+0x1f8>)
 8004566:	a904      	add	r1, sp, #16
 8004568:	4638      	mov	r0, r7
 800456a:	f3af 8000 	nop.w
 800456e:	1c42      	adds	r2, r0, #1
 8004570:	4606      	mov	r6, r0
 8004572:	d1d6      	bne.n	8004522 <_svfiprintf_r+0x176>
 8004574:	89ab      	ldrh	r3, [r5, #12]
 8004576:	065b      	lsls	r3, r3, #25
 8004578:	f53f af2c 	bmi.w	80043d4 <_svfiprintf_r+0x28>
 800457c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800457e:	b01d      	add	sp, #116	; 0x74
 8004580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004584:	ab03      	add	r3, sp, #12
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	462a      	mov	r2, r5
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <_svfiprintf_r+0x1f8>)
 800458c:	a904      	add	r1, sp, #16
 800458e:	4638      	mov	r0, r7
 8004590:	f000 f87a 	bl	8004688 <_printf_i>
 8004594:	e7eb      	b.n	800456e <_svfiprintf_r+0x1c2>
 8004596:	bf00      	nop
 8004598:	08004bfc 	.word	0x08004bfc
 800459c:	08004c06 	.word	0x08004c06
 80045a0:	00000000 	.word	0x00000000
 80045a4:	080042f5 	.word	0x080042f5
 80045a8:	08004c02 	.word	0x08004c02

080045ac <_printf_common>:
 80045ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045b0:	4616      	mov	r6, r2
 80045b2:	4699      	mov	r9, r3
 80045b4:	688a      	ldr	r2, [r1, #8]
 80045b6:	690b      	ldr	r3, [r1, #16]
 80045b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045bc:	4293      	cmp	r3, r2
 80045be:	bfb8      	it	lt
 80045c0:	4613      	movlt	r3, r2
 80045c2:	6033      	str	r3, [r6, #0]
 80045c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045c8:	4607      	mov	r7, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	b10a      	cbz	r2, 80045d2 <_printf_common+0x26>
 80045ce:	3301      	adds	r3, #1
 80045d0:	6033      	str	r3, [r6, #0]
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	0699      	lsls	r1, r3, #26
 80045d6:	bf42      	ittt	mi
 80045d8:	6833      	ldrmi	r3, [r6, #0]
 80045da:	3302      	addmi	r3, #2
 80045dc:	6033      	strmi	r3, [r6, #0]
 80045de:	6825      	ldr	r5, [r4, #0]
 80045e0:	f015 0506 	ands.w	r5, r5, #6
 80045e4:	d106      	bne.n	80045f4 <_printf_common+0x48>
 80045e6:	f104 0a19 	add.w	sl, r4, #25
 80045ea:	68e3      	ldr	r3, [r4, #12]
 80045ec:	6832      	ldr	r2, [r6, #0]
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	42ab      	cmp	r3, r5
 80045f2:	dc26      	bgt.n	8004642 <_printf_common+0x96>
 80045f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045f8:	1e13      	subs	r3, r2, #0
 80045fa:	6822      	ldr	r2, [r4, #0]
 80045fc:	bf18      	it	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	0692      	lsls	r2, r2, #26
 8004602:	d42b      	bmi.n	800465c <_printf_common+0xb0>
 8004604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004608:	4649      	mov	r1, r9
 800460a:	4638      	mov	r0, r7
 800460c:	47c0      	blx	r8
 800460e:	3001      	adds	r0, #1
 8004610:	d01e      	beq.n	8004650 <_printf_common+0xa4>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	68e5      	ldr	r5, [r4, #12]
 8004616:	6832      	ldr	r2, [r6, #0]
 8004618:	f003 0306 	and.w	r3, r3, #6
 800461c:	2b04      	cmp	r3, #4
 800461e:	bf08      	it	eq
 8004620:	1aad      	subeq	r5, r5, r2
 8004622:	68a3      	ldr	r3, [r4, #8]
 8004624:	6922      	ldr	r2, [r4, #16]
 8004626:	bf0c      	ite	eq
 8004628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800462c:	2500      	movne	r5, #0
 800462e:	4293      	cmp	r3, r2
 8004630:	bfc4      	itt	gt
 8004632:	1a9b      	subgt	r3, r3, r2
 8004634:	18ed      	addgt	r5, r5, r3
 8004636:	2600      	movs	r6, #0
 8004638:	341a      	adds	r4, #26
 800463a:	42b5      	cmp	r5, r6
 800463c:	d11a      	bne.n	8004674 <_printf_common+0xc8>
 800463e:	2000      	movs	r0, #0
 8004640:	e008      	b.n	8004654 <_printf_common+0xa8>
 8004642:	2301      	movs	r3, #1
 8004644:	4652      	mov	r2, sl
 8004646:	4649      	mov	r1, r9
 8004648:	4638      	mov	r0, r7
 800464a:	47c0      	blx	r8
 800464c:	3001      	adds	r0, #1
 800464e:	d103      	bne.n	8004658 <_printf_common+0xac>
 8004650:	f04f 30ff 	mov.w	r0, #4294967295
 8004654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004658:	3501      	adds	r5, #1
 800465a:	e7c6      	b.n	80045ea <_printf_common+0x3e>
 800465c:	18e1      	adds	r1, r4, r3
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	2030      	movs	r0, #48	; 0x30
 8004662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004666:	4422      	add	r2, r4
 8004668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800466c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004670:	3302      	adds	r3, #2
 8004672:	e7c7      	b.n	8004604 <_printf_common+0x58>
 8004674:	2301      	movs	r3, #1
 8004676:	4622      	mov	r2, r4
 8004678:	4649      	mov	r1, r9
 800467a:	4638      	mov	r0, r7
 800467c:	47c0      	blx	r8
 800467e:	3001      	adds	r0, #1
 8004680:	d0e6      	beq.n	8004650 <_printf_common+0xa4>
 8004682:	3601      	adds	r6, #1
 8004684:	e7d9      	b.n	800463a <_printf_common+0x8e>
	...

08004688 <_printf_i>:
 8004688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800468c:	7e0f      	ldrb	r7, [r1, #24]
 800468e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004690:	2f78      	cmp	r7, #120	; 0x78
 8004692:	4691      	mov	r9, r2
 8004694:	4680      	mov	r8, r0
 8004696:	460c      	mov	r4, r1
 8004698:	469a      	mov	sl, r3
 800469a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800469e:	d807      	bhi.n	80046b0 <_printf_i+0x28>
 80046a0:	2f62      	cmp	r7, #98	; 0x62
 80046a2:	d80a      	bhi.n	80046ba <_printf_i+0x32>
 80046a4:	2f00      	cmp	r7, #0
 80046a6:	f000 80d8 	beq.w	800485a <_printf_i+0x1d2>
 80046aa:	2f58      	cmp	r7, #88	; 0x58
 80046ac:	f000 80a3 	beq.w	80047f6 <_printf_i+0x16e>
 80046b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046b8:	e03a      	b.n	8004730 <_printf_i+0xa8>
 80046ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046be:	2b15      	cmp	r3, #21
 80046c0:	d8f6      	bhi.n	80046b0 <_printf_i+0x28>
 80046c2:	a101      	add	r1, pc, #4	; (adr r1, 80046c8 <_printf_i+0x40>)
 80046c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046c8:	08004721 	.word	0x08004721
 80046cc:	08004735 	.word	0x08004735
 80046d0:	080046b1 	.word	0x080046b1
 80046d4:	080046b1 	.word	0x080046b1
 80046d8:	080046b1 	.word	0x080046b1
 80046dc:	080046b1 	.word	0x080046b1
 80046e0:	08004735 	.word	0x08004735
 80046e4:	080046b1 	.word	0x080046b1
 80046e8:	080046b1 	.word	0x080046b1
 80046ec:	080046b1 	.word	0x080046b1
 80046f0:	080046b1 	.word	0x080046b1
 80046f4:	08004841 	.word	0x08004841
 80046f8:	08004765 	.word	0x08004765
 80046fc:	08004823 	.word	0x08004823
 8004700:	080046b1 	.word	0x080046b1
 8004704:	080046b1 	.word	0x080046b1
 8004708:	08004863 	.word	0x08004863
 800470c:	080046b1 	.word	0x080046b1
 8004710:	08004765 	.word	0x08004765
 8004714:	080046b1 	.word	0x080046b1
 8004718:	080046b1 	.word	0x080046b1
 800471c:	0800482b 	.word	0x0800482b
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	1d1a      	adds	r2, r3, #4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	602a      	str	r2, [r5, #0]
 8004728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800472c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004730:	2301      	movs	r3, #1
 8004732:	e0a3      	b.n	800487c <_printf_i+0x1f4>
 8004734:	6820      	ldr	r0, [r4, #0]
 8004736:	6829      	ldr	r1, [r5, #0]
 8004738:	0606      	lsls	r6, r0, #24
 800473a:	f101 0304 	add.w	r3, r1, #4
 800473e:	d50a      	bpl.n	8004756 <_printf_i+0xce>
 8004740:	680e      	ldr	r6, [r1, #0]
 8004742:	602b      	str	r3, [r5, #0]
 8004744:	2e00      	cmp	r6, #0
 8004746:	da03      	bge.n	8004750 <_printf_i+0xc8>
 8004748:	232d      	movs	r3, #45	; 0x2d
 800474a:	4276      	negs	r6, r6
 800474c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004750:	485e      	ldr	r0, [pc, #376]	; (80048cc <_printf_i+0x244>)
 8004752:	230a      	movs	r3, #10
 8004754:	e019      	b.n	800478a <_printf_i+0x102>
 8004756:	680e      	ldr	r6, [r1, #0]
 8004758:	602b      	str	r3, [r5, #0]
 800475a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800475e:	bf18      	it	ne
 8004760:	b236      	sxthne	r6, r6
 8004762:	e7ef      	b.n	8004744 <_printf_i+0xbc>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	6820      	ldr	r0, [r4, #0]
 8004768:	1d19      	adds	r1, r3, #4
 800476a:	6029      	str	r1, [r5, #0]
 800476c:	0601      	lsls	r1, r0, #24
 800476e:	d501      	bpl.n	8004774 <_printf_i+0xec>
 8004770:	681e      	ldr	r6, [r3, #0]
 8004772:	e002      	b.n	800477a <_printf_i+0xf2>
 8004774:	0646      	lsls	r6, r0, #25
 8004776:	d5fb      	bpl.n	8004770 <_printf_i+0xe8>
 8004778:	881e      	ldrh	r6, [r3, #0]
 800477a:	4854      	ldr	r0, [pc, #336]	; (80048cc <_printf_i+0x244>)
 800477c:	2f6f      	cmp	r7, #111	; 0x6f
 800477e:	bf0c      	ite	eq
 8004780:	2308      	moveq	r3, #8
 8004782:	230a      	movne	r3, #10
 8004784:	2100      	movs	r1, #0
 8004786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800478a:	6865      	ldr	r5, [r4, #4]
 800478c:	60a5      	str	r5, [r4, #8]
 800478e:	2d00      	cmp	r5, #0
 8004790:	bfa2      	ittt	ge
 8004792:	6821      	ldrge	r1, [r4, #0]
 8004794:	f021 0104 	bicge.w	r1, r1, #4
 8004798:	6021      	strge	r1, [r4, #0]
 800479a:	b90e      	cbnz	r6, 80047a0 <_printf_i+0x118>
 800479c:	2d00      	cmp	r5, #0
 800479e:	d04d      	beq.n	800483c <_printf_i+0x1b4>
 80047a0:	4615      	mov	r5, r2
 80047a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80047a6:	fb03 6711 	mls	r7, r3, r1, r6
 80047aa:	5dc7      	ldrb	r7, [r0, r7]
 80047ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047b0:	4637      	mov	r7, r6
 80047b2:	42bb      	cmp	r3, r7
 80047b4:	460e      	mov	r6, r1
 80047b6:	d9f4      	bls.n	80047a2 <_printf_i+0x11a>
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d10b      	bne.n	80047d4 <_printf_i+0x14c>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	07de      	lsls	r6, r3, #31
 80047c0:	d508      	bpl.n	80047d4 <_printf_i+0x14c>
 80047c2:	6923      	ldr	r3, [r4, #16]
 80047c4:	6861      	ldr	r1, [r4, #4]
 80047c6:	4299      	cmp	r1, r3
 80047c8:	bfde      	ittt	le
 80047ca:	2330      	movle	r3, #48	; 0x30
 80047cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80047d4:	1b52      	subs	r2, r2, r5
 80047d6:	6122      	str	r2, [r4, #16]
 80047d8:	f8cd a000 	str.w	sl, [sp]
 80047dc:	464b      	mov	r3, r9
 80047de:	aa03      	add	r2, sp, #12
 80047e0:	4621      	mov	r1, r4
 80047e2:	4640      	mov	r0, r8
 80047e4:	f7ff fee2 	bl	80045ac <_printf_common>
 80047e8:	3001      	adds	r0, #1
 80047ea:	d14c      	bne.n	8004886 <_printf_i+0x1fe>
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	b004      	add	sp, #16
 80047f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f6:	4835      	ldr	r0, [pc, #212]	; (80048cc <_printf_i+0x244>)
 80047f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047fc:	6829      	ldr	r1, [r5, #0]
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	f851 6b04 	ldr.w	r6, [r1], #4
 8004804:	6029      	str	r1, [r5, #0]
 8004806:	061d      	lsls	r5, r3, #24
 8004808:	d514      	bpl.n	8004834 <_printf_i+0x1ac>
 800480a:	07df      	lsls	r7, r3, #31
 800480c:	bf44      	itt	mi
 800480e:	f043 0320 	orrmi.w	r3, r3, #32
 8004812:	6023      	strmi	r3, [r4, #0]
 8004814:	b91e      	cbnz	r6, 800481e <_printf_i+0x196>
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	f023 0320 	bic.w	r3, r3, #32
 800481c:	6023      	str	r3, [r4, #0]
 800481e:	2310      	movs	r3, #16
 8004820:	e7b0      	b.n	8004784 <_printf_i+0xfc>
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	f043 0320 	orr.w	r3, r3, #32
 8004828:	6023      	str	r3, [r4, #0]
 800482a:	2378      	movs	r3, #120	; 0x78
 800482c:	4828      	ldr	r0, [pc, #160]	; (80048d0 <_printf_i+0x248>)
 800482e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004832:	e7e3      	b.n	80047fc <_printf_i+0x174>
 8004834:	0659      	lsls	r1, r3, #25
 8004836:	bf48      	it	mi
 8004838:	b2b6      	uxthmi	r6, r6
 800483a:	e7e6      	b.n	800480a <_printf_i+0x182>
 800483c:	4615      	mov	r5, r2
 800483e:	e7bb      	b.n	80047b8 <_printf_i+0x130>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	6826      	ldr	r6, [r4, #0]
 8004844:	6961      	ldr	r1, [r4, #20]
 8004846:	1d18      	adds	r0, r3, #4
 8004848:	6028      	str	r0, [r5, #0]
 800484a:	0635      	lsls	r5, r6, #24
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	d501      	bpl.n	8004854 <_printf_i+0x1cc>
 8004850:	6019      	str	r1, [r3, #0]
 8004852:	e002      	b.n	800485a <_printf_i+0x1d2>
 8004854:	0670      	lsls	r0, r6, #25
 8004856:	d5fb      	bpl.n	8004850 <_printf_i+0x1c8>
 8004858:	8019      	strh	r1, [r3, #0]
 800485a:	2300      	movs	r3, #0
 800485c:	6123      	str	r3, [r4, #16]
 800485e:	4615      	mov	r5, r2
 8004860:	e7ba      	b.n	80047d8 <_printf_i+0x150>
 8004862:	682b      	ldr	r3, [r5, #0]
 8004864:	1d1a      	adds	r2, r3, #4
 8004866:	602a      	str	r2, [r5, #0]
 8004868:	681d      	ldr	r5, [r3, #0]
 800486a:	6862      	ldr	r2, [r4, #4]
 800486c:	2100      	movs	r1, #0
 800486e:	4628      	mov	r0, r5
 8004870:	f7fb fcb6 	bl	80001e0 <memchr>
 8004874:	b108      	cbz	r0, 800487a <_printf_i+0x1f2>
 8004876:	1b40      	subs	r0, r0, r5
 8004878:	6060      	str	r0, [r4, #4]
 800487a:	6863      	ldr	r3, [r4, #4]
 800487c:	6123      	str	r3, [r4, #16]
 800487e:	2300      	movs	r3, #0
 8004880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004884:	e7a8      	b.n	80047d8 <_printf_i+0x150>
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	462a      	mov	r2, r5
 800488a:	4649      	mov	r1, r9
 800488c:	4640      	mov	r0, r8
 800488e:	47d0      	blx	sl
 8004890:	3001      	adds	r0, #1
 8004892:	d0ab      	beq.n	80047ec <_printf_i+0x164>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	079b      	lsls	r3, r3, #30
 8004898:	d413      	bmi.n	80048c2 <_printf_i+0x23a>
 800489a:	68e0      	ldr	r0, [r4, #12]
 800489c:	9b03      	ldr	r3, [sp, #12]
 800489e:	4298      	cmp	r0, r3
 80048a0:	bfb8      	it	lt
 80048a2:	4618      	movlt	r0, r3
 80048a4:	e7a4      	b.n	80047f0 <_printf_i+0x168>
 80048a6:	2301      	movs	r3, #1
 80048a8:	4632      	mov	r2, r6
 80048aa:	4649      	mov	r1, r9
 80048ac:	4640      	mov	r0, r8
 80048ae:	47d0      	blx	sl
 80048b0:	3001      	adds	r0, #1
 80048b2:	d09b      	beq.n	80047ec <_printf_i+0x164>
 80048b4:	3501      	adds	r5, #1
 80048b6:	68e3      	ldr	r3, [r4, #12]
 80048b8:	9903      	ldr	r1, [sp, #12]
 80048ba:	1a5b      	subs	r3, r3, r1
 80048bc:	42ab      	cmp	r3, r5
 80048be:	dcf2      	bgt.n	80048a6 <_printf_i+0x21e>
 80048c0:	e7eb      	b.n	800489a <_printf_i+0x212>
 80048c2:	2500      	movs	r5, #0
 80048c4:	f104 0619 	add.w	r6, r4, #25
 80048c8:	e7f5      	b.n	80048b6 <_printf_i+0x22e>
 80048ca:	bf00      	nop
 80048cc:	08004c0d 	.word	0x08004c0d
 80048d0:	08004c1e 	.word	0x08004c1e

080048d4 <memcpy>:
 80048d4:	440a      	add	r2, r1
 80048d6:	4291      	cmp	r1, r2
 80048d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048dc:	d100      	bne.n	80048e0 <memcpy+0xc>
 80048de:	4770      	bx	lr
 80048e0:	b510      	push	{r4, lr}
 80048e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048ea:	4291      	cmp	r1, r2
 80048ec:	d1f9      	bne.n	80048e2 <memcpy+0xe>
 80048ee:	bd10      	pop	{r4, pc}

080048f0 <memmove>:
 80048f0:	4288      	cmp	r0, r1
 80048f2:	b510      	push	{r4, lr}
 80048f4:	eb01 0402 	add.w	r4, r1, r2
 80048f8:	d902      	bls.n	8004900 <memmove+0x10>
 80048fa:	4284      	cmp	r4, r0
 80048fc:	4623      	mov	r3, r4
 80048fe:	d807      	bhi.n	8004910 <memmove+0x20>
 8004900:	1e43      	subs	r3, r0, #1
 8004902:	42a1      	cmp	r1, r4
 8004904:	d008      	beq.n	8004918 <memmove+0x28>
 8004906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800490a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800490e:	e7f8      	b.n	8004902 <memmove+0x12>
 8004910:	4402      	add	r2, r0
 8004912:	4601      	mov	r1, r0
 8004914:	428a      	cmp	r2, r1
 8004916:	d100      	bne.n	800491a <memmove+0x2a>
 8004918:	bd10      	pop	{r4, pc}
 800491a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800491e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004922:	e7f7      	b.n	8004914 <memmove+0x24>

08004924 <_free_r>:
 8004924:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004926:	2900      	cmp	r1, #0
 8004928:	d044      	beq.n	80049b4 <_free_r+0x90>
 800492a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800492e:	9001      	str	r0, [sp, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f1a1 0404 	sub.w	r4, r1, #4
 8004936:	bfb8      	it	lt
 8004938:	18e4      	addlt	r4, r4, r3
 800493a:	f000 f913 	bl	8004b64 <__malloc_lock>
 800493e:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <_free_r+0x94>)
 8004940:	9801      	ldr	r0, [sp, #4]
 8004942:	6813      	ldr	r3, [r2, #0]
 8004944:	b933      	cbnz	r3, 8004954 <_free_r+0x30>
 8004946:	6063      	str	r3, [r4, #4]
 8004948:	6014      	str	r4, [r2, #0]
 800494a:	b003      	add	sp, #12
 800494c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004950:	f000 b90e 	b.w	8004b70 <__malloc_unlock>
 8004954:	42a3      	cmp	r3, r4
 8004956:	d908      	bls.n	800496a <_free_r+0x46>
 8004958:	6825      	ldr	r5, [r4, #0]
 800495a:	1961      	adds	r1, r4, r5
 800495c:	428b      	cmp	r3, r1
 800495e:	bf01      	itttt	eq
 8004960:	6819      	ldreq	r1, [r3, #0]
 8004962:	685b      	ldreq	r3, [r3, #4]
 8004964:	1949      	addeq	r1, r1, r5
 8004966:	6021      	streq	r1, [r4, #0]
 8004968:	e7ed      	b.n	8004946 <_free_r+0x22>
 800496a:	461a      	mov	r2, r3
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	b10b      	cbz	r3, 8004974 <_free_r+0x50>
 8004970:	42a3      	cmp	r3, r4
 8004972:	d9fa      	bls.n	800496a <_free_r+0x46>
 8004974:	6811      	ldr	r1, [r2, #0]
 8004976:	1855      	adds	r5, r2, r1
 8004978:	42a5      	cmp	r5, r4
 800497a:	d10b      	bne.n	8004994 <_free_r+0x70>
 800497c:	6824      	ldr	r4, [r4, #0]
 800497e:	4421      	add	r1, r4
 8004980:	1854      	adds	r4, r2, r1
 8004982:	42a3      	cmp	r3, r4
 8004984:	6011      	str	r1, [r2, #0]
 8004986:	d1e0      	bne.n	800494a <_free_r+0x26>
 8004988:	681c      	ldr	r4, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	6053      	str	r3, [r2, #4]
 800498e:	4421      	add	r1, r4
 8004990:	6011      	str	r1, [r2, #0]
 8004992:	e7da      	b.n	800494a <_free_r+0x26>
 8004994:	d902      	bls.n	800499c <_free_r+0x78>
 8004996:	230c      	movs	r3, #12
 8004998:	6003      	str	r3, [r0, #0]
 800499a:	e7d6      	b.n	800494a <_free_r+0x26>
 800499c:	6825      	ldr	r5, [r4, #0]
 800499e:	1961      	adds	r1, r4, r5
 80049a0:	428b      	cmp	r3, r1
 80049a2:	bf04      	itt	eq
 80049a4:	6819      	ldreq	r1, [r3, #0]
 80049a6:	685b      	ldreq	r3, [r3, #4]
 80049a8:	6063      	str	r3, [r4, #4]
 80049aa:	bf04      	itt	eq
 80049ac:	1949      	addeq	r1, r1, r5
 80049ae:	6021      	streq	r1, [r4, #0]
 80049b0:	6054      	str	r4, [r2, #4]
 80049b2:	e7ca      	b.n	800494a <_free_r+0x26>
 80049b4:	b003      	add	sp, #12
 80049b6:	bd30      	pop	{r4, r5, pc}
 80049b8:	2000017c 	.word	0x2000017c

080049bc <sbrk_aligned>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	4e0e      	ldr	r6, [pc, #56]	; (80049f8 <sbrk_aligned+0x3c>)
 80049c0:	460c      	mov	r4, r1
 80049c2:	6831      	ldr	r1, [r6, #0]
 80049c4:	4605      	mov	r5, r0
 80049c6:	b911      	cbnz	r1, 80049ce <sbrk_aligned+0x12>
 80049c8:	f000 f8bc 	bl	8004b44 <_sbrk_r>
 80049cc:	6030      	str	r0, [r6, #0]
 80049ce:	4621      	mov	r1, r4
 80049d0:	4628      	mov	r0, r5
 80049d2:	f000 f8b7 	bl	8004b44 <_sbrk_r>
 80049d6:	1c43      	adds	r3, r0, #1
 80049d8:	d00a      	beq.n	80049f0 <sbrk_aligned+0x34>
 80049da:	1cc4      	adds	r4, r0, #3
 80049dc:	f024 0403 	bic.w	r4, r4, #3
 80049e0:	42a0      	cmp	r0, r4
 80049e2:	d007      	beq.n	80049f4 <sbrk_aligned+0x38>
 80049e4:	1a21      	subs	r1, r4, r0
 80049e6:	4628      	mov	r0, r5
 80049e8:	f000 f8ac 	bl	8004b44 <_sbrk_r>
 80049ec:	3001      	adds	r0, #1
 80049ee:	d101      	bne.n	80049f4 <sbrk_aligned+0x38>
 80049f0:	f04f 34ff 	mov.w	r4, #4294967295
 80049f4:	4620      	mov	r0, r4
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	20000180 	.word	0x20000180

080049fc <_malloc_r>:
 80049fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a00:	1ccd      	adds	r5, r1, #3
 8004a02:	f025 0503 	bic.w	r5, r5, #3
 8004a06:	3508      	adds	r5, #8
 8004a08:	2d0c      	cmp	r5, #12
 8004a0a:	bf38      	it	cc
 8004a0c:	250c      	movcc	r5, #12
 8004a0e:	2d00      	cmp	r5, #0
 8004a10:	4607      	mov	r7, r0
 8004a12:	db01      	blt.n	8004a18 <_malloc_r+0x1c>
 8004a14:	42a9      	cmp	r1, r5
 8004a16:	d905      	bls.n	8004a24 <_malloc_r+0x28>
 8004a18:	230c      	movs	r3, #12
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	2600      	movs	r6, #0
 8004a1e:	4630      	mov	r0, r6
 8004a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a24:	4e2e      	ldr	r6, [pc, #184]	; (8004ae0 <_malloc_r+0xe4>)
 8004a26:	f000 f89d 	bl	8004b64 <__malloc_lock>
 8004a2a:	6833      	ldr	r3, [r6, #0]
 8004a2c:	461c      	mov	r4, r3
 8004a2e:	bb34      	cbnz	r4, 8004a7e <_malloc_r+0x82>
 8004a30:	4629      	mov	r1, r5
 8004a32:	4638      	mov	r0, r7
 8004a34:	f7ff ffc2 	bl	80049bc <sbrk_aligned>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	d14d      	bne.n	8004ada <_malloc_r+0xde>
 8004a3e:	6834      	ldr	r4, [r6, #0]
 8004a40:	4626      	mov	r6, r4
 8004a42:	2e00      	cmp	r6, #0
 8004a44:	d140      	bne.n	8004ac8 <_malloc_r+0xcc>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	4631      	mov	r1, r6
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	eb04 0803 	add.w	r8, r4, r3
 8004a50:	f000 f878 	bl	8004b44 <_sbrk_r>
 8004a54:	4580      	cmp	r8, r0
 8004a56:	d13a      	bne.n	8004ace <_malloc_r+0xd2>
 8004a58:	6821      	ldr	r1, [r4, #0]
 8004a5a:	3503      	adds	r5, #3
 8004a5c:	1a6d      	subs	r5, r5, r1
 8004a5e:	f025 0503 	bic.w	r5, r5, #3
 8004a62:	3508      	adds	r5, #8
 8004a64:	2d0c      	cmp	r5, #12
 8004a66:	bf38      	it	cc
 8004a68:	250c      	movcc	r5, #12
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	f7ff ffa5 	bl	80049bc <sbrk_aligned>
 8004a72:	3001      	adds	r0, #1
 8004a74:	d02b      	beq.n	8004ace <_malloc_r+0xd2>
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	442b      	add	r3, r5
 8004a7a:	6023      	str	r3, [r4, #0]
 8004a7c:	e00e      	b.n	8004a9c <_malloc_r+0xa0>
 8004a7e:	6822      	ldr	r2, [r4, #0]
 8004a80:	1b52      	subs	r2, r2, r5
 8004a82:	d41e      	bmi.n	8004ac2 <_malloc_r+0xc6>
 8004a84:	2a0b      	cmp	r2, #11
 8004a86:	d916      	bls.n	8004ab6 <_malloc_r+0xba>
 8004a88:	1961      	adds	r1, r4, r5
 8004a8a:	42a3      	cmp	r3, r4
 8004a8c:	6025      	str	r5, [r4, #0]
 8004a8e:	bf18      	it	ne
 8004a90:	6059      	strne	r1, [r3, #4]
 8004a92:	6863      	ldr	r3, [r4, #4]
 8004a94:	bf08      	it	eq
 8004a96:	6031      	streq	r1, [r6, #0]
 8004a98:	5162      	str	r2, [r4, r5]
 8004a9a:	604b      	str	r3, [r1, #4]
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	f104 060b 	add.w	r6, r4, #11
 8004aa2:	f000 f865 	bl	8004b70 <__malloc_unlock>
 8004aa6:	f026 0607 	bic.w	r6, r6, #7
 8004aaa:	1d23      	adds	r3, r4, #4
 8004aac:	1af2      	subs	r2, r6, r3
 8004aae:	d0b6      	beq.n	8004a1e <_malloc_r+0x22>
 8004ab0:	1b9b      	subs	r3, r3, r6
 8004ab2:	50a3      	str	r3, [r4, r2]
 8004ab4:	e7b3      	b.n	8004a1e <_malloc_r+0x22>
 8004ab6:	6862      	ldr	r2, [r4, #4]
 8004ab8:	42a3      	cmp	r3, r4
 8004aba:	bf0c      	ite	eq
 8004abc:	6032      	streq	r2, [r6, #0]
 8004abe:	605a      	strne	r2, [r3, #4]
 8004ac0:	e7ec      	b.n	8004a9c <_malloc_r+0xa0>
 8004ac2:	4623      	mov	r3, r4
 8004ac4:	6864      	ldr	r4, [r4, #4]
 8004ac6:	e7b2      	b.n	8004a2e <_malloc_r+0x32>
 8004ac8:	4634      	mov	r4, r6
 8004aca:	6876      	ldr	r6, [r6, #4]
 8004acc:	e7b9      	b.n	8004a42 <_malloc_r+0x46>
 8004ace:	230c      	movs	r3, #12
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	f000 f84c 	bl	8004b70 <__malloc_unlock>
 8004ad8:	e7a1      	b.n	8004a1e <_malloc_r+0x22>
 8004ada:	6025      	str	r5, [r4, #0]
 8004adc:	e7de      	b.n	8004a9c <_malloc_r+0xa0>
 8004ade:	bf00      	nop
 8004ae0:	2000017c 	.word	0x2000017c

08004ae4 <_realloc_r>:
 8004ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae8:	4680      	mov	r8, r0
 8004aea:	4614      	mov	r4, r2
 8004aec:	460e      	mov	r6, r1
 8004aee:	b921      	cbnz	r1, 8004afa <_realloc_r+0x16>
 8004af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004af4:	4611      	mov	r1, r2
 8004af6:	f7ff bf81 	b.w	80049fc <_malloc_r>
 8004afa:	b92a      	cbnz	r2, 8004b08 <_realloc_r+0x24>
 8004afc:	f7ff ff12 	bl	8004924 <_free_r>
 8004b00:	4625      	mov	r5, r4
 8004b02:	4628      	mov	r0, r5
 8004b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b08:	f000 f838 	bl	8004b7c <_malloc_usable_size_r>
 8004b0c:	4284      	cmp	r4, r0
 8004b0e:	4607      	mov	r7, r0
 8004b10:	d802      	bhi.n	8004b18 <_realloc_r+0x34>
 8004b12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b16:	d812      	bhi.n	8004b3e <_realloc_r+0x5a>
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	f7ff ff6e 	bl	80049fc <_malloc_r>
 8004b20:	4605      	mov	r5, r0
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d0ed      	beq.n	8004b02 <_realloc_r+0x1e>
 8004b26:	42bc      	cmp	r4, r7
 8004b28:	4622      	mov	r2, r4
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	bf28      	it	cs
 8004b2e:	463a      	movcs	r2, r7
 8004b30:	f7ff fed0 	bl	80048d4 <memcpy>
 8004b34:	4631      	mov	r1, r6
 8004b36:	4640      	mov	r0, r8
 8004b38:	f7ff fef4 	bl	8004924 <_free_r>
 8004b3c:	e7e1      	b.n	8004b02 <_realloc_r+0x1e>
 8004b3e:	4635      	mov	r5, r6
 8004b40:	e7df      	b.n	8004b02 <_realloc_r+0x1e>
	...

08004b44 <_sbrk_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4d06      	ldr	r5, [pc, #24]	; (8004b60 <_sbrk_r+0x1c>)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	602b      	str	r3, [r5, #0]
 8004b50:	f7fb ff82 	bl	8000a58 <_sbrk>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d102      	bne.n	8004b5e <_sbrk_r+0x1a>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	b103      	cbz	r3, 8004b5e <_sbrk_r+0x1a>
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	20000184 	.word	0x20000184

08004b64 <__malloc_lock>:
 8004b64:	4801      	ldr	r0, [pc, #4]	; (8004b6c <__malloc_lock+0x8>)
 8004b66:	f000 b811 	b.w	8004b8c <__retarget_lock_acquire_recursive>
 8004b6a:	bf00      	nop
 8004b6c:	20000188 	.word	0x20000188

08004b70 <__malloc_unlock>:
 8004b70:	4801      	ldr	r0, [pc, #4]	; (8004b78 <__malloc_unlock+0x8>)
 8004b72:	f000 b80c 	b.w	8004b8e <__retarget_lock_release_recursive>
 8004b76:	bf00      	nop
 8004b78:	20000188 	.word	0x20000188

08004b7c <_malloc_usable_size_r>:
 8004b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b80:	1f18      	subs	r0, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	bfbc      	itt	lt
 8004b86:	580b      	ldrlt	r3, [r1, r0]
 8004b88:	18c0      	addlt	r0, r0, r3
 8004b8a:	4770      	bx	lr

08004b8c <__retarget_lock_acquire_recursive>:
 8004b8c:	4770      	bx	lr

08004b8e <__retarget_lock_release_recursive>:
 8004b8e:	4770      	bx	lr

08004b90 <_init>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	bf00      	nop
 8004b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b96:	bc08      	pop	{r3}
 8004b98:	469e      	mov	lr, r3
 8004b9a:	4770      	bx	lr

08004b9c <_fini>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	bf00      	nop
 8004ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba2:	bc08      	pop	{r3}
 8004ba4:	469e      	mov	lr, r3
 8004ba6:	4770      	bx	lr
