
hola1_grafic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08012d38  08012d38  00022d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012de0  08012de0  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08012de0  08012de0  00022de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012de8  08012de8  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012de8  08012de8  00022de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012dec  08012dec  00022dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08012df0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000936c  20000094  08012e84  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009400  08012e84  00039400  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fd09  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000081c0  00000000  00000000  0006fdcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000032c0  00000000  00000000  00077f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002f60  00000000  00000000  0007b250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003627e  00000000  00000000  0007e1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00043199  00000000  00000000  000b442e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012e36f  00000000  00000000  000f75c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00225936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d9ec  00000000  00000000  00225988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012d20 	.word	0x08012d20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	08012d20 	.word	0x08012d20

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4a07      	ldr	r2, [pc, #28]	; (8000574 <vApplicationGetIdleTaskMemory+0x2c>)
 8000558:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <vApplicationGetIdleTaskMemory+0x30>)
 800055e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2280      	movs	r2, #128	; 0x80
 8000564:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	200000b0 	.word	0x200000b0
 8000578:	20000108 	.word	0x20000108

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b5b0      	push	{r4, r5, r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f002 fbf8 	bl	8002d76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f84d 	bl	8000624 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800058a:	f000 f8bd 	bl	8000708 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f001 f86f 	bl	8001670 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000592:	f000 f8eb 	bl	800076c <MX_ADC3_Init>
  MX_CRC_Init();
 8000596:	f000 f93b 	bl	8000810 <MX_CRC_Init>
  MX_DCMI_Init();
 800059a:	f000 f95b 	bl	8000854 <MX_DCMI_Init>
  MX_DMA2D_Init();
 800059e:	f000 f98d 	bl	80008bc <MX_DMA2D_Init>
  MX_ETH_Init();
 80005a2:	f000 f9bd 	bl	8000920 <MX_ETH_Init>
  MX_FMC_Init();
 80005a6:	f001 f813 	bl	80015d0 <MX_FMC_Init>
  MX_I2C1_Init();
 80005aa:	f000 f9fb 	bl	80009a4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80005ae:	f000 fa39 	bl	8000a24 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005b2:	f000 fa77 	bl	8000aa4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80005b6:	f000 faf7 	bl	8000ba8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80005ba:	f000 fb21 	bl	8000c00 <MX_RTC_Init>
  MX_SAI2_Init();
 80005be:	f000 fbc5 	bl	8000d4c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80005c2:	f000 fc6b 	bl	8000e9c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80005c6:	f000 fc89 	bl	8000edc <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80005ca:	f000 fcb7 	bl	8000f3c <MX_SPI2_Init>
  MX_TIM1_Init();
 80005ce:	f000 fcf3 	bl	8000fb8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005d2:	f000 fd9d 	bl	8001110 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d6:	f000 fe11 	bl	80011fc <MX_TIM3_Init>
  MX_TIM5_Init();
 80005da:	f000 fe87 	bl	80012ec <MX_TIM5_Init>
  MX_TIM8_Init();
 80005de:	f000 fefd 	bl	80013dc <MX_TIM8_Init>
  MX_TIM12_Init();
 80005e2:	f000 ff4f 	bl	8001484 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80005e6:	f000 ff93 	bl	8001510 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005ea:	f000 ffc1 	bl	8001570 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80005ee:	f00d f845 	bl	800d67c <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <main+0xa0>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f00f fc81 	bl	800ff10 <osThreadCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a03      	ldr	r2, [pc, #12]	; (8000620 <main+0xa4>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f00f fc59 	bl	800feca <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x9c>
 800061a:	bf00      	nop
 800061c:	08012d44 	.word	0x08012d44
 8000620:	20000b38 	.word	0x20000b38

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f012 fa6e 	bl	8012b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000648:	f006 fa52 	bl	8006af0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <SystemClock_Config+0xdc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <SystemClock_Config+0xdc>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <SystemClock_Config+0xdc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <SystemClock_Config+0xe0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a26      	ldr	r2, [pc, #152]	; (8000704 <SystemClock_Config+0xe0>)
 800066a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <SystemClock_Config+0xe0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800067c:	2309      	movs	r3, #9
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000686:	2301      	movs	r3, #1
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000694:	2319      	movs	r3, #25
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000698:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800069c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006a2:	2309      	movs	r3, #9
 80006a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	4618      	mov	r0, r3
 80006ac:	f006 fb42 	bl	8006d34 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006b6:	f001 f9b5 	bl	8001a24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ba:	f006 fa29 	bl	8006b10 <HAL_PWREx_EnableOverDrive>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006c4:	f001 f9ae 	bl	8001a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2106      	movs	r1, #6
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fdc8 	bl	800727c <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006f2:	f001 f997 	bl	8001a24 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0a2      	sub	sp, #136	; 0x88
 800070c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2284      	movs	r2, #132	; 0x84
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f012 f9fd 	bl	8012b14 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <PeriphCommonClock_Config+0x60>)
 800071c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800071e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000722:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000724:	2305      	movs	r3, #5
 8000726:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800072c:	2303      	movs	r3, #3
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000730:	2301      	movs	r3, #1
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000738:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800073a:	2300      	movs	r3, #0
 800073c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800073e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000742:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000746:	2300      	movs	r3, #0
 8000748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4618      	mov	r0, r3
 8000750:	f006 ffac 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800075a:	f001 f963 	bl	8001a24 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3788      	adds	r7, #136	; 0x88
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	00b00008 	.word	0x00b00008

0800076c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	463b      	mov	r3, r7
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ADC3_Init+0x98>)
 8000780:	4a21      	ldr	r2, [pc, #132]	; (8000808 <MX_ADC3_Init+0x9c>)
 8000782:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_ADC3_Init+0x98>)
 8000786:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800078a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ADC3_Init+0x98>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_ADC3_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_ADC3_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC3_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_ADC3_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_ADC3_Init+0x98>)
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_ADC3_Init+0xa0>)
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC3_Init+0x98>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_ADC3_Init+0x98>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_ADC3_Init+0x98>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_ADC3_Init+0x98>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_ADC3_Init+0x98>)
 80007ce:	f002 fb23 	bl	8002e18 <HAL_ADC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80007d8:	f001 f924 	bl	8001a24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007dc:	2304      	movs	r3, #4
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_ADC3_Init+0x98>)
 80007ee:	f002 fb57 	bl	8002ea0 <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80007f8:	f001 f914 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000308 	.word	0x20000308
 8000808:	40012200 	.word	0x40012200
 800080c:	0f000001 	.word	0x0f000001

08000810 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <MX_CRC_Init+0x3c>)
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <MX_CRC_Init+0x40>)
 8000818:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_CRC_Init+0x3c>)
 800081c:	2200      	movs	r2, #0
 800081e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_CRC_Init+0x3c>)
 8000822:	2200      	movs	r2, #0
 8000824:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_CRC_Init+0x3c>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_CRC_Init+0x3c>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_CRC_Init+0x3c>)
 8000834:	2201      	movs	r2, #1
 8000836:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_CRC_Init+0x3c>)
 800083a:	f002 fe63 	bl	8003504 <HAL_CRC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000844:	f001 f8ee 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000350 	.word	0x20000350
 8000850:	40023000 	.word	0x40023000

08000854 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_DCMI_Init+0x60>)
 800085a:	4a17      	ldr	r2, [pc, #92]	; (80008b8 <MX_DCMI_Init+0x64>)
 800085c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_DCMI_Init+0x60>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_DCMI_Init+0x60>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_DCMI_Init+0x60>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_DCMI_Init+0x60>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000876:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_DCMI_Init+0x60>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <MX_DCMI_Init+0x60>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_DCMI_Init+0x60>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_DCMI_Init+0x60>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_DCMI_Init+0x60>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_DCMI_Init+0x60>)
 8000896:	2200      	movs	r2, #0
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_DCMI_Init+0x60>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_DCMI_Init+0x60>)
 80008a2:	f002 ff19 	bl	80036d8 <HAL_DCMI_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80008ac:	f001 f8ba 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000374 	.word	0x20000374
 80008b8:	50050000 	.word	0x50050000

080008bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <MX_DMA2D_Init+0x60>)
 80008c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008f2:	f003 f805 	bl	8003900 <HAL_DMA2D_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008fc:	f001 f892 	bl	8001a24 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000900:	2101      	movs	r1, #1
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_DMA2D_Init+0x5c>)
 8000904:	f003 f956 	bl	8003bb4 <HAL_DMA2D_ConfigLayer>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800090e:	f001 f889 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200003c4 	.word	0x200003c4
 800091c:	4002b000 	.word	0x4002b000

08000920 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_ETH_Init+0x78>)
 8000926:	4a1d      	ldr	r2, [pc, #116]	; (800099c <MX_ETH_Init+0x7c>)
 8000928:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800092a:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_ETH_Init+0x78>)
 800092c:	2201      	movs	r2, #1
 800092e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_ETH_Init+0x78>)
 8000932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000936:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_ETH_Init+0x78>)
 800093a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800093e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_ETH_Init+0x78>)
 8000942:	2200      	movs	r2, #0
 8000944:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_ETH_Init+0x80>)
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_ETH_Init+0x80>)
 800094e:	2280      	movs	r2, #128	; 0x80
 8000950:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_ETH_Init+0x80>)
 8000954:	22e1      	movs	r2, #225	; 0xe1
 8000956:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_ETH_Init+0x80>)
 800095a:	2200      	movs	r2, #0
 800095c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_ETH_Init+0x80>)
 8000960:	2200      	movs	r2, #0
 8000962:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_ETH_Init+0x80>)
 8000966:	2200      	movs	r2, #0
 8000968:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_ETH_Init+0x78>)
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <MX_ETH_Init+0x80>)
 800096e:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_ETH_Init+0x78>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_ETH_Init+0x78>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_ETH_Init+0x78>)
 800097e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000982:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_ETH_Init+0x78>)
 8000986:	f003 f9a7 	bl	8003cd8 <HAL_ETH_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000990:	f001 f848 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000404 	.word	0x20000404
 800099c:	40028000 	.word	0x40028000
 80009a0:	20000b3c 	.word	0x20000b3c

080009a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <MX_I2C1_Init+0x78>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009b0:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <MX_I2C1_Init+0x7c>)
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009bc:	2201      	movs	r2, #1
 80009be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009e0:	f005 fbf4 	bl	80061cc <HAL_I2C_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ea:	f001 f81b 	bl	8001a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009f2:	f005 fc7b 	bl	80062ec <HAL_I2CEx_ConfigAnalogFilter>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009fc:	f001 f812 	bl	8001a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_I2C1_Init+0x74>)
 8000a04:	f005 fcbd 	bl	8006382 <HAL_I2CEx_ConfigDigitalFilter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f001 f809 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000044c 	.word	0x2000044c
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	00c0eaff 	.word	0x00c0eaff

08000a24 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_I2C3_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <MX_I2C3_Init+0x7c>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a60:	f005 fbb4 	bl	80061cc <HAL_I2C_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a6a:	f000 ffdb 	bl	8001a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a72:	f005 fc3b 	bl	80062ec <HAL_I2CEx_ConfigAnalogFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 ffd2 	bl	8001a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_I2C3_Init+0x74>)
 8000a84:	f005 fc7d 	bl	8006382 <HAL_I2CEx_ConfigDigitalFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 ffc9 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000498 	.word	0x20000498
 8000a9c:	40005c00 	.word	0x40005c00
 8000aa0:	00c0eaff 	.word	0x00c0eaff

08000aa4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08e      	sub	sp, #56	; 0x38
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2234      	movs	r2, #52	; 0x34
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f012 f82f 	bl	8012b14 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000ab6:	4b3a      	ldr	r3, [pc, #232]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000ab8:	4a3a      	ldr	r2, [pc, #232]	; (8000ba4 <MX_LTDC_Init+0x100>)
 8000aba:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000abc:	4b38      	ldr	r3, [pc, #224]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ac2:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ac8:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ace:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000ad4:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000ad6:	2228      	movs	r2, #40	; 0x28
 8000ad8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000ada:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000adc:	2209      	movs	r2, #9
 8000ade:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ae0:	4b2f      	ldr	r3, [pc, #188]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000ae2:	2235      	movs	r2, #53	; 0x35
 8000ae4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000ae8:	220b      	movs	r2, #11
 8000aea:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000aec:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000aee:	f240 2215 	movw	r2, #533	; 0x215
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000af6:	f240 121b 	movw	r2, #283	; 0x11b
 8000afa:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000afc:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000afe:	f240 2235 	movw	r2, #565	; 0x235
 8000b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000b06:	f240 121d 	movw	r2, #285	; 0x11d
 8000b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b0c:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b1c:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b24:	481e      	ldr	r0, [pc, #120]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000b26:	f005 fc79 	bl	800641c <HAL_LTDC_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000b30:	f000 ff78 	bl	8001a24 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000b38:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b3c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000b42:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b46:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000b4c:	23ff      	movs	r3, #255	; 0xff
 8000b4e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b58:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000b5e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000b64:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000b6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2200      	movs	r2, #0
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_LTDC_Init+0xfc>)
 8000b8a:	f005 fdd9 	bl	8006740 <HAL_LTDC_ConfigLayer>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000b94:	f000 ff46 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	3738      	adds	r7, #56	; 0x38
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200004e4 	.word	0x200004e4
 8000ba4:	40016800 	.word	0x40016800

08000ba8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_QUADSPI_Init+0x50>)
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <MX_QUADSPI_Init+0x54>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_QUADSPI_Init+0x50>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_QUADSPI_Init+0x50>)
 8000bba:	2204      	movs	r2, #4
 8000bbc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_QUADSPI_Init+0x50>)
 8000bc0:	2210      	movs	r2, #16
 8000bc2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_QUADSPI_Init+0x50>)
 8000bc6:	2218      	movs	r2, #24
 8000bc8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_QUADSPI_Init+0x50>)
 8000bcc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000bd0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_QUADSPI_Init+0x50>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <MX_QUADSPI_Init+0x50>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_QUADSPI_Init+0x50>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_QUADSPI_Init+0x50>)
 8000be6:	f005 ffe3 	bl	8006bb0 <HAL_QSPI_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000bf0:	f000 ff18 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000058c 	.word	0x2000058c
 8000bfc:	a0001000 	.word	0xa0001000

08000c00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b092      	sub	sp, #72	; 0x48
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
 8000c16:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	222c      	movs	r2, #44	; 0x2c
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f011 ff76 	bl	8012b14 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c28:	4b46      	ldr	r3, [pc, #280]	; (8000d44 <MX_RTC_Init+0x144>)
 8000c2a:	4a47      	ldr	r2, [pc, #284]	; (8000d48 <MX_RTC_Init+0x148>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c2e:	4b45      	ldr	r3, [pc, #276]	; (8000d44 <MX_RTC_Init+0x144>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c34:	4b43      	ldr	r3, [pc, #268]	; (8000d44 <MX_RTC_Init+0x144>)
 8000c36:	227f      	movs	r2, #127	; 0x7f
 8000c38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c3a:	4b42      	ldr	r3, [pc, #264]	; (8000d44 <MX_RTC_Init+0x144>)
 8000c3c:	22ff      	movs	r2, #255	; 0xff
 8000c3e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c40:	4b40      	ldr	r3, [pc, #256]	; (8000d44 <MX_RTC_Init+0x144>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c46:	4b3f      	ldr	r3, [pc, #252]	; (8000d44 <MX_RTC_Init+0x144>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c4c:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <MX_RTC_Init+0x144>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c52:	483c      	ldr	r0, [pc, #240]	; (8000d44 <MX_RTC_Init+0x144>)
 8000c54:	f007 fa5e 	bl	8008114 <HAL_RTC_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000c5e:	f000 fee1 	bl	8001a24 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c80:	2201      	movs	r2, #1
 8000c82:	4619      	mov	r1, r3
 8000c84:	482f      	ldr	r0, [pc, #188]	; (8000d44 <MX_RTC_Init+0x144>)
 8000c86:	f007 fad7 	bl	8008238 <HAL_RTC_SetTime>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8000c90:	f000 fec8 	bl	8001a24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c94:	2301      	movs	r3, #1
 8000c96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4823      	ldr	r0, [pc, #140]	; (8000d44 <MX_RTC_Init+0x144>)
 8000cb6:	f007 fb7d 	bl	80083b4 <HAL_RTC_SetDate>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8000cc0:	f000 feb0 	bl	8001a24 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8000cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4812      	ldr	r0, [pc, #72]	; (8000d44 <MX_RTC_Init+0x144>)
 8000cfc:	f007 fc02 	bl	8008504 <HAL_RTC_SetAlarm>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8000d06:	f000 fe8d 	bl	8001a24 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	2201      	movs	r2, #1
 8000d14:	4619      	mov	r1, r3
 8000d16:	480b      	ldr	r0, [pc, #44]	; (8000d44 <MX_RTC_Init+0x144>)
 8000d18:	f007 fbf4 	bl	8008504 <HAL_RTC_SetAlarm>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8000d22:	f000 fe7f 	bl	8001a24 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000d26:	2202      	movs	r2, #2
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_RTC_Init+0x144>)
 8000d2c:	f007 fd74 	bl	8008818 <HAL_RTCEx_SetTimeStamp>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8000d36:	f000 fe75 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3748      	adds	r7, #72	; 0x48
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200005d8 	.word	0x200005d8
 8000d48:	40002800 	.word	0x40002800

08000d4c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000d50:	4b4d      	ldr	r3, [pc, #308]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d52:	4a4e      	ldr	r2, [pc, #312]	; (8000e8c <MX_SAI2_Init+0x140>)
 8000d54:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d56:	4b4c      	ldr	r3, [pc, #304]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000d5c:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d62:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d64:	2240      	movs	r2, #64	; 0x40
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d68:	4b47      	ldr	r3, [pc, #284]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d6e:	4b46      	ldr	r3, [pc, #280]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d74:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d7a:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d80:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d86:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d8c:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d8e:	4a40      	ldr	r2, [pc, #256]	; (8000e90 <MX_SAI2_Init+0x144>)
 8000d90:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d92:	4b3d      	ldr	r3, [pc, #244]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d98:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d9e:	4b3a      	ldr	r3, [pc, #232]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000da4:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000daa:	4b37      	ldr	r3, [pc, #220]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000dac:	2208      	movs	r2, #8
 8000dae:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000db0:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000db6:	4b34      	ldr	r3, [pc, #208]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000dbc:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000dc2:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000dce:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000dd4:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000dda:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000de0:	4829      	ldr	r0, [pc, #164]	; (8000e88 <MX_SAI2_Init+0x13c>)
 8000de2:	f007 fd6f 	bl	80088c4 <HAL_SAI_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000dec:	f000 fe1a 	bl	8001a24 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000df2:	4a29      	ldr	r2, [pc, #164]	; (8000e98 <MX_SAI2_Init+0x14c>)
 8000df4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000dfe:	2203      	movs	r2, #3
 8000e00:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000e02:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e04:	2240      	movs	r2, #64	; 0x40
 8000e06:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e08:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e40:	2208      	movs	r2, #8
 8000e42:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <MX_SAI2_Init+0x148>)
 8000e76:	f007 fd25 	bl	80088c4 <HAL_SAI_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000e80:	f000 fdd0 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	200005f8 	.word	0x200005f8
 8000e8c:	40015c04 	.word	0x40015c04
 8000e90:	0002ee00 	.word	0x0002ee00
 8000e94:	2000067c 	.word	0x2000067c
 8000e98:	40015c24 	.word	0x40015c24

08000e9c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_SDMMC1_SD_Init+0x38>)
 8000ea2:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <MX_SDMMC1_SD_Init+0x38>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_SDMMC1_SD_Init+0x38>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <MX_SDMMC1_SD_Init+0x38>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_SDMMC1_SD_Init+0x38>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <MX_SDMMC1_SD_Init+0x38>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <MX_SDMMC1_SD_Init+0x38>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	20000700 	.word	0x20000700
 8000ed8:	40012c00 	.word	0x40012c00

08000edc <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000ee2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000ee6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000f00:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_SPDIFRX_Init+0x5c>)
 8000f26:	f008 ff59 	bl	8009ddc <HAL_SPDIFRX_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000f30:	f000 fd78 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000784 	.word	0x20000784

08000f3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <MX_SPI2_Init+0x78>)
 8000f44:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f4c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f54:	4b16      	ldr	r3, [pc, #88]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f56:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f5a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f96:	2208      	movs	r2, #8
 8000f98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_SPI2_Init+0x74>)
 8000f9c:	f008 ff7a 	bl	8009e94 <HAL_SPI_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000fa6:	f000 fd3d 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200007d0 	.word	0x200007d0
 8000fb4:	40003800 	.word	0x40003800

08000fb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b09a      	sub	sp, #104	; 0x68
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fbe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	222c      	movs	r2, #44	; 0x2c
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f011 fd8e 	bl	8012b14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ff8:	4b43      	ldr	r3, [pc, #268]	; (8001108 <MX_TIM1_Init+0x150>)
 8000ffa:	4a44      	ldr	r2, [pc, #272]	; (800110c <MX_TIM1_Init+0x154>)
 8000ffc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ffe:	4b42      	ldr	r3, [pc, #264]	; (8001108 <MX_TIM1_Init+0x150>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b40      	ldr	r3, [pc, #256]	; (8001108 <MX_TIM1_Init+0x150>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800100a:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <MX_TIM1_Init+0x150>)
 800100c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001010:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001012:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <MX_TIM1_Init+0x150>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001018:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <MX_TIM1_Init+0x150>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101e:	4b3a      	ldr	r3, [pc, #232]	; (8001108 <MX_TIM1_Init+0x150>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001024:	4838      	ldr	r0, [pc, #224]	; (8001108 <MX_TIM1_Init+0x150>)
 8001026:	f008 ffe0 	bl	8009fea <HAL_TIM_Base_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001030:	f000 fcf8 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001038:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800103a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800103e:	4619      	mov	r1, r3
 8001040:	4831      	ldr	r0, [pc, #196]	; (8001108 <MX_TIM1_Init+0x150>)
 8001042:	f009 fb2b 	bl	800a69c <HAL_TIM_ConfigClockSource>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800104c:	f000 fcea 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001050:	482d      	ldr	r0, [pc, #180]	; (8001108 <MX_TIM1_Init+0x150>)
 8001052:	f009 f899 	bl	800a188 <HAL_TIM_PWM_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800105c:	f000 fce2 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800106c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001070:	4619      	mov	r1, r3
 8001072:	4825      	ldr	r0, [pc, #148]	; (8001108 <MX_TIM1_Init+0x150>)
 8001074:	f009 ff9c 	bl	800afb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800107e:	f000 fcd1 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001082:	2360      	movs	r3, #96	; 0x60
 8001084:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108a:	2300      	movs	r3, #0
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800108e:	2300      	movs	r3, #0
 8001090:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	4818      	ldr	r0, [pc, #96]	; (8001108 <MX_TIM1_Init+0x150>)
 80010a8:	f009 f9e4 	bl	800a474 <HAL_TIM_PWM_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010b2:	f000 fcb7 	bl	8001a24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <MX_TIM1_Init+0x150>)
 80010ec:	f009 ffee 	bl	800b0cc <HAL_TIMEx_ConfigBreakDeadTime>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80010f6:	f000 fc95 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <MX_TIM1_Init+0x150>)
 80010fc:	f001 fa9a 	bl	8002634 <HAL_TIM_MspPostInit>

}
 8001100:	bf00      	nop
 8001102:	3768      	adds	r7, #104	; 0x68
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000834 	.word	0x20000834
 800110c:	40010000 	.word	0x40010000

08001110 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	; 0x38
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	615a      	str	r2, [r3, #20]
 8001140:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <MX_TIM2_Init+0xe8>)
 8001144:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001148:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <MX_TIM2_Init+0xe8>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MX_TIM2_Init+0xe8>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <MX_TIM2_Init+0xe8>)
 8001158:	f04f 32ff 	mov.w	r2, #4294967295
 800115c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <MX_TIM2_Init+0xe8>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_TIM2_Init+0xe8>)
 8001166:	2200      	movs	r2, #0
 8001168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800116a:	4823      	ldr	r0, [pc, #140]	; (80011f8 <MX_TIM2_Init+0xe8>)
 800116c:	f008 ff3d 	bl	8009fea <HAL_TIM_Base_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001176:	f000 fc55 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800117a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001180:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001184:	4619      	mov	r1, r3
 8001186:	481c      	ldr	r0, [pc, #112]	; (80011f8 <MX_TIM2_Init+0xe8>)
 8001188:	f009 fa88 	bl	800a69c <HAL_TIM_ConfigClockSource>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001192:	f000 fc47 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001196:	4818      	ldr	r0, [pc, #96]	; (80011f8 <MX_TIM2_Init+0xe8>)
 8001198:	f008 fff6 	bl	800a188 <HAL_TIM_PWM_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011a2:	f000 fc3f 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	4810      	ldr	r0, [pc, #64]	; (80011f8 <MX_TIM2_Init+0xe8>)
 80011b6:	f009 fefb 	bl	800afb0 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011c0:	f000 fc30 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c4:	2360      	movs	r3, #96	; 0x60
 80011c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	4619      	mov	r1, r3
 80011da:	4807      	ldr	r0, [pc, #28]	; (80011f8 <MX_TIM2_Init+0xe8>)
 80011dc:	f009 f94a 	bl	800a474 <HAL_TIM_PWM_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011e6:	f000 fc1d 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <MX_TIM2_Init+0xe8>)
 80011ec:	f001 fa22 	bl	8002634 <HAL_TIM_MspPostInit>

}
 80011f0:	bf00      	nop
 80011f2:	3738      	adds	r7, #56	; 0x38
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000880 	.word	0x20000880

080011fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	; 0x38
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121c:	463b      	mov	r3, r7
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
 800122a:	615a      	str	r2, [r3, #20]
 800122c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800122e:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <MX_TIM3_Init+0xe8>)
 8001230:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <MX_TIM3_Init+0xec>)
 8001232:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001234:	4b2b      	ldr	r3, [pc, #172]	; (80012e4 <MX_TIM3_Init+0xe8>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <MX_TIM3_Init+0xe8>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <MX_TIM3_Init+0xe8>)
 8001242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001246:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_TIM3_Init+0xe8>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <MX_TIM3_Init+0xe8>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001254:	4823      	ldr	r0, [pc, #140]	; (80012e4 <MX_TIM3_Init+0xe8>)
 8001256:	f008 fec8 	bl	8009fea <HAL_TIM_Base_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001260:	f000 fbe0 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	4619      	mov	r1, r3
 8001270:	481c      	ldr	r0, [pc, #112]	; (80012e4 <MX_TIM3_Init+0xe8>)
 8001272:	f009 fa13 	bl	800a69c <HAL_TIM_ConfigClockSource>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800127c:	f000 fbd2 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001280:	4818      	ldr	r0, [pc, #96]	; (80012e4 <MX_TIM3_Init+0xe8>)
 8001282:	f008 ff81 	bl	800a188 <HAL_TIM_PWM_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800128c:	f000 fbca 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4811      	ldr	r0, [pc, #68]	; (80012e4 <MX_TIM3_Init+0xe8>)
 80012a0:	f009 fe86 	bl	800afb0 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012aa:	f000 fbbb 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ae:	2360      	movs	r3, #96	; 0x60
 80012b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	4619      	mov	r1, r3
 80012c4:	4807      	ldr	r0, [pc, #28]	; (80012e4 <MX_TIM3_Init+0xe8>)
 80012c6:	f009 f8d5 	bl	800a474 <HAL_TIM_PWM_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80012d0:	f000 fba8 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012d4:	4803      	ldr	r0, [pc, #12]	; (80012e4 <MX_TIM3_Init+0xe8>)
 80012d6:	f001 f9ad 	bl	8002634 <HAL_TIM_MspPostInit>

}
 80012da:	bf00      	nop
 80012dc:	3738      	adds	r7, #56	; 0x38
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200008cc 	.word	0x200008cc
 80012e8:	40000400 	.word	0x40000400

080012ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
 800131a:	615a      	str	r2, [r3, #20]
 800131c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800131e:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001320:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <MX_TIM5_Init+0xec>)
 8001322:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <MX_TIM5_Init+0xe8>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001332:	f04f 32ff 	mov.w	r2, #4294967295
 8001336:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <MX_TIM5_Init+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001344:	4823      	ldr	r0, [pc, #140]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001346:	f008 fe50 	bl	8009fea <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001350:	f000 fb68 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800135a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135e:	4619      	mov	r1, r3
 8001360:	481c      	ldr	r0, [pc, #112]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001362:	f009 f99b 	bl	800a69c <HAL_TIM_ConfigClockSource>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800136c:	f000 fb5a 	bl	8001a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001370:	4818      	ldr	r0, [pc, #96]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001372:	f008 ff09 	bl	800a188 <HAL_TIM_PWM_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800137c:	f000 fb52 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <MX_TIM5_Init+0xe8>)
 8001390:	f009 fe0e 	bl	800afb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800139a:	f000 fb43 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139e:	2360      	movs	r3, #96	; 0x60
 80013a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ae:	463b      	mov	r3, r7
 80013b0:	220c      	movs	r2, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM5_Init+0xe8>)
 80013b6:	f009 f85d 	bl	800a474 <HAL_TIM_PWM_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80013c0:	f000 fb30 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM5_Init+0xe8>)
 80013c6:	f001 f935 	bl	8002634 <HAL_TIM_MspPostInit>

}
 80013ca:	bf00      	nop
 80013cc:	3738      	adds	r7, #56	; 0x38
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000918 	.word	0x20000918
 80013d8:	40000c00 	.word	0x40000c00

080013dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <MX_TIM8_Init+0xa0>)
 80013fc:	4a20      	ldr	r2, [pc, #128]	; (8001480 <MX_TIM8_Init+0xa4>)
 80013fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <MX_TIM8_Init+0xa0>)
 8001402:	2200      	movs	r2, #0
 8001404:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <MX_TIM8_Init+0xa0>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <MX_TIM8_Init+0xa0>)
 800140e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001412:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <MX_TIM8_Init+0xa0>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <MX_TIM8_Init+0xa0>)
 800141c:	2200      	movs	r2, #0
 800141e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <MX_TIM8_Init+0xa0>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001426:	4815      	ldr	r0, [pc, #84]	; (800147c <MX_TIM8_Init+0xa0>)
 8001428:	f008 fddf 	bl	8009fea <HAL_TIM_Base_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001432:	f000 faf7 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4619      	mov	r1, r3
 8001442:	480e      	ldr	r0, [pc, #56]	; (800147c <MX_TIM8_Init+0xa0>)
 8001444:	f009 f92a 	bl	800a69c <HAL_TIM_ConfigClockSource>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800144e:	f000 fae9 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <MX_TIM8_Init+0xa0>)
 8001464:	f009 fda4 	bl	800afb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800146e:	f000 fad9 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000964 	.word	0x20000964
 8001480:	40010400 	.word	0x40010400

08001484 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]
 800149a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_TIM12_Init+0x84>)
 800149e:	4a1b      	ldr	r2, [pc, #108]	; (800150c <MX_TIM12_Init+0x88>)
 80014a0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_TIM12_Init+0x84>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_TIM12_Init+0x84>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <MX_TIM12_Init+0x84>)
 80014b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b6:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_TIM12_Init+0x84>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <MX_TIM12_Init+0x84>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80014c2:	4811      	ldr	r0, [pc, #68]	; (8001508 <MX_TIM12_Init+0x84>)
 80014c4:	f008 fe60 	bl	800a188 <HAL_TIM_PWM_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80014ce:	f000 faa9 	bl	8001a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d2:	2360      	movs	r3, #96	; 0x60
 80014d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2200      	movs	r2, #0
 80014e6:	4619      	mov	r1, r3
 80014e8:	4807      	ldr	r0, [pc, #28]	; (8001508 <MX_TIM12_Init+0x84>)
 80014ea:	f008 ffc3 	bl	800a474 <HAL_TIM_PWM_ConfigChannel>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80014f4:	f000 fa96 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <MX_TIM12_Init+0x84>)
 80014fa:	f001 f89b 	bl	8002634 <HAL_TIM_MspPostInit>

}
 80014fe:	bf00      	nop
 8001500:	3720      	adds	r7, #32
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200009b0 	.word	0x200009b0
 800150c:	40001800 	.word	0x40001800

08001510 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_USART1_UART_Init+0x58>)
 8001516:	4a15      	ldr	r2, [pc, #84]	; (800156c <MX_USART1_UART_Init+0x5c>)
 8001518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_USART1_UART_Init+0x58>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART1_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_USART1_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART1_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART1_UART_Init+0x58>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART1_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART1_UART_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART1_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART1_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART1_UART_Init+0x58>)
 8001554:	f009 fe56 	bl	800b204 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800155e:	f000 fa61 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200009fc 	.word	0x200009fc
 800156c:	40011000 	.word	0x40011000

08001570 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_USART6_UART_Init+0x58>)
 8001576:	4a15      	ldr	r2, [pc, #84]	; (80015cc <MX_USART6_UART_Init+0x5c>)
 8001578:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_USART6_UART_Init+0x58>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_USART6_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_USART6_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_USART6_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USART6_UART_Init+0x58>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <MX_USART6_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USART6_UART_Init+0x58>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015a6:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <MX_USART6_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USART6_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_USART6_UART_Init+0x58>)
 80015b4:	f009 fe26 	bl	800b204 <HAL_UART_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80015be:	f000 fa31 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000a80 	.word	0x20000a80
 80015cc:	40011400 	.word	0x40011400

080015d0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	615a      	str	r2, [r3, #20]
 80015e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <MX_FMC_Init+0x98>)
 80015ea:	4a20      	ldr	r2, [pc, #128]	; (800166c <MX_FMC_Init+0x9c>)
 80015ec:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <MX_FMC_Init+0x98>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <MX_FMC_Init+0x98>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <MX_FMC_Init+0x98>)
 80015fc:	2204      	movs	r2, #4
 80015fe:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <MX_FMC_Init+0x98>)
 8001602:	2210      	movs	r2, #16
 8001604:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <MX_FMC_Init+0x98>)
 8001608:	2240      	movs	r2, #64	; 0x40
 800160a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_FMC_Init+0x98>)
 800160e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001612:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_FMC_Init+0x98>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_FMC_Init+0x98>)
 800161c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001620:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_FMC_Init+0x98>)
 8001624:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_FMC_Init+0x98>)
 800162c:	2200      	movs	r2, #0
 800162e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001630:	2302      	movs	r3, #2
 8001632:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001634:	2307      	movs	r3, #7
 8001636:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001638:	2304      	movs	r3, #4
 800163a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800163c:	2307      	movs	r3, #7
 800163e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001640:	2303      	movs	r3, #3
 8001642:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001648:	2302      	movs	r3, #2
 800164a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_FMC_Init+0x98>)
 8001652:	f008 fb8e 	bl	8009d72 <HAL_SDRAM_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800165c:	f000 f9e2 	bl	8001a24 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001660:	bf00      	nop
 8001662:	3720      	adds	r7, #32
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000b04 	.word	0x20000b04
 800166c:	a0000140 	.word	0xa0000140

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b090      	sub	sp, #64	; 0x40
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001686:	4bb0      	ldr	r3, [pc, #704]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4aaf      	ldr	r2, [pc, #700]	; (8001948 <MX_GPIO_Init+0x2d8>)
 800168c:	f043 0310 	orr.w	r3, r3, #16
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4bad      	ldr	r3, [pc, #692]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
 800169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800169e:	4baa      	ldr	r3, [pc, #680]	; (8001948 <MX_GPIO_Init+0x2d8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4aa9      	ldr	r2, [pc, #676]	; (8001948 <MX_GPIO_Init+0x2d8>)
 80016a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4ba7      	ldr	r3, [pc, #668]	; (8001948 <MX_GPIO_Init+0x2d8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4ba4      	ldr	r3, [pc, #656]	; (8001948 <MX_GPIO_Init+0x2d8>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4aa3      	ldr	r2, [pc, #652]	; (8001948 <MX_GPIO_Init+0x2d8>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4ba1      	ldr	r3, [pc, #644]	; (8001948 <MX_GPIO_Init+0x2d8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	623b      	str	r3, [r7, #32]
 80016cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ce:	4b9e      	ldr	r3, [pc, #632]	; (8001948 <MX_GPIO_Init+0x2d8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a9d      	ldr	r2, [pc, #628]	; (8001948 <MX_GPIO_Init+0x2d8>)
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b9b      	ldr	r3, [pc, #620]	; (8001948 <MX_GPIO_Init+0x2d8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e6:	4b98      	ldr	r3, [pc, #608]	; (8001948 <MX_GPIO_Init+0x2d8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a97      	ldr	r2, [pc, #604]	; (8001948 <MX_GPIO_Init+0x2d8>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b95      	ldr	r3, [pc, #596]	; (8001948 <MX_GPIO_Init+0x2d8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	61bb      	str	r3, [r7, #24]
 80016fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b92      	ldr	r3, [pc, #584]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a91      	ldr	r2, [pc, #580]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b8f      	ldr	r3, [pc, #572]	; (8001948 <MX_GPIO_Init+0x2d8>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001716:	4b8c      	ldr	r3, [pc, #560]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a8b      	ldr	r2, [pc, #556]	; (8001948 <MX_GPIO_Init+0x2d8>)
 800171c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b89      	ldr	r3, [pc, #548]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800172e:	4b86      	ldr	r3, [pc, #536]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a85      	ldr	r2, [pc, #532]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b83      	ldr	r3, [pc, #524]	; (8001948 <MX_GPIO_Init+0x2d8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001746:	4b80      	ldr	r3, [pc, #512]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a7f      	ldr	r2, [pc, #508]	; (8001948 <MX_GPIO_Init+0x2d8>)
 800174c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b7d      	ldr	r3, [pc, #500]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800175e:	4b7a      	ldr	r3, [pc, #488]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a79      	ldr	r2, [pc, #484]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001764:	f043 0320 	orr.w	r3, r3, #32
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b77      	ldr	r3, [pc, #476]	; (8001948 <MX_GPIO_Init+0x2d8>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0320 	and.w	r3, r3, #32
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001776:	4b74      	ldr	r3, [pc, #464]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a73      	ldr	r2, [pc, #460]	; (8001948 <MX_GPIO_Init+0x2d8>)
 800177c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b71      	ldr	r3, [pc, #452]	; (8001948 <MX_GPIO_Init+0x2d8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	2120      	movs	r1, #32
 8001792:	486e      	ldr	r0, [pc, #440]	; (800194c <MX_GPIO_Init+0x2dc>)
 8001794:	f003 f8ca 	bl	800492c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	210c      	movs	r1, #12
 800179c:	486c      	ldr	r0, [pc, #432]	; (8001950 <MX_GPIO_Init+0x2e0>)
 800179e:	f003 f8c5 	bl	800492c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2108      	movs	r1, #8
 80017a6:	486b      	ldr	r0, [pc, #428]	; (8001954 <MX_GPIO_Init+0x2e4>)
 80017a8:	f003 f8c0 	bl	800492c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b2:	4867      	ldr	r0, [pc, #412]	; (8001950 <MX_GPIO_Init+0x2e0>)
 80017b4:	f003 f8ba 	bl	800492c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017be:	4866      	ldr	r0, [pc, #408]	; (8001958 <MX_GPIO_Init+0x2e8>)
 80017c0:	f003 f8b4 	bl	800492c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	21c8      	movs	r1, #200	; 0xc8
 80017c8:	4864      	ldr	r0, [pc, #400]	; (800195c <MX_GPIO_Init+0x2ec>)
 80017ca:	f003 f8af 	bl	800492c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80017ce:	2308      	movs	r3, #8
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d2:	2300      	movs	r3, #0
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017de:	4619      	mov	r1, r3
 80017e0:	485f      	ldr	r0, [pc, #380]	; (8001960 <MX_GPIO_Init+0x2f0>)
 80017e2:	f002 fedf 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80017e6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017f8:	230a      	movs	r3, #10
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001800:	4619      	mov	r1, r3
 8001802:	4858      	ldr	r0, [pc, #352]	; (8001964 <MX_GPIO_Init+0x2f4>)
 8001804:	f002 fece 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800180e:	2300      	movs	r3, #0
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181a:	4619      	mov	r1, r3
 800181c:	4852      	ldr	r0, [pc, #328]	; (8001968 <MX_GPIO_Init+0x2f8>)
 800181e:	f002 fec1 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001822:	2340      	movs	r3, #64	; 0x40
 8001824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001826:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001834:	4619      	mov	r1, r3
 8001836:	4845      	ldr	r0, [pc, #276]	; (800194c <MX_GPIO_Init+0x2dc>)
 8001838:	f002 feb4 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800183c:	2320      	movs	r3, #32
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001850:	4619      	mov	r1, r3
 8001852:	483e      	ldr	r0, [pc, #248]	; (800194c <MX_GPIO_Init+0x2dc>)
 8001854:	f002 fea6 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001858:	f241 030c 	movw	r3, #4108	; 0x100c
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800186a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800186e:	4619      	mov	r1, r3
 8001870:	4837      	ldr	r0, [pc, #220]	; (8001950 <MX_GPIO_Init+0x2e0>)
 8001872:	f002 fe97 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187c:	2300      	movs	r3, #0
 800187e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001888:	4619      	mov	r1, r3
 800188a:	4838      	ldr	r0, [pc, #224]	; (800196c <MX_GPIO_Init+0x2fc>)
 800188c:	f002 fe8a 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001890:	2308      	movs	r3, #8
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80018a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a4:	4619      	mov	r1, r3
 80018a6:	482b      	ldr	r0, [pc, #172]	; (8001954 <MX_GPIO_Init+0x2e4>)
 80018a8:	f002 fe7c 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018ac:	2310      	movs	r3, #16
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	2300      	movs	r3, #0
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018bc:	4619      	mov	r1, r3
 80018be:	4823      	ldr	r0, [pc, #140]	; (800194c <MX_GPIO_Init+0x2dc>)
 80018c0:	f002 fe70 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80018c4:	f248 0304 	movw	r3, #32772	; 0x8004
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d6:	4619      	mov	r1, r3
 80018d8:	481f      	ldr	r0, [pc, #124]	; (8001958 <MX_GPIO_Init+0x2e8>)
 80018da:	f002 fe63 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80018de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018f4:	4619      	mov	r1, r3
 80018f6:	4818      	ldr	r0, [pc, #96]	; (8001958 <MX_GPIO_Init+0x2e8>)
 80018f8:	f002 fe54 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80018fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001902:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001910:	4619      	mov	r1, r3
 8001912:	480f      	ldr	r0, [pc, #60]	; (8001950 <MX_GPIO_Init+0x2e0>)
 8001914:	f002 fe46 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001918:	2310      	movs	r3, #16
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001928:	230a      	movs	r3, #10
 800192a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001930:	4619      	mov	r1, r3
 8001932:	4809      	ldr	r0, [pc, #36]	; (8001958 <MX_GPIO_Init+0x2e8>)
 8001934:	f002 fe36 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001938:	23c8      	movs	r3, #200	; 0xc8
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
 8001944:	e014      	b.n	8001970 <MX_GPIO_Init+0x300>
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40020c00 	.word	0x40020c00
 8001950:	40022000 	.word	0x40022000
 8001954:	40022800 	.word	0x40022800
 8001958:	40021c00 	.word	0x40021c00
 800195c:	40021800 	.word	0x40021800
 8001960:	40021000 	.word	0x40021000
 8001964:	40020400 	.word	0x40020400
 8001968:	40022400 	.word	0x40022400
 800196c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001978:	4619      	mov	r1, r3
 800197a:	4819      	ldr	r0, [pc, #100]	; (80019e0 <MX_GPIO_Init+0x370>)
 800197c:	f002 fe12 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001980:	2305      	movs	r3, #5
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001990:	230a      	movs	r3, #10
 8001992:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001998:	4619      	mov	r1, r3
 800199a:	4812      	ldr	r0, [pc, #72]	; (80019e4 <MX_GPIO_Init+0x374>)
 800199c:	f002 fe02 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80019a0:	2304      	movs	r3, #4
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	4619      	mov	r1, r3
 80019b2:	480b      	ldr	r0, [pc, #44]	; (80019e0 <MX_GPIO_Init+0x370>)
 80019b4:	f002 fdf6 	bl	80045a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80019b8:	2328      	movs	r3, #40	; 0x28
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019c8:	230a      	movs	r3, #10
 80019ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d0:	4619      	mov	r1, r3
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_GPIO_Init+0x378>)
 80019d4:	f002 fde6 	bl	80045a4 <HAL_GPIO_Init>

}
 80019d8:	bf00      	nop
 80019da:	3740      	adds	r7, #64	; 0x40
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021800 	.word	0x40021800
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40020000 	.word	0x40020000

080019ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80019f4:	f010 fd50 	bl	8012498 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f00e fad5 	bl	800ffa8 <osDelay>
 80019fe:	e7fb      	b.n	80019f8 <StartDefaultTask+0xc>

08001a00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a12:	f001 f9bd 	bl	8002d90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40001000 	.word	0x40001000

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <Error_Handler+0x8>
	...

08001a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	210f      	movs	r1, #15
 8001a6a:	f06f 0001 	mvn.w	r0, #1
 8001a6e:	f001 fd1f 	bl	80034b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <HAL_ADC_MspInit+0xa4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d13c      	bne.n	8001b1c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <HAL_ADC_MspInit+0xa8>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <HAL_ADC_MspInit+0xa8>)
 8001aa8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_ADC_MspInit+0xa8>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_ADC_MspInit+0xa8>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <HAL_ADC_MspInit+0xa8>)
 8001ac0:	f043 0320 	orr.w	r3, r3, #32
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_ADC_MspInit+0xa8>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_ADC_MspInit+0xa8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a14      	ldr	r2, [pc, #80]	; (8001b28 <HAL_ADC_MspInit+0xa8>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_ADC_MspInit+0xa8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001aea:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001aee:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af0:	2303      	movs	r3, #3
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	480b      	ldr	r0, [pc, #44]	; (8001b2c <HAL_ADC_MspInit+0xac>)
 8001b00:	f002 fd50 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001b04:	2301      	movs	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001b18:	f002 fd44 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b1c:	bf00      	nop
 8001b1e:	3728      	adds	r7, #40	; 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40012200 	.word	0x40012200
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40021400 	.word	0x40021400
 8001b30:	40020000 	.word	0x40020000

08001b34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_CRC_MspInit+0x38>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d10b      	bne.n	8001b5e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_CRC_MspInit+0x3c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a09      	ldr	r2, [pc, #36]	; (8001b70 <HAL_CRC_MspInit+0x3c>)
 8001b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_CRC_MspInit+0x3c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023000 	.word	0x40023000
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	; 0x38
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a50      	ldr	r2, [pc, #320]	; (8001cd4 <HAL_DCMI_MspInit+0x160>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	f040 809a 	bne.w	8001ccc <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001b98:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	4a4e      	ldr	r2, [pc, #312]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6353      	str	r3, [r2, #52]	; 0x34
 8001ba4:	4b4c      	ldr	r3, [pc, #304]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	623b      	str	r3, [r7, #32]
 8001bae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb0:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	4a48      	ldr	r2, [pc, #288]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbc:	4b46      	ldr	r3, [pc, #280]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc8:	4b43      	ldr	r3, [pc, #268]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	4a42      	ldr	r2, [pc, #264]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001bce:	f043 0308 	orr.w	r3, r3, #8
 8001bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd4:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001be0:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	4a3c      	ldr	r2, [pc, #240]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bea:	6313      	str	r3, [r2, #48]	; 0x30
 8001bec:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf8:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	4a36      	ldr	r2, [pc, #216]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c02:	6313      	str	r3, [r2, #48]	; 0x30
 8001c04:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	4a30      	ldr	r2, [pc, #192]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_DCMI_MspInit+0x164>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001c28:	2360      	movs	r3, #96	; 0x60
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c38:	230d      	movs	r3, #13
 8001c3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c40:	4619      	mov	r1, r3
 8001c42:	4826      	ldr	r0, [pc, #152]	; (8001cdc <HAL_DCMI_MspInit+0x168>)
 8001c44:	f002 fcae 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2300      	movs	r3, #0
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c58:	230d      	movs	r3, #13
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001c5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c60:	4619      	mov	r1, r3
 8001c62:	481f      	ldr	r0, [pc, #124]	; (8001ce0 <HAL_DCMI_MspInit+0x16c>)
 8001c64:	f002 fc9e 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c7a:	230d      	movs	r3, #13
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c82:	4619      	mov	r1, r3
 8001c84:	4817      	ldr	r0, [pc, #92]	; (8001ce4 <HAL_DCMI_MspInit+0x170>)
 8001c86:	f002 fc8d 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001c8a:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c9c:	230d      	movs	r3, #13
 8001c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4810      	ldr	r0, [pc, #64]	; (8001ce8 <HAL_DCMI_MspInit+0x174>)
 8001ca8:	f002 fc7c 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001cac:	2350      	movs	r3, #80	; 0x50
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cbc:	230d      	movs	r3, #13
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4809      	ldr	r0, [pc, #36]	; (8001cec <HAL_DCMI_MspInit+0x178>)
 8001cc8:	f002 fc6c 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001ccc:	bf00      	nop
 8001cce:	3738      	adds	r7, #56	; 0x38
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	50050000 	.word	0x50050000
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40020c00 	.word	0x40020c00
 8001ce4:	40021800 	.word	0x40021800
 8001ce8:	40021c00 	.word	0x40021c00
 8001cec:	40020000 	.word	0x40020000

08001cf0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <HAL_DMA2D_MspInit+0x44>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d113      	bne.n	8001d2a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d02:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <HAL_DMA2D_MspInit+0x48>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <HAL_DMA2D_MspInit+0x48>)
 8001d08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_DMA2D_MspInit+0x48>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2105      	movs	r1, #5
 8001d1e:	205a      	movs	r0, #90	; 0x5a
 8001d20:	f001 fbc6 	bl	80034b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001d24:	205a      	movs	r0, #90	; 0x5a
 8001d26:	f001 fbdf 	bl	80034e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001d2a:	bf00      	nop
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	4002b000 	.word	0x4002b000
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08e      	sub	sp, #56	; 0x38
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a3f      	ldr	r2, [pc, #252]	; (8001e58 <HAL_ETH_MspInit+0x11c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d178      	bne.n	8001e50 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a3e      	ldr	r2, [pc, #248]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001d64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b3c      	ldr	r3, [pc, #240]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d72:	623b      	str	r3, [r7, #32]
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a38      	ldr	r2, [pc, #224]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001d7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a32      	ldr	r2, [pc, #200]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001d94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b30      	ldr	r3, [pc, #192]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001da2:	61bb      	str	r3, [r7, #24]
 8001da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a2c      	ldr	r2, [pc, #176]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a20      	ldr	r2, [pc, #128]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_ETH_MspInit+0x120>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001dee:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e00:	230b      	movs	r3, #11
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4815      	ldr	r0, [pc, #84]	; (8001e60 <HAL_ETH_MspInit+0x124>)
 8001e0c:	f002 fbca 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e10:	2332      	movs	r3, #50	; 0x32
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e20:	230b      	movs	r3, #11
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480e      	ldr	r0, [pc, #56]	; (8001e64 <HAL_ETH_MspInit+0x128>)
 8001e2c:	f002 fbba 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e30:	2386      	movs	r3, #134	; 0x86
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e40:	230b      	movs	r3, #11
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4807      	ldr	r0, [pc, #28]	; (8001e68 <HAL_ETH_MspInit+0x12c>)
 8001e4c:	f002 fbaa 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3738      	adds	r7, #56	; 0x38
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40028000 	.word	0x40028000
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40021800 	.word	0x40021800
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020000 	.word	0x40020000

08001e6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0ac      	sub	sp, #176	; 0xb0
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e84:	f107 0318 	add.w	r3, r7, #24
 8001e88:	2284      	movs	r2, #132	; 0x84
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f010 fe41 	bl	8012b14 <memset>
  if(hi2c->Instance==I2C1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a44      	ldr	r2, [pc, #272]	; (8001fa8 <HAL_I2C_MspInit+0x13c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d13d      	bne.n	8001f18 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ea0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea6:	f107 0318 	add.w	r3, r7, #24
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f005 fbfe 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001eb6:	f7ff fdb5 	bl	8001a24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a3b      	ldr	r2, [pc, #236]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b39      	ldr	r3, [pc, #228]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001ed2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eda:	2312      	movs	r3, #18
 8001edc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eec:	2304      	movs	r3, #4
 8001eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	482d      	ldr	r0, [pc, #180]	; (8001fb0 <HAL_I2C_MspInit+0x144>)
 8001efa:	f002 fb53 	bl	80045a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001efe:	4b2b      	ldr	r3, [pc, #172]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a2a      	ldr	r2, [pc, #168]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001f04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b28      	ldr	r3, [pc, #160]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f16:	e042      	b.n	8001f9e <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a25      	ldr	r2, [pc, #148]	; (8001fb4 <HAL_I2C_MspInit+0x148>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d13d      	bne.n	8001f9e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001f22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f26:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2e:	f107 0318 	add.w	r3, r7, #24
 8001f32:	4618      	mov	r0, r3
 8001f34:	f005 fbba 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001f3e:	f7ff fd71 	bl	8001a24 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f42:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a19      	ldr	r2, [pc, #100]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001f5a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f62:	2312      	movs	r3, #18
 8001f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f74:	2304      	movs	r3, #4
 8001f76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <HAL_I2C_MspInit+0x14c>)
 8001f82:	f002 fb0f 	bl	80045a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001f8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f90:	6413      	str	r3, [r2, #64]	; 0x40
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_I2C_MspInit+0x140>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
}
 8001f9e:	bf00      	nop
 8001fa0:	37b0      	adds	r7, #176	; 0xb0
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400
 8001fb4:	40005c00 	.word	0x40005c00
 8001fb8:	40021c00 	.word	0x40021c00

08001fbc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08e      	sub	sp, #56	; 0x38
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a55      	ldr	r2, [pc, #340]	; (8002130 <HAL_LTDC_MspInit+0x174>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	f040 80a3 	bne.w	8002126 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fe0:	4b54      	ldr	r3, [pc, #336]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	4a53      	ldr	r2, [pc, #332]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 8001fe6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fea:	6453      	str	r3, [r2, #68]	; 0x44
 8001fec:	4b51      	ldr	r3, [pc, #324]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 8001fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ff4:	623b      	str	r3, [r7, #32]
 8001ff6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ff8:	4b4e      	ldr	r3, [pc, #312]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	4a4d      	ldr	r2, [pc, #308]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 8001ffe:	f043 0310 	orr.w	r3, r3, #16
 8002002:	6313      	str	r3, [r2, #48]	; 0x30
 8002004:	4b4b      	ldr	r3, [pc, #300]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002010:	4b48      	ldr	r3, [pc, #288]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4a47      	ldr	r2, [pc, #284]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 8002016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201a:	6313      	str	r3, [r2, #48]	; 0x30
 800201c:	4b45      	ldr	r3, [pc, #276]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002028:	4b42      	ldr	r3, [pc, #264]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4a41      	ldr	r2, [pc, #260]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 800202e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002032:	6313      	str	r3, [r2, #48]	; 0x30
 8002034:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002040:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 8002042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002044:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 8002046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800204a:	6313      	str	r3, [r2, #48]	; 0x30
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002058:	4b36      	ldr	r3, [pc, #216]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	4a35      	ldr	r2, [pc, #212]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	6313      	str	r3, [r2, #48]	; 0x30
 8002064:	4b33      	ldr	r3, [pc, #204]	; (8002134 <HAL_LTDC_MspInit+0x178>)
 8002066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002070:	2310      	movs	r3, #16
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002080:	230e      	movs	r3, #14
 8002082:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002088:	4619      	mov	r1, r3
 800208a:	482b      	ldr	r0, [pc, #172]	; (8002138 <HAL_LTDC_MspInit+0x17c>)
 800208c:	f002 fa8a 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002090:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020a2:	230e      	movs	r3, #14
 80020a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020aa:	4619      	mov	r1, r3
 80020ac:	4823      	ldr	r0, [pc, #140]	; (800213c <HAL_LTDC_MspInit+0x180>)
 80020ae:	f002 fa79 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80020b2:	23f7      	movs	r3, #247	; 0xf7
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020c2:	230e      	movs	r3, #14
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	481c      	ldr	r0, [pc, #112]	; (8002140 <HAL_LTDC_MspInit+0x184>)
 80020ce:	f002 fa69 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80020d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80020e4:	2309      	movs	r3, #9
 80020e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80020e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ec:	4619      	mov	r1, r3
 80020ee:	4815      	ldr	r0, [pc, #84]	; (8002144 <HAL_LTDC_MspInit+0x188>)
 80020f0:	f002 fa58 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80020f4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002106:	230e      	movs	r3, #14
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800210a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210e:	4619      	mov	r1, r3
 8002110:	480d      	ldr	r0, [pc, #52]	; (8002148 <HAL_LTDC_MspInit+0x18c>)
 8002112:	f002 fa47 	bl	80045a4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2105      	movs	r1, #5
 800211a:	2058      	movs	r0, #88	; 0x58
 800211c:	f001 f9c8 	bl	80034b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002120:	2058      	movs	r0, #88	; 0x58
 8002122:	f001 f9e1 	bl	80034e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	3738      	adds	r7, #56	; 0x38
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40016800 	.word	0x40016800
 8002134:	40023800 	.word	0x40023800
 8002138:	40021000 	.word	0x40021000
 800213c:	40022400 	.word	0x40022400
 8002140:	40022800 	.word	0x40022800
 8002144:	40021800 	.word	0x40021800
 8002148:	40022000 	.word	0x40022000

0800214c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08c      	sub	sp, #48	; 0x30
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a3b      	ldr	r2, [pc, #236]	; (8002258 <HAL_QSPI_MspInit+0x10c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d170      	bne.n	8002250 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800216e:	4b3b      	ldr	r3, [pc, #236]	; (800225c <HAL_QSPI_MspInit+0x110>)
 8002170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002172:	4a3a      	ldr	r2, [pc, #232]	; (800225c <HAL_QSPI_MspInit+0x110>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6393      	str	r3, [r2, #56]	; 0x38
 800217a:	4b38      	ldr	r3, [pc, #224]	; (800225c <HAL_QSPI_MspInit+0x110>)
 800217c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002186:	4b35      	ldr	r3, [pc, #212]	; (800225c <HAL_QSPI_MspInit+0x110>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a34      	ldr	r2, [pc, #208]	; (800225c <HAL_QSPI_MspInit+0x110>)
 800218c:	f043 0310 	orr.w	r3, r3, #16
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b32      	ldr	r3, [pc, #200]	; (800225c <HAL_QSPI_MspInit+0x110>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0310 	and.w	r3, r3, #16
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800219e:	4b2f      	ldr	r3, [pc, #188]	; (800225c <HAL_QSPI_MspInit+0x110>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a2e      	ldr	r2, [pc, #184]	; (800225c <HAL_QSPI_MspInit+0x110>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <HAL_QSPI_MspInit+0x110>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b6:	4b29      	ldr	r3, [pc, #164]	; (800225c <HAL_QSPI_MspInit+0x110>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a28      	ldr	r2, [pc, #160]	; (800225c <HAL_QSPI_MspInit+0x110>)
 80021bc:	f043 0308 	orr.w	r3, r3, #8
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b26      	ldr	r3, [pc, #152]	; (800225c <HAL_QSPI_MspInit+0x110>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80021ce:	2304      	movs	r3, #4
 80021d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021de:	2309      	movs	r3, #9
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	4619      	mov	r1, r3
 80021e8:	481d      	ldr	r0, [pc, #116]	; (8002260 <HAL_QSPI_MspInit+0x114>)
 80021ea:	f002 f9db 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80021ee:	2340      	movs	r3, #64	; 0x40
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fa:	2303      	movs	r3, #3
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021fe:	230a      	movs	r3, #10
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	4816      	ldr	r0, [pc, #88]	; (8002264 <HAL_QSPI_MspInit+0x118>)
 800220a:	f002 f9cb 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800220e:	2304      	movs	r3, #4
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800221e:	2309      	movs	r3, #9
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	480e      	ldr	r0, [pc, #56]	; (8002264 <HAL_QSPI_MspInit+0x118>)
 800222a:	f002 f9bb 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800222e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002240:	2309      	movs	r3, #9
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	4619      	mov	r1, r3
 800224a:	4807      	ldr	r0, [pc, #28]	; (8002268 <HAL_QSPI_MspInit+0x11c>)
 800224c:	f002 f9aa 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002250:	bf00      	nop
 8002252:	3730      	adds	r7, #48	; 0x30
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	a0001000 	.word	0xa0001000
 800225c:	40023800 	.word	0x40023800
 8002260:	40021000 	.word	0x40021000
 8002264:	40020400 	.word	0x40020400
 8002268:	40020c00 	.word	0x40020c00

0800226c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0a4      	sub	sp, #144	; 0x90
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	2284      	movs	r2, #132	; 0x84
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f010 fc49 	bl	8012b14 <memset>
  if(hrtc->Instance==RTC)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_RTC_MspInit+0x54>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d114      	bne.n	80022b6 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800228c:	2320      	movs	r3, #32
 800228e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002294:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	4618      	mov	r0, r3
 800229c:	f005 fa06 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80022a6:	f7ff fbbd 	bl	8001a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_RTC_MspInit+0x58>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <HAL_RTC_MspInit+0x58>)
 80022b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3790      	adds	r7, #144	; 0x90
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40002800 	.word	0x40002800
 80022c4:	40023800 	.word	0x40023800

080022c8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	; 0x28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
 80022de:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a25      	ldr	r2, [pc, #148]	; (800237c <HAL_SD_MspInit+0xb4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d144      	bne.n	8002374 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80022ea:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_SD_MspInit+0xb8>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	4a24      	ldr	r2, [pc, #144]	; (8002380 <HAL_SD_MspInit+0xb8>)
 80022f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b22      	ldr	r3, [pc, #136]	; (8002380 <HAL_SD_MspInit+0xb8>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002302:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <HAL_SD_MspInit+0xb8>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <HAL_SD_MspInit+0xb8>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_SD_MspInit+0xb8>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_SD_MspInit+0xb8>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a18      	ldr	r2, [pc, #96]	; (8002380 <HAL_SD_MspInit+0xb8>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b16      	ldr	r3, [pc, #88]	; (8002380 <HAL_SD_MspInit+0xb8>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002332:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002336:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002344:	230c      	movs	r3, #12
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	480d      	ldr	r0, [pc, #52]	; (8002384 <HAL_SD_MspInit+0xbc>)
 8002350:	f002 f928 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002354:	2304      	movs	r3, #4
 8002356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002364:	230c      	movs	r3, #12
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	4806      	ldr	r0, [pc, #24]	; (8002388 <HAL_SD_MspInit+0xc0>)
 8002370:	f002 f918 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002374:	bf00      	nop
 8002376:	3728      	adds	r7, #40	; 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40012c00 	.word	0x40012c00
 8002380:	40023800 	.word	0x40023800
 8002384:	40020800 	.word	0x40020800
 8002388:	40020c00 	.word	0x40020c00

0800238c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b0aa      	sub	sp, #168	; 0xa8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	2284      	movs	r2, #132	; 0x84
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f010 fbb1 	bl	8012b14 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80023ba:	d143      	bne.n	8002444 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 80023bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80023c2:	2364      	movs	r3, #100	; 0x64
 80023c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80023c6:	2302      	movs	r3, #2
 80023c8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80023ca:	2302      	movs	r3, #2
 80023cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80023ce:	2302      	movs	r3, #2
 80023d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d6:	f107 0310 	add.w	r3, r7, #16
 80023da:	4618      	mov	r0, r3
 80023dc:	f005 f966 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 80023e6:	f7ff fb1d 	bl	8001a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80023ea:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_SPDIFRX_MspInit+0xc0>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	4a17      	ldr	r2, [pc, #92]	; (800244c <HAL_SPDIFRX_MspInit+0xc0>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	6413      	str	r3, [r2, #64]	; 0x40
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_SPDIFRX_MspInit+0xc0>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_SPDIFRX_MspInit+0xc0>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a11      	ldr	r2, [pc, #68]	; (800244c <HAL_SPDIFRX_MspInit+0xc0>)
 8002408:	f043 0308 	orr.w	r3, r3, #8
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_SPDIFRX_MspInit+0xc0>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002420:	2302      	movs	r3, #2
 8002422:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002432:	2308      	movs	r3, #8
 8002434:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002438:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800243c:	4619      	mov	r1, r3
 800243e:	4804      	ldr	r0, [pc, #16]	; (8002450 <HAL_SPDIFRX_MspInit+0xc4>)
 8002440:	f002 f8b0 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002444:	bf00      	nop
 8002446:	37a8      	adds	r7, #168	; 0xa8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800
 8002450:	40020c00 	.word	0x40020c00

08002454 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a25      	ldr	r2, [pc, #148]	; (8002508 <HAL_SPI_MspInit+0xb4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d144      	bne.n	8002500 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002476:	4b25      	ldr	r3, [pc, #148]	; (800250c <HAL_SPI_MspInit+0xb8>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a24      	ldr	r2, [pc, #144]	; (800250c <HAL_SPI_MspInit+0xb8>)
 800247c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <HAL_SPI_MspInit+0xb8>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800248e:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HAL_SPI_MspInit+0xb8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a1e      	ldr	r2, [pc, #120]	; (800250c <HAL_SPI_MspInit+0xb8>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b1c      	ldr	r3, [pc, #112]	; (800250c <HAL_SPI_MspInit+0xb8>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_SPI_MspInit+0xb8>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a18      	ldr	r2, [pc, #96]	; (800250c <HAL_SPI_MspInit+0xb8>)
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_SPI_MspInit+0xb8>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80024be:	2302      	movs	r3, #2
 80024c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ca:	2300      	movs	r3, #0
 80024cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024ce:	2305      	movs	r3, #5
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80024d2:	f107 0314 	add.w	r3, r7, #20
 80024d6:	4619      	mov	r1, r3
 80024d8:	480d      	ldr	r0, [pc, #52]	; (8002510 <HAL_SPI_MspInit+0xbc>)
 80024da:	f002 f863 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80024de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024f0:	2305      	movs	r3, #5
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4619      	mov	r1, r3
 80024fa:	4806      	ldr	r0, [pc, #24]	; (8002514 <HAL_SPI_MspInit+0xc0>)
 80024fc:	f002 f852 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40003800 	.word	0x40003800
 800250c:	40023800 	.word	0x40023800
 8002510:	40022000 	.word	0x40022000
 8002514:	40020400 	.word	0x40020400

08002518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a2e      	ldr	r2, [pc, #184]	; (80025e0 <HAL_TIM_Base_MspInit+0xc8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10c      	bne.n	8002544 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800252a:	4b2e      	ldr	r3, [pc, #184]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252e:	4a2d      	ldr	r2, [pc, #180]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6453      	str	r3, [r2, #68]	; 0x44
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
 8002540:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002542:	e046      	b.n	80025d2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d10c      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a24      	ldr	r2, [pc, #144]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	69bb      	ldr	r3, [r7, #24]
}
 8002566:	e034      	b.n	80025d2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_TIM_Base_MspInit+0xd0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10c      	bne.n	800258c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a1b      	ldr	r2, [pc, #108]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	697b      	ldr	r3, [r7, #20]
}
 800258a:	e022      	b.n	80025d2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a16      	ldr	r2, [pc, #88]	; (80025ec <HAL_TIM_Base_MspInit+0xd4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d10c      	bne.n	80025b0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 800259c:	f043 0308 	orr.w	r3, r3, #8
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
}
 80025ae:	e010      	b.n	80025d2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <HAL_TIM_Base_MspInit+0xd8>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10b      	bne.n	80025d2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a09      	ldr	r2, [pc, #36]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <HAL_TIM_Base_MspInit+0xcc>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
}
 80025d2:	bf00      	nop
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40010000 	.word	0x40010000
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40000c00 	.word	0x40000c00
 80025f0:	40010400 	.word	0x40010400

080025f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_TIM_PWM_MspInit+0x38>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10b      	bne.n	800261e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002606:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <HAL_TIM_PWM_MspInit+0x3c>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a09      	ldr	r2, [pc, #36]	; (8002630 <HAL_TIM_PWM_MspInit+0x3c>)
 800260c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <HAL_TIM_PWM_MspInit+0x3c>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40001800 	.word	0x40001800
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	; 0x30
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a56      	ldr	r2, [pc, #344]	; (80027ac <HAL_TIM_MspPostInit+0x178>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d11d      	bne.n	8002692 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a55      	ldr	r2, [pc, #340]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b53      	ldr	r3, [pc, #332]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800266e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002680:	2301      	movs	r3, #1
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8002684:	f107 031c 	add.w	r3, r7, #28
 8002688:	4619      	mov	r1, r3
 800268a:	484a      	ldr	r0, [pc, #296]	; (80027b4 <HAL_TIM_MspPostInit+0x180>)
 800268c:	f001 ff8a 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002690:	e087      	b.n	80027a2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269a:	d11d      	bne.n	80026d8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269c:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	4a43      	ldr	r2, [pc, #268]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6313      	str	r3, [r2, #48]	; 0x30
 80026a8:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80026b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026c6:	2301      	movs	r3, #1
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80026ca:	f107 031c 	add.w	r3, r7, #28
 80026ce:	4619      	mov	r1, r3
 80026d0:	4838      	ldr	r0, [pc, #224]	; (80027b4 <HAL_TIM_MspPostInit+0x180>)
 80026d2:	f001 ff67 	bl	80045a4 <HAL_GPIO_Init>
}
 80026d6:	e064      	b.n	80027a2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a36      	ldr	r2, [pc, #216]	; (80027b8 <HAL_TIM_MspPostInit+0x184>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d11c      	bne.n	800271c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a32      	ldr	r2, [pc, #200]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80026fa:	2310      	movs	r3, #16
 80026fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800270a:	2302      	movs	r3, #2
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	4619      	mov	r1, r3
 8002714:	4829      	ldr	r0, [pc, #164]	; (80027bc <HAL_TIM_MspPostInit+0x188>)
 8002716:	f001 ff45 	bl	80045a4 <HAL_GPIO_Init>
}
 800271a:	e042      	b.n	80027a2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a27      	ldr	r2, [pc, #156]	; (80027c0 <HAL_TIM_MspPostInit+0x18c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d11c      	bne.n	8002760 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002726:	4b22      	ldr	r3, [pc, #136]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 800272c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002730:	6313      	str	r3, [r2, #48]	; 0x30
 8002732:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800273e:	2301      	movs	r3, #1
 8002740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800274e:	2302      	movs	r3, #2
 8002750:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002752:	f107 031c 	add.w	r3, r7, #28
 8002756:	4619      	mov	r1, r3
 8002758:	481a      	ldr	r0, [pc, #104]	; (80027c4 <HAL_TIM_MspPostInit+0x190>)
 800275a:	f001 ff23 	bl	80045a4 <HAL_GPIO_Init>
}
 800275e:	e020      	b.n	80027a2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_TIM_MspPostInit+0x194>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d11b      	bne.n	80027a2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 8002770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_TIM_MspPostInit+0x17c>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002782:	2340      	movs	r3, #64	; 0x40
 8002784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002792:	2309      	movs	r3, #9
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002796:	f107 031c 	add.w	r3, r7, #28
 800279a:	4619      	mov	r1, r3
 800279c:	480b      	ldr	r0, [pc, #44]	; (80027cc <HAL_TIM_MspPostInit+0x198>)
 800279e:	f001 ff01 	bl	80045a4 <HAL_GPIO_Init>
}
 80027a2:	bf00      	nop
 80027a4:	3730      	adds	r7, #48	; 0x30
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40010000 	.word	0x40010000
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020000 	.word	0x40020000
 80027b8:	40000400 	.word	0x40000400
 80027bc:	40020400 	.word	0x40020400
 80027c0:	40000c00 	.word	0x40000c00
 80027c4:	40022000 	.word	0x40022000
 80027c8:	40001800 	.word	0x40001800
 80027cc:	40021c00 	.word	0x40021c00

080027d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b0ae      	sub	sp, #184	; 0xb8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027e8:	f107 0320 	add.w	r3, r7, #32
 80027ec:	2284      	movs	r2, #132	; 0x84
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f010 f98f 	bl	8012b14 <memset>
  if(huart->Instance==USART1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a53      	ldr	r2, [pc, #332]	; (8002948 <HAL_UART_MspInit+0x178>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d15d      	bne.n	80028bc <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002800:	2340      	movs	r3, #64	; 0x40
 8002802:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002804:	2300      	movs	r3, #0
 8002806:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002808:	f107 0320 	add.w	r3, r7, #32
 800280c:	4618      	mov	r0, r3
 800280e:	f004 ff4d 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002818:	f7ff f904 	bl	8001a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800281c:	4b4b      	ldr	r3, [pc, #300]	; (800294c <HAL_UART_MspInit+0x17c>)
 800281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002820:	4a4a      	ldr	r2, [pc, #296]	; (800294c <HAL_UART_MspInit+0x17c>)
 8002822:	f043 0310 	orr.w	r3, r3, #16
 8002826:	6453      	str	r3, [r2, #68]	; 0x44
 8002828:	4b48      	ldr	r3, [pc, #288]	; (800294c <HAL_UART_MspInit+0x17c>)
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	61fb      	str	r3, [r7, #28]
 8002832:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002834:	4b45      	ldr	r3, [pc, #276]	; (800294c <HAL_UART_MspInit+0x17c>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	4a44      	ldr	r2, [pc, #272]	; (800294c <HAL_UART_MspInit+0x17c>)
 800283a:	f043 0302 	orr.w	r3, r3, #2
 800283e:	6313      	str	r3, [r2, #48]	; 0x30
 8002840:	4b42      	ldr	r3, [pc, #264]	; (800294c <HAL_UART_MspInit+0x17c>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284c:	4b3f      	ldr	r3, [pc, #252]	; (800294c <HAL_UART_MspInit+0x17c>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	4a3e      	ldr	r2, [pc, #248]	; (800294c <HAL_UART_MspInit+0x17c>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6313      	str	r3, [r2, #48]	; 0x30
 8002858:	4b3c      	ldr	r3, [pc, #240]	; (800294c <HAL_UART_MspInit+0x17c>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	2300      	movs	r3, #0
 8002878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800287c:	2307      	movs	r3, #7
 800287e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002882:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002886:	4619      	mov	r1, r3
 8002888:	4831      	ldr	r0, [pc, #196]	; (8002950 <HAL_UART_MspInit+0x180>)
 800288a:	f001 fe8b 	bl	80045a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800288e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002892:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028a8:	2307      	movs	r3, #7
 80028aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80028ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4827      	ldr	r0, [pc, #156]	; (8002954 <HAL_UART_MspInit+0x184>)
 80028b6:	f001 fe75 	bl	80045a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028ba:	e040      	b.n	800293e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a25      	ldr	r2, [pc, #148]	; (8002958 <HAL_UART_MspInit+0x188>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d13b      	bne.n	800293e <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80028c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80028ca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80028cc:	2300      	movs	r3, #0
 80028ce:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028d0:	f107 0320 	add.w	r3, r7, #32
 80028d4:	4618      	mov	r0, r3
 80028d6:	f004 fee9 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_UART_MspInit+0x114>
      Error_Handler();
 80028e0:	f7ff f8a0 	bl	8001a24 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_UART_MspInit+0x17c>)
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_UART_MspInit+0x17c>)
 80028ea:	f043 0320 	orr.w	r3, r3, #32
 80028ee:	6453      	str	r3, [r2, #68]	; 0x44
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_UART_MspInit+0x17c>)
 80028f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_UART_MspInit+0x17c>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	4a12      	ldr	r2, [pc, #72]	; (800294c <HAL_UART_MspInit+0x17c>)
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	6313      	str	r3, [r2, #48]	; 0x30
 8002908:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_UART_MspInit+0x17c>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002914:	23c0      	movs	r3, #192	; 0xc0
 8002916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291a:	2302      	movs	r3, #2
 800291c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002926:	2303      	movs	r3, #3
 8002928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800292c:	2308      	movs	r3, #8
 800292e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002932:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002936:	4619      	mov	r1, r3
 8002938:	4808      	ldr	r0, [pc, #32]	; (800295c <HAL_UART_MspInit+0x18c>)
 800293a:	f001 fe33 	bl	80045a4 <HAL_GPIO_Init>
}
 800293e:	bf00      	nop
 8002940:	37b8      	adds	r7, #184	; 0xb8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40011000 	.word	0x40011000
 800294c:	40023800 	.word	0x40023800
 8002950:	40020400 	.word	0x40020400
 8002954:	40020000 	.word	0x40020000
 8002958:	40011400 	.word	0x40011400
 800295c:	40020800 	.word	0x40020800

08002960 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002974:	4b3a      	ldr	r3, [pc, #232]	; (8002a60 <HAL_FMC_MspInit+0x100>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d16d      	bne.n	8002a58 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800297c:	4b38      	ldr	r3, [pc, #224]	; (8002a60 <HAL_FMC_MspInit+0x100>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002982:	4b38      	ldr	r3, [pc, #224]	; (8002a64 <HAL_FMC_MspInit+0x104>)
 8002984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002986:	4a37      	ldr	r2, [pc, #220]	; (8002a64 <HAL_FMC_MspInit+0x104>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6393      	str	r3, [r2, #56]	; 0x38
 800298e:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <HAL_FMC_MspInit+0x104>)
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800299a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800299e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029ac:	230c      	movs	r3, #12
 80029ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029b0:	1d3b      	adds	r3, r7, #4
 80029b2:	4619      	mov	r1, r3
 80029b4:	482c      	ldr	r0, [pc, #176]	; (8002a68 <HAL_FMC_MspInit+0x108>)
 80029b6:	f001 fdf5 	bl	80045a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80029ba:	f248 1333 	movw	r3, #33075	; 0x8133
 80029be:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029cc:	230c      	movs	r3, #12
 80029ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	4619      	mov	r1, r3
 80029d4:	4825      	ldr	r0, [pc, #148]	; (8002a6c <HAL_FMC_MspInit+0x10c>)
 80029d6:	f001 fde5 	bl	80045a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80029da:	f24c 7303 	movw	r3, #50947	; 0xc703
 80029de:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e8:	2303      	movs	r3, #3
 80029ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029ec:	230c      	movs	r3, #12
 80029ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f0:	1d3b      	adds	r3, r7, #4
 80029f2:	4619      	mov	r1, r3
 80029f4:	481e      	ldr	r0, [pc, #120]	; (8002a70 <HAL_FMC_MspInit+0x110>)
 80029f6:	f001 fdd5 	bl	80045a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80029fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80029fe:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a0c:	230c      	movs	r3, #12
 8002a0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	4619      	mov	r1, r3
 8002a14:	4817      	ldr	r0, [pc, #92]	; (8002a74 <HAL_FMC_MspInit+0x114>)
 8002a16:	f001 fdc5 	bl	80045a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002a1a:	2328      	movs	r3, #40	; 0x28
 8002a1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a2a:	230c      	movs	r3, #12
 8002a2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4811      	ldr	r0, [pc, #68]	; (8002a78 <HAL_FMC_MspInit+0x118>)
 8002a34:	f001 fdb6 	bl	80045a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002a38:	2308      	movs	r3, #8
 8002a3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a44:	2303      	movs	r3, #3
 8002a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002a48:	230c      	movs	r3, #12
 8002a4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	480a      	ldr	r0, [pc, #40]	; (8002a7c <HAL_FMC_MspInit+0x11c>)
 8002a52:	f001 fda7 	bl	80045a4 <HAL_GPIO_Init>
 8002a56:	e000      	b.n	8002a5a <HAL_FMC_MspInit+0xfa>
    return;
 8002a58:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000b44 	.word	0x20000b44
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40021800 	.word	0x40021800
 8002a70:	40020c00 	.word	0x40020c00
 8002a74:	40021400 	.word	0x40021400
 8002a78:	40021c00 	.word	0x40021c00
 8002a7c:	40020800 	.word	0x40020800

08002a80 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002a88:	f7ff ff6a 	bl	8002960 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <HAL_SAI_MspInit+0xbc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d124      	bne.n	8002af0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002aa6:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_SAI_MspInit+0xc0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10b      	bne.n	8002ac6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <HAL_SAI_MspInit+0xc4>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	4a29      	ldr	r2, [pc, #164]	; (8002b58 <HAL_SAI_MspInit+0xc4>)
 8002ab4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aba:	4b27      	ldr	r3, [pc, #156]	; (8002b58 <HAL_SAI_MspInit+0xc4>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002ac6:	4b23      	ldr	r3, [pc, #140]	; (8002b54 <HAL_SAI_MspInit+0xc0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <HAL_SAI_MspInit+0xc0>)
 8002ace:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002ad0:	23f0      	movs	r3, #240	; 0xf0
 8002ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002adc:	2300      	movs	r3, #0
 8002ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002ae0:	230a      	movs	r3, #10
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	4619      	mov	r1, r3
 8002aea:	481c      	ldr	r0, [pc, #112]	; (8002b5c <HAL_SAI_MspInit+0xc8>)
 8002aec:	f001 fd5a 	bl	80045a4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <HAL_SAI_MspInit+0xcc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d125      	bne.n	8002b46 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_SAI_MspInit+0xc0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10b      	bne.n	8002b1a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_SAI_MspInit+0xc4>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <HAL_SAI_MspInit+0xc4>)
 8002b08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0e:	4b12      	ldr	r3, [pc, #72]	; (8002b58 <HAL_SAI_MspInit+0xc4>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <HAL_SAI_MspInit+0xc0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <HAL_SAI_MspInit+0xc0>)
 8002b22:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002b36:	230a      	movs	r3, #10
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4808      	ldr	r0, [pc, #32]	; (8002b64 <HAL_SAI_MspInit+0xd0>)
 8002b42:	f001 fd2f 	bl	80045a4 <HAL_GPIO_Init>

    }
}
 8002b46:	bf00      	nop
 8002b48:	3728      	adds	r7, #40	; 0x28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40015c04 	.word	0x40015c04
 8002b54:	20000b48 	.word	0x20000b48
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40022000 	.word	0x40022000
 8002b60:	40015c24 	.word	0x40015c24
 8002b64:	40021800 	.word	0x40021800

08002b68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	; 0x30
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	2036      	movs	r0, #54	; 0x36
 8002b7e:	f000 fc97 	bl	80034b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b82:	2036      	movs	r0, #54	; 0x36
 8002b84:	f000 fcb0 	bl	80034e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <HAL_InitTick+0xa0>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	4a1e      	ldr	r2, [pc, #120]	; (8002c08 <HAL_InitTick+0xa0>)
 8002b8e:	f043 0310 	orr.w	r3, r3, #16
 8002b92:	6413      	str	r3, [r2, #64]	; 0x40
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <HAL_InitTick+0xa0>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ba0:	f107 0210 	add.w	r2, r7, #16
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 fd4c 	bl	8007648 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002bb0:	f004 fd22 	bl	80075f8 <HAL_RCC_GetPCLK1Freq>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <HAL_InitTick+0xa4>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0c9b      	lsrs	r3, r3, #18
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_InitTick+0xa8>)
 8002bca:	4a12      	ldr	r2, [pc, #72]	; (8002c14 <HAL_InitTick+0xac>)
 8002bcc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_InitTick+0xa8>)
 8002bd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bd4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002bd6:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <HAL_InitTick+0xa8>)
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <HAL_InitTick+0xa8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_InitTick+0xa8>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002be8:	4809      	ldr	r0, [pc, #36]	; (8002c10 <HAL_InitTick+0xa8>)
 8002bea:	f007 f9fe 	bl	8009fea <HAL_TIM_Base_Init>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d104      	bne.n	8002bfe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002bf4:	4806      	ldr	r0, [pc, #24]	; (8002c10 <HAL_InitTick+0xa8>)
 8002bf6:	f007 fa4f 	bl	800a098 <HAL_TIM_Base_Start_IT>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	e000      	b.n	8002c00 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3730      	adds	r7, #48	; 0x30
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	431bde83 	.word	0x431bde83
 8002c10:	20000b4c 	.word	0x20000b4c
 8002c14:	40001000 	.word	0x40001000

08002c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <NMI_Handler+0x4>

08002c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c22:	e7fe      	b.n	8002c22 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	e7fe      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c2e:	e7fe      	b.n	8002c2e <BusFault_Handler+0x4>

08002c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c34:	e7fe      	b.n	8002c34 <UsageFault_Handler+0x4>

08002c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <TIM6_DAC_IRQHandler+0x10>)
 8002c4a:	f007 faf4 	bl	800a236 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000b4c 	.word	0x20000b4c

08002c58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <OTG_FS_IRQHandler+0x10>)
 8002c5e:	f002 f8e9 	bl	8004e34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200090ec 	.word	0x200090ec

08002c6c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002c70:	4802      	ldr	r0, [pc, #8]	; (8002c7c <LTDC_IRQHandler+0x10>)
 8002c72:	f003 fca3 	bl	80065bc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200004e4 	.word	0x200004e4

08002c80 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <DMA2D_IRQHandler+0x10>)
 8002c86:	f000 fe85 	bl	8003994 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200003c4 	.word	0x200003c4

08002c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c9c:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <_sbrk+0x5c>)
 8002c9e:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <_sbrk+0x60>)
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <_sbrk+0x64>)
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <_sbrk+0x68>)
 8002cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <_sbrk+0x64>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d207      	bcs.n	8002cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc4:	f00f fede 	bl	8012a84 <__errno>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	220c      	movs	r2, #12
 8002ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	e009      	b.n	8002ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cda:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <_sbrk+0x64>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <_sbrk+0x64>)
 8002ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20050000 	.word	0x20050000
 8002cf4:	00000400 	.word	0x00000400
 8002cf8:	20000b98 	.word	0x20000b98
 8002cfc:	20009400 	.word	0x20009400

08002d00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <SystemInit+0x20>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	4a05      	ldr	r2, [pc, #20]	; (8002d20 <SystemInit+0x20>)
 8002d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d28:	480d      	ldr	r0, [pc, #52]	; (8002d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d2a:	490e      	ldr	r1, [pc, #56]	; (8002d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d30:	e002      	b.n	8002d38 <LoopCopyDataInit>

08002d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d36:	3304      	adds	r3, #4

08002d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d3c:	d3f9      	bcc.n	8002d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3e:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d40:	4c0b      	ldr	r4, [pc, #44]	; (8002d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d44:	e001      	b.n	8002d4a <LoopFillZerobss>

08002d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d48:	3204      	adds	r2, #4

08002d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d4c:	d3fb      	bcc.n	8002d46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d4e:	f7ff ffd7 	bl	8002d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d52:	f00f fe9d 	bl	8012a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d56:	f7fd fc11 	bl	800057c <main>
  bx  lr    
 8002d5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d64:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002d68:	08012df0 	.word	0x08012df0
  ldr r2, =_sbss
 8002d6c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002d70:	20009400 	.word	0x20009400

08002d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d74:	e7fe      	b.n	8002d74 <ADC_IRQHandler>

08002d76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d7a:	2003      	movs	r0, #3
 8002d7c:	f000 fb8d 	bl	800349a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7ff fef1 	bl	8002b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d86:	f7fe fe53 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_IncTick+0x20>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_IncTick+0x24>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <HAL_IncTick+0x24>)
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000008 	.word	0x20000008
 8002db4:	20000b9c 	.word	0x20000b9c

08002db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_GetTick+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000b9c 	.word	0x20000b9c

08002dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff ffee 	bl	8002db8 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d005      	beq.n	8002df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_Delay+0x44>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002df6:	bf00      	nop
 8002df8:	f7ff ffde 	bl	8002db8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d8f7      	bhi.n	8002df8 <HAL_Delay+0x28>
  {
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000008 	.word	0x20000008

08002e18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e031      	b.n	8002e92 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7fe fe22 	bl	8001a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d116      	bne.n	8002e84 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <HAL_ADC_Init+0x84>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	f043 0202 	orr.w	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f970 	bl	800314c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f023 0303 	bic.w	r3, r3, #3
 8002e7a:	f043 0201 	orr.w	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
 8002e82:	e001      	b.n	8002e88 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	ffffeefd 	.word	0xffffeefd

08002ea0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x1c>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e136      	b.n	800312a <HAL_ADC_ConfigChannel+0x28a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b09      	cmp	r3, #9
 8002eca:	d93a      	bls.n	8002f42 <HAL_ADC_ConfigChannel+0xa2>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ed4:	d035      	beq.n	8002f42 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68d9      	ldr	r1, [r3, #12]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	3b1e      	subs	r3, #30
 8002eec:	2207      	movs	r2, #7
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	400a      	ands	r2, r1
 8002efa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a8d      	ldr	r2, [pc, #564]	; (8003138 <HAL_ADC_ConfigChannel+0x298>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10a      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68d9      	ldr	r1, [r3, #12]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	061a      	lsls	r2, r3, #24
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f1a:	e035      	b.n	8002f88 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68d9      	ldr	r1, [r3, #12]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4403      	add	r3, r0
 8002f34:	3b1e      	subs	r3, #30
 8002f36:	409a      	lsls	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f40:	e022      	b.n	8002f88 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6919      	ldr	r1, [r3, #16]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	2207      	movs	r2, #7
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	400a      	ands	r2, r1
 8002f64:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6919      	ldr	r1, [r3, #16]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	4603      	mov	r3, r0
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	4403      	add	r3, r0
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d824      	bhi.n	8002fda <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3b05      	subs	r3, #5
 8002fa2:	221f      	movs	r2, #31
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	400a      	ands	r2, r1
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	3b05      	subs	r3, #5
 8002fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	635a      	str	r2, [r3, #52]	; 0x34
 8002fd8:	e04c      	b.n	8003074 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b0c      	cmp	r3, #12
 8002fe0:	d824      	bhi.n	800302c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3b23      	subs	r3, #35	; 0x23
 8002ff4:	221f      	movs	r2, #31
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	400a      	ands	r2, r1
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	4618      	mov	r0, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	3b23      	subs	r3, #35	; 0x23
 800301e:	fa00 f203 	lsl.w	r2, r0, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	631a      	str	r2, [r3, #48]	; 0x30
 800302a:	e023      	b.n	8003074 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	3b41      	subs	r3, #65	; 0x41
 800303e:	221f      	movs	r2, #31
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43da      	mvns	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	400a      	ands	r2, r1
 800304c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	4618      	mov	r0, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	3b41      	subs	r3, #65	; 0x41
 8003068:	fa00 f203 	lsl.w	r2, r0, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a30      	ldr	r2, [pc, #192]	; (800313c <HAL_ADC_ConfigChannel+0x29c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10a      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x1f4>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003086:	d105      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003088:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a2c      	ldr	r2, [pc, #176]	; (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 800308e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003092:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a28      	ldr	r2, [pc, #160]	; (800313c <HAL_ADC_ConfigChannel+0x29c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d10f      	bne.n	80030be <HAL_ADC_ConfigChannel+0x21e>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b12      	cmp	r3, #18
 80030a4:	d10b      	bne.n	80030be <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	4a25      	ldr	r2, [pc, #148]	; (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030b0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80030b2:	4b23      	ldr	r3, [pc, #140]	; (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4a22      	ldr	r2, [pc, #136]	; (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030bc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1e      	ldr	r2, [pc, #120]	; (800313c <HAL_ADC_ConfigChannel+0x29c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d12b      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x280>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1a      	ldr	r2, [pc, #104]	; (8003138 <HAL_ADC_ConfigChannel+0x298>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d003      	beq.n	80030da <HAL_ADC_ConfigChannel+0x23a>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b11      	cmp	r3, #17
 80030d8:	d122      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80030da:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4a18      	ldr	r2, [pc, #96]	; (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80030e4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <HAL_ADC_ConfigChannel+0x2a0>)
 80030ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030f0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a10      	ldr	r2, [pc, #64]	; (8003138 <HAL_ADC_ConfigChannel+0x298>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d111      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030fc:	4b11      	ldr	r3, [pc, #68]	; (8003144 <HAL_ADC_ConfigChannel+0x2a4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a11      	ldr	r2, [pc, #68]	; (8003148 <HAL_ADC_ConfigChannel+0x2a8>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0c9a      	lsrs	r2, r3, #18
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003112:	e002      	b.n	800311a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3b01      	subs	r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f9      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	10000012 	.word	0x10000012
 800313c:	40012000 	.word	0x40012000
 8003140:	40012300 	.word	0x40012300
 8003144:	20000000 	.word	0x20000000
 8003148:	431bde83 	.word	0x431bde83

0800314c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003154:	4b78      	ldr	r3, [pc, #480]	; (8003338 <ADC_Init+0x1ec>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	4a77      	ldr	r2, [pc, #476]	; (8003338 <ADC_Init+0x1ec>)
 800315a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800315e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003160:	4b75      	ldr	r3, [pc, #468]	; (8003338 <ADC_Init+0x1ec>)
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4973      	ldr	r1, [pc, #460]	; (8003338 <ADC_Init+0x1ec>)
 800316a:	4313      	orrs	r3, r2
 800316c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800317c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6859      	ldr	r1, [r3, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	021a      	lsls	r2, r3, #8
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6899      	ldr	r1, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	4a58      	ldr	r2, [pc, #352]	; (800333c <ADC_Init+0x1f0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d022      	beq.n	8003226 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6899      	ldr	r1, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003210:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6899      	ldr	r1, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	e00f      	b.n	8003246 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003234:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003244:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0202 	bic.w	r2, r2, #2
 8003254:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6899      	ldr	r1, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	005a      	lsls	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01b      	beq.n	80032ac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003282:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003292:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	3b01      	subs	r3, #1
 80032a0:	035a      	lsls	r2, r3, #13
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	e007      	b.n	80032bc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	051a      	lsls	r2, r3, #20
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6899      	ldr	r1, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032fe:	025a      	lsls	r2, r3, #9
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003316:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6899      	ldr	r1, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	029a      	lsls	r2, r3, #10
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	609a      	str	r2, [r3, #8]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	40012300 	.word	0x40012300
 800333c:	0f000001 	.word	0x0f000001

08003340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <__NVIC_SetPriorityGrouping+0x40>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800335c:	4013      	ands	r3, r2
 800335e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <__NVIC_SetPriorityGrouping+0x44>)
 800336a:	4313      	orrs	r3, r2
 800336c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336e:	4a04      	ldr	r2, [pc, #16]	; (8003380 <__NVIC_SetPriorityGrouping+0x40>)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60d3      	str	r3, [r2, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00
 8003384:	05fa0000 	.word	0x05fa0000

08003388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <__NVIC_GetPriorityGrouping+0x18>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	0a1b      	lsrs	r3, r3, #8
 8003392:	f003 0307 	and.w	r3, r3, #7
}
 8003396:	4618      	mov	r0, r3
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000ed00 	.word	0xe000ed00

080033a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	db0b      	blt.n	80033ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	f003 021f 	and.w	r2, r3, #31
 80033bc:	4907      	ldr	r1, [pc, #28]	; (80033dc <__NVIC_EnableIRQ+0x38>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2001      	movs	r0, #1
 80033c6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000e100 	.word	0xe000e100

080033e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	db0a      	blt.n	800340a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	490c      	ldr	r1, [pc, #48]	; (800342c <__NVIC_SetPriority+0x4c>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	440b      	add	r3, r1
 8003404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003408:	e00a      	b.n	8003420 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <__NVIC_SetPriority+0x50>)
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	3b04      	subs	r3, #4
 8003418:	0112      	lsls	r2, r2, #4
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	440b      	add	r3, r1
 800341e:	761a      	strb	r2, [r3, #24]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000e100 	.word	0xe000e100
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f1c3 0307 	rsb	r3, r3, #7
 800344e:	2b04      	cmp	r3, #4
 8003450:	bf28      	it	cs
 8003452:	2304      	movcs	r3, #4
 8003454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3304      	adds	r3, #4
 800345a:	2b06      	cmp	r3, #6
 800345c:	d902      	bls.n	8003464 <NVIC_EncodePriority+0x30>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3b03      	subs	r3, #3
 8003462:	e000      	b.n	8003466 <NVIC_EncodePriority+0x32>
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	f04f 32ff 	mov.w	r2, #4294967295
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	401a      	ands	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800347c:	f04f 31ff 	mov.w	r1, #4294967295
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	43d9      	mvns	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800348c:	4313      	orrs	r3, r2
         );
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ff4c 	bl	8003340 <__NVIC_SetPriorityGrouping>
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
 80034bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c2:	f7ff ff61 	bl	8003388 <__NVIC_GetPriorityGrouping>
 80034c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	6978      	ldr	r0, [r7, #20]
 80034ce:	f7ff ffb1 	bl	8003434 <NVIC_EncodePriority>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff80 	bl	80033e0 <__NVIC_SetPriority>
}
 80034e0:	bf00      	nop
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff54 	bl	80033a4 <__NVIC_EnableIRQ>
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e054      	b.n	80035c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7f5b      	ldrb	r3, [r3, #29]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fe fb04 	bl	8001b34 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	791b      	ldrb	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_CRC_Init+0xc4>)
 8003540:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0218 	bic.w	r2, r2, #24
 8003550:	609a      	str	r2, [r3, #8]
 8003552:	e00c      	b.n	800356e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6899      	ldr	r1, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	461a      	mov	r2, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f834 	bl	80035cc <HAL_CRCEx_Polynomial_Set>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e028      	b.n	80035c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	795b      	ldrb	r3, [r3, #5]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d105      	bne.n	8003582 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f04f 32ff 	mov.w	r2, #4294967295
 800357e:	611a      	str	r2, [r3, #16]
 8003580:	e004      	b.n	800358c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6912      	ldr	r2, [r2, #16]
 800358a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695a      	ldr	r2, [r3, #20]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	04c11db7 	.word	0x04c11db7

080035cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80035dc:	231f      	movs	r3, #31
 80035de:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80035e0:	bf00      	nop
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1e5a      	subs	r2, r3, #1
 80035e6:	613a      	str	r2, [r7, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <HAL_CRCEx_Polynomial_Set+0x34>
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f003 031f 	and.w	r3, r3, #31
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b18      	cmp	r3, #24
 8003604:	d846      	bhi.n	8003694 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003606:	a201      	add	r2, pc, #4	; (adr r2, 800360c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	0800369b 	.word	0x0800369b
 8003610:	08003695 	.word	0x08003695
 8003614:	08003695 	.word	0x08003695
 8003618:	08003695 	.word	0x08003695
 800361c:	08003695 	.word	0x08003695
 8003620:	08003695 	.word	0x08003695
 8003624:	08003695 	.word	0x08003695
 8003628:	08003695 	.word	0x08003695
 800362c:	08003689 	.word	0x08003689
 8003630:	08003695 	.word	0x08003695
 8003634:	08003695 	.word	0x08003695
 8003638:	08003695 	.word	0x08003695
 800363c:	08003695 	.word	0x08003695
 8003640:	08003695 	.word	0x08003695
 8003644:	08003695 	.word	0x08003695
 8003648:	08003695 	.word	0x08003695
 800364c:	0800367d 	.word	0x0800367d
 8003650:	08003695 	.word	0x08003695
 8003654:	08003695 	.word	0x08003695
 8003658:	08003695 	.word	0x08003695
 800365c:	08003695 	.word	0x08003695
 8003660:	08003695 	.word	0x08003695
 8003664:	08003695 	.word	0x08003695
 8003668:	08003695 	.word	0x08003695
 800366c:	08003671 	.word	0x08003671
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b06      	cmp	r3, #6
 8003674:	d913      	bls.n	800369e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800367a:	e010      	b.n	800369e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b07      	cmp	r3, #7
 8003680:	d90f      	bls.n	80036a2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003686:	e00c      	b.n	80036a2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b0f      	cmp	r3, #15
 800368c:	d90b      	bls.n	80036a6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003692:	e008      	b.n	80036a6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	75fb      	strb	r3, [r7, #23]
      break;
 8003698:	e006      	b.n	80036a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800369a:	bf00      	nop
 800369c:	e004      	b.n	80036a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800369e:	bf00      	nop
 80036a0:	e002      	b.n	80036a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036a2:	bf00      	nop
 80036a4:	e000      	b.n	80036a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80036a6:	bf00      	nop
  }
  if (status == HAL_OK)
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 0118 	bic.w	r1, r3, #24
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80036ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e069      	b.n	80037be <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe fa3c 	bl	8001b74 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6819      	ldr	r1, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <HAL_DCMI_Init+0xf0>)
 800371e:	400b      	ands	r3, r1
 8003720:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6819      	ldr	r1, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003736:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003742:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800374e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800375a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003766:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b10      	cmp	r3, #16
 8003776:	d112      	bne.n	800379e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	7f1b      	ldrb	r3, [r3, #28]
 800377c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7f5b      	ldrb	r3, [r3, #29]
 8003782:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003784:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7f9b      	ldrb	r3, [r3, #30]
 800378a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800378c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	7fdb      	ldrb	r3, [r3, #31]
 8003794:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800379a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800379c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 021e 	orr.w	r2, r2, #30
 80037ac:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	ffe0f007 	.word	0xffe0f007

080037cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_DMA_Start_IT+0x26>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e048      	b.n	8003884 <HAL_DMA_Start_IT+0xb8>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b01      	cmp	r3, #1
 8003804:	d137      	bne.n	8003876 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f842 	bl	80038a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	223f      	movs	r2, #63	; 0x3f
 8003826:	409a      	lsls	r2, r3
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0216 	orr.w	r2, r2, #22
 800383a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800384a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0208 	orr.w	r2, r2, #8
 8003862:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e005      	b.n	8003882 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800387e:	2302      	movs	r3, #2
 8003880:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003882:	7dfb      	ldrb	r3, [r7, #23]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b40      	cmp	r3, #64	; 0x40
 80038d0:	d108      	bne.n	80038e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038e2:	e007      	b.n	80038f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	60da      	str	r2, [r3, #12]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e039      	b.n	8003986 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fe f9e2 	bl	8001cf0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003950:	f023 0107 	bic.w	r1, r3, #7
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <HAL_DMA2D_Init+0x90>)
 8003968:	4013      	ands	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68d1      	ldr	r1, [r2, #12]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6812      	ldr	r2, [r2, #0]
 8003972:	430b      	orrs	r3, r1
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	ffffc000 	.word	0xffffc000

08003994 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d026      	beq.n	8003a04 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d021      	beq.n	8003a04 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ce:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	f043 0201 	orr.w	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2201      	movs	r2, #1
 80039e2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2204      	movs	r2, #4
 80039e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d026      	beq.n	8003a5c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d021      	beq.n	8003a5c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a26:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a34:	f043 0202 	orr.w	r2, r3, #2
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2204      	movs	r2, #4
 8003a40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d026      	beq.n	8003ab4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d021      	beq.n	8003ab4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2208      	movs	r2, #8
 8003a86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8c:	f043 0204 	orr.w	r2, r3, #4
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2204      	movs	r2, #4
 8003a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d013      	beq.n	8003ae6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2204      	movs	r2, #4
 8003ade:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f853 	bl	8003b8c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d024      	beq.n	8003b3a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01f      	beq.n	8003b3a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b08:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01f      	beq.n	8003b84 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01a      	beq.n	8003b84 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b5c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2210      	movs	r2, #16
 8003b64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f80e 	bl	8003ba0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_DMA2D_ConfigLayer+0x20>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e079      	b.n	8003cc8 <HAL_DMA2D_ConfigLayer+0x114>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	3318      	adds	r3, #24
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003bfe:	4b35      	ldr	r3, [pc, #212]	; (8003cd4 <HAL_DMA2D_ConfigLayer+0x120>)
 8003c00:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b0a      	cmp	r3, #10
 8003c08:	d003      	beq.n	8003c12 <HAL_DMA2D_ConfigLayer+0x5e>
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b09      	cmp	r3, #9
 8003c10:	d107      	bne.n	8003c22 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e005      	b.n	8003c2e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d120      	bne.n	8003c76 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	ea02 0103 	and.w	r1, r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b0a      	cmp	r3, #10
 8003c5c:	d003      	beq.n	8003c66 <HAL_DMA2D_ConfigLayer+0xb2>
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b09      	cmp	r3, #9
 8003c64:	d127      	bne.n	8003cb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28
 8003c74:	e01f      	b.n	8003cb6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	ea02 0103 	and.w	r1, r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	6812      	ldr	r2, [r2, #0]
 8003c96:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b0a      	cmp	r3, #10
 8003c9e:	d003      	beq.n	8003ca8 <HAL_DMA2D_ConfigLayer+0xf4>
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b09      	cmp	r3, #9
 8003ca6:	d106      	bne.n	8003cb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003cb4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	ff03000f 	.word	0xff03000f

08003cd8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61fb      	str	r3, [r7, #28]
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003ce8:	4ba1      	ldr	r3, [pc, #644]	; (8003f70 <HAL_ETH_Init+0x298>)
 8003cea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e182      	b.n	8004004 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fe f812 	bl	8001d3c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d18:	4b96      	ldr	r3, [pc, #600]	; (8003f74 <HAL_ETH_Init+0x29c>)
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	4a95      	ldr	r2, [pc, #596]	; (8003f74 <HAL_ETH_Init+0x29c>)
 8003d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d22:	6453      	str	r3, [r2, #68]	; 0x44
 8003d24:	4b93      	ldr	r3, [pc, #588]	; (8003f74 <HAL_ETH_Init+0x29c>)
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d30:	4b91      	ldr	r3, [pc, #580]	; (8003f78 <HAL_ETH_Init+0x2a0>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	4a90      	ldr	r2, [pc, #576]	; (8003f78 <HAL_ETH_Init+0x2a0>)
 8003d36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d3a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d3c:	4b8e      	ldr	r3, [pc, #568]	; (8003f78 <HAL_ETH_Init+0x2a0>)
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	498c      	ldr	r1, [pc, #560]	; (8003f78 <HAL_ETH_Init+0x2a0>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	f043 0301 	orr.w	r3, r3, #1
 8003d5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d60:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003d62:	f7ff f829 	bl	8002db8 <HAL_GetTick>
 8003d66:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003d68:	e011      	b.n	8003d8e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003d6a:	f7ff f825 	bl	8002db8 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003d78:	d909      	bls.n	8003d8e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e13a      	b.n	8004004 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e4      	bne.n	8003d6a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f023 031c 	bic.w	r3, r3, #28
 8003dae:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003db0:	f003 fc16 	bl	80075e0 <HAL_RCC_GetHCLKFreq>
 8003db4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	4a70      	ldr	r2, [pc, #448]	; (8003f7c <HAL_ETH_Init+0x2a4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d908      	bls.n	8003dd0 <HAL_ETH_Init+0xf8>
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	4a6f      	ldr	r2, [pc, #444]	; (8003f80 <HAL_ETH_Init+0x2a8>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d804      	bhi.n	8003dd0 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f043 0308 	orr.w	r3, r3, #8
 8003dcc:	61fb      	str	r3, [r7, #28]
 8003dce:	e027      	b.n	8003e20 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	4a6b      	ldr	r2, [pc, #428]	; (8003f80 <HAL_ETH_Init+0x2a8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d908      	bls.n	8003dea <HAL_ETH_Init+0x112>
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4a65      	ldr	r2, [pc, #404]	; (8003f70 <HAL_ETH_Init+0x298>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d204      	bcs.n	8003dea <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f043 030c 	orr.w	r3, r3, #12
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	e01a      	b.n	8003e20 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	4a60      	ldr	r2, [pc, #384]	; (8003f70 <HAL_ETH_Init+0x298>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d303      	bcc.n	8003dfa <HAL_ETH_Init+0x122>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	4a63      	ldr	r2, [pc, #396]	; (8003f84 <HAL_ETH_Init+0x2ac>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d911      	bls.n	8003e1e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	4a61      	ldr	r2, [pc, #388]	; (8003f84 <HAL_ETH_Init+0x2ac>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d908      	bls.n	8003e14 <HAL_ETH_Init+0x13c>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	4a60      	ldr	r2, [pc, #384]	; (8003f88 <HAL_ETH_Init+0x2b0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d804      	bhi.n	8003e14 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f043 0304 	orr.w	r3, r3, #4
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	e005      	b.n	8003e20 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f043 0310 	orr.w	r3, r3, #16
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	e000      	b.n	8003e20 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003e1e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003e28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f954 	bl	80040dc <HAL_ETH_WritePHYRegister>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00b      	beq.n	8003e52 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003e3e:	6939      	ldr	r1, [r7, #16]
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f9b1 	bl	80041a8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e0d8      	b.n	8004004 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003e52:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003e56:	f7fe ffbb 	bl	8002dd0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80a5 	beq.w	8003fae <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e64:	f7fe ffa8 	bl	8002db8 <HAL_GetTick>
 8003e68:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003e6a:	f107 030c 	add.w	r3, r7, #12
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2101      	movs	r1, #1
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f8ca 	bl	800400c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003e78:	f7fe ff9e 	bl	8002db8 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d90f      	bls.n	8003eaa <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003e8e:	6939      	ldr	r1, [r7, #16]
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f989 	bl	80041a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e0ac      	b.n	8004004 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0da      	beq.n	8003e6a <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003eb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003eb8:	2100      	movs	r1, #0
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f90e 	bl	80040dc <HAL_ETH_WritePHYRegister>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003eca:	6939      	ldr	r1, [r7, #16]
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f96b 	bl	80041a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003eda:	2301      	movs	r3, #1
 8003edc:	e092      	b.n	8004004 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ede:	f7fe ff6b 	bl	8002db8 <HAL_GetTick>
 8003ee2:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003ee4:	f107 030c 	add.w	r3, r7, #12
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2101      	movs	r1, #1
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f88d 	bl	800400c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003ef2:	f7fe ff61 	bl	8002db8 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d90f      	bls.n	8003f24 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003f08:	6939      	ldr	r1, [r7, #16]
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f94c 	bl	80041a8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e06f      	b.n	8004004 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0da      	beq.n	8003ee4 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003f2e:	f107 030c 	add.w	r3, r7, #12
 8003f32:	461a      	mov	r2, r3
 8003f34:	2110      	movs	r1, #16
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f868 	bl	800400c <HAL_ETH_ReadPHYRegister>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003f46:	6939      	ldr	r1, [r7, #16]
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f92d 	bl	80041a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003f56:	2301      	movs	r3, #1
 8003f58:	e054      	b.n	8004004 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d013      	beq.n	8003f8c <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f6a:	60da      	str	r2, [r3, #12]
 8003f6c:	e011      	b.n	8003f92 <HAL_ETH_Init+0x2ba>
 8003f6e:	bf00      	nop
 8003f70:	03938700 	.word	0x03938700
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40013800 	.word	0x40013800
 8003f7c:	01312cff 	.word	0x01312cff
 8003f80:	02160ebf 	.word	0x02160ebf
 8003f84:	05f5e0ff 	.word	0x05f5e0ff
 8003f88:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	609a      	str	r2, [r3, #8]
 8003fa2:	e026      	b.n	8003ff2 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	e021      	b.n	8003ff2 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	08db      	lsrs	r3, r3, #3
 8003fb4:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	085b      	lsrs	r3, r3, #1
 8003fbc:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f888 	bl	80040dc <HAL_ETH_WritePHYRegister>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8e5 	bl	80041a8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e00c      	b.n	8004004 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003fea:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003fee:	f7fe feef 	bl	8002dd0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003ff2:	6939      	ldr	r1, [r7, #16]
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f8d7 	bl	80041a8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	460b      	mov	r3, r1
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b82      	cmp	r3, #130	; 0x82
 800402c:	d101      	bne.n	8004032 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800402e:	2302      	movs	r3, #2
 8004030:	e050      	b.n	80040d4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2282      	movs	r2, #130	; 0x82
 8004036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f003 031c 	and.w	r3, r3, #28
 8004048:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8a1b      	ldrh	r3, [r3, #16]
 800404e:	02db      	lsls	r3, r3, #11
 8004050:	b29b      	uxth	r3, r3
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004058:	897b      	ldrh	r3, [r7, #10]
 800405a:	019b      	lsls	r3, r3, #6
 800405c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f023 0302 	bic.w	r3, r3, #2
 800406c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800407e:	f7fe fe9b 	bl	8002db8 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004084:	e015      	b.n	80040b2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004086:	f7fe fe97 	bl	8002db8 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d309      	bcc.n	80040aa <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e014      	b.n	80040d4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e4      	bne.n	8004086 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	461a      	mov	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	460b      	mov	r3, r1
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b42      	cmp	r3, #66	; 0x42
 80040fc:	d101      	bne.n	8004102 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80040fe:	2302      	movs	r3, #2
 8004100:	e04e      	b.n	80041a0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2242      	movs	r2, #66	; 0x42
 8004106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f003 031c 	and.w	r3, r3, #28
 8004118:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8a1b      	ldrh	r3, [r3, #16]
 800411e:	02db      	lsls	r3, r3, #11
 8004120:	b29b      	uxth	r3, r3
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004128:	897b      	ldrh	r3, [r7, #10]
 800412a:	019b      	lsls	r3, r3, #6
 800412c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	b29a      	uxth	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004158:	f7fe fe2e 	bl	8002db8 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800415e:	e015      	b.n	800418c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8004160:	f7fe fe2a 	bl	8002db8 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416e:	d309      	bcc.n	8004184 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e00d      	b.n	80041a0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e4      	bne.n	8004160 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b0b0      	sub	sp, #192	; 0xc0
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041c4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80041d2:	2300      	movs	r3, #0
 80041d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80041d6:	2300      	movs	r3, #0
 80041d8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80041da:	2300      	movs	r3, #0
 80041dc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80041de:	2300      	movs	r3, #0
 80041e0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d103      	bne.n	80041f6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80041ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f2:	663b      	str	r3, [r7, #96]	; 0x60
 80041f4:	e001      	b.n	80041fa <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80041fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041fe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004200:	2300      	movs	r3, #0
 8004202:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004204:	2300      	movs	r3, #0
 8004206:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004208:	2300      	movs	r3, #0
 800420a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800420c:	2300      	movs	r3, #0
 800420e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004210:	2300      	movs	r3, #0
 8004212:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004214:	2340      	movs	r3, #64	; 0x40
 8004216:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800421e:	2300      	movs	r3, #0
 8004220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800422a:	2300      	movs	r3, #0
 800422c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004230:	2300      	movs	r3, #0
 8004232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004236:	2300      	movs	r3, #0
 8004238:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800423c:	2300      	movs	r3, #0
 800423e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004242:	2300      	movs	r3, #0
 8004244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800424e:	2300      	movs	r3, #0
 8004250:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800425a:	2300      	movs	r3, #0
 800425c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800427c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004280:	4ba9      	ldr	r3, [pc, #676]	; (8004528 <ETH_MACDMAConfig+0x380>)
 8004282:	4013      	ands	r3, r2
 8004284:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004288:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800428a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800428c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800428e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004290:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8004292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004294:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800429a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800429c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800429e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80042a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80042a2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80042a8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80042aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80042ac:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80042ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80042b0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80042b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80042b4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80042b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80042b8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80042ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80042bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80042be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042d0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042dc:	2001      	movs	r0, #1
 80042de:	f7fe fd77 	bl	8002dd0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042ea:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80042ec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80042ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80042f0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80042f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80042f4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80042f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80042fa:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80042fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004300:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004302:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004306:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800430c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004310:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004318:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800431a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004326:	2001      	movs	r0, #1
 8004328:	f7fe fd52 	bl	8002dd0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004334:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800433e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004348:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004354:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004358:	f64f 7341 	movw	r3, #65345	; 0xff41
 800435c:	4013      	ands	r3, r2
 800435e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004362:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004366:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004368:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800436c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800436e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004372:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004378:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800437a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800437e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004380:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004384:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004386:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004398:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80043a4:	2001      	movs	r0, #1
 80043a6:	f7fe fd13 	bl	8002dd0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043b2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80043b4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80043b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80043ce:	2001      	movs	r0, #1
 80043d0:	f7fe fcfe 	bl	8002dd0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043dc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80043e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043e6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80043ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80043f0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80043fa:	2300      	movs	r3, #0
 80043fc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80043fe:	2300      	movs	r3, #0
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004402:	2304      	movs	r3, #4
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800440a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800440c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004410:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004412:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800441c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004422:	2300      	movs	r3, #0
 8004424:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004426:	2300      	movs	r3, #0
 8004428:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8004438:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800443c:	4b3b      	ldr	r3, [pc, #236]	; (800452c <ETH_MACDMAConfig+0x384>)
 800443e:	4013      	ands	r3, r2
 8004440:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004444:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004446:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004448:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800444a:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800444c:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800444e:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004450:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004452:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004454:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004456:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004458:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800445a:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800445c:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004460:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004464:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004466:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004478:	461a      	mov	r2, r3
 800447a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800447e:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800448e:	2001      	movs	r0, #1
 8004490:	f7fe fc9e 	bl	8002dd0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449c:	461a      	mov	r2, r3
 800449e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044a2:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80044a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80044a8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80044aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80044ac:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80044ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80044b0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80044b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80044b4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80044b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80044ba:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80044bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80044be:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044cc:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80044dc:	2001      	movs	r0, #1
 80044de:	f7fe fc77 	bl	8002dd0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ea:	461a      	mov	r2, r3
 80044ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044f0:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d10b      	bne.n	8004512 <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004502:	69d9      	ldr	r1, [r3, #28]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b09      	ldr	r3, [pc, #36]	; (8004530 <ETH_MACDMAConfig+0x388>)
 800450a:	430b      	orrs	r3, r1
 800450c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004510:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	461a      	mov	r2, r3
 8004518:	2100      	movs	r1, #0
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f80a 	bl	8004534 <ETH_MACAddressConfig>
}
 8004520:	bf00      	nop
 8004522:	37c0      	adds	r7, #192	; 0xc0
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	ff20810f 	.word	0xff20810f
 800452c:	f8de3f23 	.word	0xf8de3f23
 8004530:	00010040 	.word	0x00010040

08004534 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3305      	adds	r3, #5
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	021b      	lsls	r3, r3, #8
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	3204      	adds	r2, #4
 800454c:	7812      	ldrb	r2, [r2, #0]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	4b11      	ldr	r3, [pc, #68]	; (800459c <ETH_MACAddressConfig+0x68>)
 8004556:	4413      	add	r3, r2
 8004558:	461a      	mov	r2, r3
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3303      	adds	r3, #3
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	061a      	lsls	r2, r3, #24
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3302      	adds	r3, #2
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3301      	adds	r3, #1
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	4313      	orrs	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	7812      	ldrb	r2, [r2, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <ETH_MACAddressConfig+0x6c>)
 8004586:	4413      	add	r3, r2
 8004588:	461a      	mov	r2, r3
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	6013      	str	r3, [r2, #0]
}
 800458e:	bf00      	nop
 8004590:	371c      	adds	r7, #28
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40028040 	.word	0x40028040
 80045a0:	40028044 	.word	0x40028044

080045a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b089      	sub	sp, #36	; 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	e175      	b.n	80048b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045c4:	2201      	movs	r2, #1
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	429a      	cmp	r2, r3
 80045de:	f040 8164 	bne.w	80048aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d005      	beq.n	80045fa <HAL_GPIO_Init+0x56>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d130      	bne.n	800465c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	2203      	movs	r2, #3
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4013      	ands	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4313      	orrs	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004630:	2201      	movs	r2, #1
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f003 0201 	and.w	r2, r3, #1
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4313      	orrs	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	2b03      	cmp	r3, #3
 8004666:	d017      	beq.n	8004698 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	2203      	movs	r2, #3
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d123      	bne.n	80046ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	08da      	lsrs	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3208      	adds	r2, #8
 80046ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	220f      	movs	r2, #15
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	08da      	lsrs	r2, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3208      	adds	r2, #8
 80046e6:	69b9      	ldr	r1, [r7, #24]
 80046e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	2203      	movs	r2, #3
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 0203 	and.w	r2, r3, #3
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80be 	beq.w	80048aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472e:	4b66      	ldr	r3, [pc, #408]	; (80048c8 <HAL_GPIO_Init+0x324>)
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	4a65      	ldr	r2, [pc, #404]	; (80048c8 <HAL_GPIO_Init+0x324>)
 8004734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004738:	6453      	str	r3, [r2, #68]	; 0x44
 800473a:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <HAL_GPIO_Init+0x324>)
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004746:	4a61      	ldr	r2, [pc, #388]	; (80048cc <HAL_GPIO_Init+0x328>)
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	3302      	adds	r3, #2
 800474e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004752:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	220f      	movs	r2, #15
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a58      	ldr	r2, [pc, #352]	; (80048d0 <HAL_GPIO_Init+0x32c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d037      	beq.n	80047e2 <HAL_GPIO_Init+0x23e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a57      	ldr	r2, [pc, #348]	; (80048d4 <HAL_GPIO_Init+0x330>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d031      	beq.n	80047de <HAL_GPIO_Init+0x23a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a56      	ldr	r2, [pc, #344]	; (80048d8 <HAL_GPIO_Init+0x334>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d02b      	beq.n	80047da <HAL_GPIO_Init+0x236>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a55      	ldr	r2, [pc, #340]	; (80048dc <HAL_GPIO_Init+0x338>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d025      	beq.n	80047d6 <HAL_GPIO_Init+0x232>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a54      	ldr	r2, [pc, #336]	; (80048e0 <HAL_GPIO_Init+0x33c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d01f      	beq.n	80047d2 <HAL_GPIO_Init+0x22e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a53      	ldr	r2, [pc, #332]	; (80048e4 <HAL_GPIO_Init+0x340>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d019      	beq.n	80047ce <HAL_GPIO_Init+0x22a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a52      	ldr	r2, [pc, #328]	; (80048e8 <HAL_GPIO_Init+0x344>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <HAL_GPIO_Init+0x226>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a51      	ldr	r2, [pc, #324]	; (80048ec <HAL_GPIO_Init+0x348>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00d      	beq.n	80047c6 <HAL_GPIO_Init+0x222>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a50      	ldr	r2, [pc, #320]	; (80048f0 <HAL_GPIO_Init+0x34c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d007      	beq.n	80047c2 <HAL_GPIO_Init+0x21e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a4f      	ldr	r2, [pc, #316]	; (80048f4 <HAL_GPIO_Init+0x350>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <HAL_GPIO_Init+0x21a>
 80047ba:	2309      	movs	r3, #9
 80047bc:	e012      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047be:	230a      	movs	r3, #10
 80047c0:	e010      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047c2:	2308      	movs	r3, #8
 80047c4:	e00e      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047c6:	2307      	movs	r3, #7
 80047c8:	e00c      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047ca:	2306      	movs	r3, #6
 80047cc:	e00a      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047ce:	2305      	movs	r3, #5
 80047d0:	e008      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047d2:	2304      	movs	r3, #4
 80047d4:	e006      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047d6:	2303      	movs	r3, #3
 80047d8:	e004      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047da:	2302      	movs	r3, #2
 80047dc:	e002      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047e2:	2300      	movs	r3, #0
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	f002 0203 	and.w	r2, r2, #3
 80047ea:	0092      	lsls	r2, r2, #2
 80047ec:	4093      	lsls	r3, r2
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80047f4:	4935      	ldr	r1, [pc, #212]	; (80048cc <HAL_GPIO_Init+0x328>)
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	089b      	lsrs	r3, r3, #2
 80047fa:	3302      	adds	r3, #2
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004802:	4b3d      	ldr	r3, [pc, #244]	; (80048f8 <HAL_GPIO_Init+0x354>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004826:	4a34      	ldr	r2, [pc, #208]	; (80048f8 <HAL_GPIO_Init+0x354>)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800482c:	4b32      	ldr	r3, [pc, #200]	; (80048f8 <HAL_GPIO_Init+0x354>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004850:	4a29      	ldr	r2, [pc, #164]	; (80048f8 <HAL_GPIO_Init+0x354>)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004856:	4b28      	ldr	r3, [pc, #160]	; (80048f8 <HAL_GPIO_Init+0x354>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	43db      	mvns	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800487a:	4a1f      	ldr	r2, [pc, #124]	; (80048f8 <HAL_GPIO_Init+0x354>)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004880:	4b1d      	ldr	r3, [pc, #116]	; (80048f8 <HAL_GPIO_Init+0x354>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <HAL_GPIO_Init+0x354>)
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3301      	adds	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2b0f      	cmp	r3, #15
 80048b4:	f67f ae86 	bls.w	80045c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	3724      	adds	r7, #36	; 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40013800 	.word	0x40013800
 80048d0:	40020000 	.word	0x40020000
 80048d4:	40020400 	.word	0x40020400
 80048d8:	40020800 	.word	0x40020800
 80048dc:	40020c00 	.word	0x40020c00
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40021400 	.word	0x40021400
 80048e8:	40021800 	.word	0x40021800
 80048ec:	40021c00 	.word	0x40021c00
 80048f0:	40022000 	.word	0x40022000
 80048f4:	40022400 	.word	0x40022400
 80048f8:	40013c00 	.word	0x40013c00

080048fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	887b      	ldrh	r3, [r7, #2]
 800490e:	4013      	ands	r3, r2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004914:	2301      	movs	r3, #1
 8004916:	73fb      	strb	r3, [r7, #15]
 8004918:	e001      	b.n	800491e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800491a:	2300      	movs	r3, #0
 800491c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800491e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	807b      	strh	r3, [r7, #2]
 8004938:	4613      	mov	r3, r2
 800493a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800493c:	787b      	ldrb	r3, [r7, #1]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004942:	887a      	ldrh	r2, [r7, #2]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004948:	e003      	b.n	8004952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800494a:	887b      	ldrh	r3, [r7, #2]
 800494c:	041a      	lsls	r2, r3, #16
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	619a      	str	r2, [r3, #24]
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800495e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004960:	b08f      	sub	sp, #60	; 0x3c
 8004962:	af0a      	add	r7, sp, #40	; 0x28
 8004964:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e054      	b.n	8004a1a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f00d fdd8 	bl	8012540 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2203      	movs	r2, #3
 8004994:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d102      	bne.n	80049aa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f007 ff09 	bl	800c7c6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	687e      	ldr	r6, [r7, #4]
 80049bc:	466d      	mov	r5, sp
 80049be:	f106 0410 	add.w	r4, r6, #16
 80049c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80049d2:	1d33      	adds	r3, r6, #4
 80049d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049d6:	6838      	ldr	r0, [r7, #0]
 80049d8:	f007 fe8c 	bl	800c6f4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2101      	movs	r1, #1
 80049e2:	4618      	mov	r0, r3
 80049e4:	f007 ff00 	bl	800c7e8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	687e      	ldr	r6, [r7, #4]
 80049f0:	466d      	mov	r5, sp
 80049f2:	f106 0410 	add.w	r4, r6, #16
 80049f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a02:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a06:	1d33      	adds	r3, r6, #4
 8004a08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a0a:	6838      	ldr	r0, [r7, #0]
 8004a0c:	f008 f882 	bl	800cb14 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a22 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004a22:	b590      	push	{r4, r7, lr}
 8004a24:	b089      	sub	sp, #36	; 0x24
 8004a26:	af04      	add	r7, sp, #16
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	4608      	mov	r0, r1
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	461a      	mov	r2, r3
 8004a30:	4603      	mov	r3, r0
 8004a32:	70fb      	strb	r3, [r7, #3]
 8004a34:	460b      	mov	r3, r1
 8004a36:	70bb      	strb	r3, [r7, #2]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_HCD_HC_Init+0x28>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e076      	b.n	8004b38 <HAL_HCD_HC_Init+0x116>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	212c      	movs	r1, #44	; 0x2c
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	333d      	adds	r3, #61	; 0x3d
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	212c      	movs	r1, #44	; 0x2c
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3338      	adds	r3, #56	; 0x38
 8004a72:	787a      	ldrb	r2, [r7, #1]
 8004a74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	212c      	movs	r1, #44	; 0x2c
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	4413      	add	r3, r2
 8004a82:	3340      	adds	r3, #64	; 0x40
 8004a84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004a86:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	212c      	movs	r1, #44	; 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	3339      	adds	r3, #57	; 0x39
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	212c      	movs	r1, #44	; 0x2c
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	333f      	adds	r3, #63	; 0x3f
 8004aa8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004aac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	78ba      	ldrb	r2, [r7, #2]
 8004ab2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ab6:	b2d0      	uxtb	r0, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	212c      	movs	r1, #44	; 0x2c
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	333a      	adds	r3, #58	; 0x3a
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004ac8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	da09      	bge.n	8004ae4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	212c      	movs	r1, #44	; 0x2c
 8004ad6:	fb01 f303 	mul.w	r3, r1, r3
 8004ada:	4413      	add	r3, r2
 8004adc:	333b      	adds	r3, #59	; 0x3b
 8004ade:	2201      	movs	r2, #1
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	e008      	b.n	8004af6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	212c      	movs	r1, #44	; 0x2c
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	333b      	adds	r3, #59	; 0x3b
 8004af2:	2200      	movs	r2, #0
 8004af4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	212c      	movs	r1, #44	; 0x2c
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	333c      	adds	r3, #60	; 0x3c
 8004b04:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004b08:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6818      	ldr	r0, [r3, #0]
 8004b0e:	787c      	ldrb	r4, [r7, #1]
 8004b10:	78ba      	ldrb	r2, [r7, #2]
 8004b12:	78f9      	ldrb	r1, [r7, #3]
 8004b14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b16:	9302      	str	r3, [sp, #8]
 8004b18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4623      	mov	r3, r4
 8004b26:	f008 f96f 	bl	800ce08 <USB_HC_Init>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd90      	pop	{r4, r7, pc}

08004b40 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_HCD_HC_Halt+0x1e>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e00f      	b.n	8004b7e <HAL_HCD_HC_Halt+0x3e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	78fa      	ldrb	r2, [r7, #3]
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f008 fbbb 	bl	800d2ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	4608      	mov	r0, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	461a      	mov	r2, r3
 8004b96:	4603      	mov	r3, r0
 8004b98:	70fb      	strb	r3, [r7, #3]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	70bb      	strb	r3, [r7, #2]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	212c      	movs	r1, #44	; 0x2c
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	4413      	add	r3, r2
 8004bae:	333b      	adds	r3, #59	; 0x3b
 8004bb0:	78ba      	ldrb	r2, [r7, #2]
 8004bb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	212c      	movs	r1, #44	; 0x2c
 8004bba:	fb01 f303 	mul.w	r3, r1, r3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	333f      	adds	r3, #63	; 0x3f
 8004bc2:	787a      	ldrb	r2, [r7, #1]
 8004bc4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004bc6:	7c3b      	ldrb	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d112      	bne.n	8004bf2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	212c      	movs	r1, #44	; 0x2c
 8004bd2:	fb01 f303 	mul.w	r3, r1, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3342      	adds	r3, #66	; 0x42
 8004bda:	2203      	movs	r2, #3
 8004bdc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	212c      	movs	r1, #44	; 0x2c
 8004be4:	fb01 f303 	mul.w	r3, r1, r3
 8004be8:	4413      	add	r3, r2
 8004bea:	333d      	adds	r3, #61	; 0x3d
 8004bec:	7f3a      	ldrb	r2, [r7, #28]
 8004bee:	701a      	strb	r2, [r3, #0]
 8004bf0:	e008      	b.n	8004c04 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bf2:	78fb      	ldrb	r3, [r7, #3]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	212c      	movs	r1, #44	; 0x2c
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	3342      	adds	r3, #66	; 0x42
 8004c00:	2202      	movs	r2, #2
 8004c02:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004c04:	787b      	ldrb	r3, [r7, #1]
 8004c06:	2b03      	cmp	r3, #3
 8004c08:	f200 80c6 	bhi.w	8004d98 <HAL_HCD_HC_SubmitRequest+0x210>
 8004c0c:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c25 	.word	0x08004c25
 8004c18:	08004d85 	.word	0x08004d85
 8004c1c:	08004c89 	.word	0x08004c89
 8004c20:	08004d07 	.word	0x08004d07
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004c24:	7c3b      	ldrb	r3, [r7, #16]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	f040 80b8 	bne.w	8004d9c <HAL_HCD_HC_SubmitRequest+0x214>
 8004c2c:	78bb      	ldrb	r3, [r7, #2]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f040 80b4 	bne.w	8004d9c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004c34:	8b3b      	ldrh	r3, [r7, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d108      	bne.n	8004c4c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004c3a:	78fb      	ldrb	r3, [r7, #3]
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	212c      	movs	r1, #44	; 0x2c
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	4413      	add	r3, r2
 8004c46:	3355      	adds	r3, #85	; 0x55
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	212c      	movs	r1, #44	; 0x2c
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	3355      	adds	r3, #85	; 0x55
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d109      	bne.n	8004c74 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	212c      	movs	r1, #44	; 0x2c
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3342      	adds	r3, #66	; 0x42
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c72:	e093      	b.n	8004d9c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	212c      	movs	r1, #44	; 0x2c
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	3342      	adds	r3, #66	; 0x42
 8004c82:	2202      	movs	r2, #2
 8004c84:	701a      	strb	r2, [r3, #0]
      break;
 8004c86:	e089      	b.n	8004d9c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004c88:	78bb      	ldrb	r3, [r7, #2]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d11d      	bne.n	8004cca <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	212c      	movs	r1, #44	; 0x2c
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	4413      	add	r3, r2
 8004c9a:	3355      	adds	r3, #85	; 0x55
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	212c      	movs	r1, #44	; 0x2c
 8004ca8:	fb01 f303 	mul.w	r3, r1, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	3342      	adds	r3, #66	; 0x42
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004cb4:	e073      	b.n	8004d9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	212c      	movs	r1, #44	; 0x2c
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	3342      	adds	r3, #66	; 0x42
 8004cc4:	2202      	movs	r2, #2
 8004cc6:	701a      	strb	r2, [r3, #0]
      break;
 8004cc8:	e069      	b.n	8004d9e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	212c      	movs	r1, #44	; 0x2c
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3354      	adds	r3, #84	; 0x54
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d109      	bne.n	8004cf2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	212c      	movs	r1, #44	; 0x2c
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	4413      	add	r3, r2
 8004cea:	3342      	adds	r3, #66	; 0x42
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
      break;
 8004cf0:	e055      	b.n	8004d9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	212c      	movs	r1, #44	; 0x2c
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3342      	adds	r3, #66	; 0x42
 8004d00:	2202      	movs	r2, #2
 8004d02:	701a      	strb	r2, [r3, #0]
      break;
 8004d04:	e04b      	b.n	8004d9e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004d06:	78bb      	ldrb	r3, [r7, #2]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11d      	bne.n	8004d48 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	212c      	movs	r1, #44	; 0x2c
 8004d12:	fb01 f303 	mul.w	r3, r1, r3
 8004d16:	4413      	add	r3, r2
 8004d18:	3355      	adds	r3, #85	; 0x55
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d109      	bne.n	8004d34 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	212c      	movs	r1, #44	; 0x2c
 8004d26:	fb01 f303 	mul.w	r3, r1, r3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	3342      	adds	r3, #66	; 0x42
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004d32:	e034      	b.n	8004d9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	212c      	movs	r1, #44	; 0x2c
 8004d3a:	fb01 f303 	mul.w	r3, r1, r3
 8004d3e:	4413      	add	r3, r2
 8004d40:	3342      	adds	r3, #66	; 0x42
 8004d42:	2202      	movs	r2, #2
 8004d44:	701a      	strb	r2, [r3, #0]
      break;
 8004d46:	e02a      	b.n	8004d9e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	212c      	movs	r1, #44	; 0x2c
 8004d4e:	fb01 f303 	mul.w	r3, r1, r3
 8004d52:	4413      	add	r3, r2
 8004d54:	3354      	adds	r3, #84	; 0x54
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d109      	bne.n	8004d70 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	212c      	movs	r1, #44	; 0x2c
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	3342      	adds	r3, #66	; 0x42
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
      break;
 8004d6e:	e016      	b.n	8004d9e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d70:	78fb      	ldrb	r3, [r7, #3]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	212c      	movs	r1, #44	; 0x2c
 8004d76:	fb01 f303 	mul.w	r3, r1, r3
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3342      	adds	r3, #66	; 0x42
 8004d7e:	2202      	movs	r2, #2
 8004d80:	701a      	strb	r2, [r3, #0]
      break;
 8004d82:	e00c      	b.n	8004d9e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	212c      	movs	r1, #44	; 0x2c
 8004d8a:	fb01 f303 	mul.w	r3, r1, r3
 8004d8e:	4413      	add	r3, r2
 8004d90:	3342      	adds	r3, #66	; 0x42
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
      break;
 8004d96:	e002      	b.n	8004d9e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004d98:	bf00      	nop
 8004d9a:	e000      	b.n	8004d9e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004d9c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	212c      	movs	r1, #44	; 0x2c
 8004da4:	fb01 f303 	mul.w	r3, r1, r3
 8004da8:	4413      	add	r3, r2
 8004daa:	3344      	adds	r3, #68	; 0x44
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	8b3a      	ldrh	r2, [r7, #24]
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	202c      	movs	r0, #44	; 0x2c
 8004db8:	fb00 f303 	mul.w	r3, r0, r3
 8004dbc:	440b      	add	r3, r1
 8004dbe:	334c      	adds	r3, #76	; 0x4c
 8004dc0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	212c      	movs	r1, #44	; 0x2c
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	4413      	add	r3, r2
 8004dce:	3360      	adds	r3, #96	; 0x60
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	212c      	movs	r1, #44	; 0x2c
 8004dda:	fb01 f303 	mul.w	r3, r1, r3
 8004dde:	4413      	add	r3, r2
 8004de0:	3350      	adds	r3, #80	; 0x50
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	212c      	movs	r1, #44	; 0x2c
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	4413      	add	r3, r2
 8004df2:	3339      	adds	r3, #57	; 0x39
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	212c      	movs	r1, #44	; 0x2c
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	3361      	adds	r3, #97	; 0x61
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	222c      	movs	r2, #44	; 0x2c
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	3338      	adds	r3, #56	; 0x38
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	18d1      	adds	r1, r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	461a      	mov	r2, r3
 8004e24:	f008 f90e 	bl	800d044 <USB_HC_StartXfer>
 8004e28:	4603      	mov	r3, r0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop

08004e34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f007 fe21 	bl	800ca92 <USB_GetMode>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	f040 80f6 	bne.w	8005044 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f007 fe05 	bl	800ca6c <USB_ReadInterrupts>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80ec 	beq.w	8005042 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f007 fdfc 	bl	800ca6c <USB_ReadInterrupts>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e7e:	d104      	bne.n	8004e8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f007 fdec 	bl	800ca6c <USB_ReadInterrupts>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9e:	d104      	bne.n	8004eaa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ea8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f007 fddc 	bl	800ca6c <USB_ReadInterrupts>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ebe:	d104      	bne.n	8004eca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004ec8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f007 fdcc 	bl	800ca6c <USB_ReadInterrupts>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d103      	bne.n	8004ee6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f007 fdbe 	bl	800ca6c <USB_ReadInterrupts>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004efa:	d11c      	bne.n	8004f36 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004f04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004f16:	2110      	movs	r1, #16
 8004f18:	6938      	ldr	r0, [r7, #16]
 8004f1a:	f007 fcb1 	bl	800c880 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004f1e:	6938      	ldr	r0, [r7, #16]
 8004f20:	f007 fce0 	bl	800c8e4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2101      	movs	r1, #1
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f007 fea6 	bl	800cc7c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f00d fb77 	bl	8012624 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f007 fd96 	bl	800ca6c <USB_ReadInterrupts>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f4a:	d102      	bne.n	8004f52 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 f8ca 	bl	80060e6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f007 fd88 	bl	800ca6c <USB_ReadInterrupts>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d106      	bne.n	8004f74 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f00d fb40 	bl	80125ec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2208      	movs	r2, #8
 8004f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f007 fd77 	bl	800ca6c <USB_ReadInterrupts>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d101      	bne.n	8004f8c <HAL_HCD_IRQHandler+0x158>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_HCD_IRQHandler+0x15a>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d012      	beq.n	8004fb8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699a      	ldr	r2, [r3, #24]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0210 	bic.w	r2, r2, #16
 8004fa0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 ffcd 	bl	8005f42 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0210 	orr.w	r2, r2, #16
 8004fb6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f007 fd55 	bl	800ca6c <USB_ReadInterrupts>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fcc:	d13a      	bne.n	8005044 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f008 f978 	bl	800d2c8 <USB_HC_ReadInterrupt>
 8004fd8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	e025      	b.n	800502c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fec:	f003 0301 	and.w	r3, r3, #1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d018      	beq.n	8005026 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800500a:	d106      	bne.n	800501a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8ab 	bl	800516e <HCD_HC_IN_IRQHandler>
 8005018:	e005      	b.n	8005026 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	4619      	mov	r1, r3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fc25 	bl	8005870 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	3301      	adds	r3, #1
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	429a      	cmp	r2, r3
 8005034:	d3d4      	bcc.n	8004fe0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800503e:	615a      	str	r2, [r3, #20]
 8005040:	e000      	b.n	8005044 <HAL_HCD_IRQHandler+0x210>
      return;
 8005042:	bf00      	nop
    }
  }
}
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_HCD_Start+0x16>
 800505c:	2302      	movs	r3, #2
 800505e:	e013      	b.n	8005088 <HAL_HCD_Start+0x3e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2101      	movs	r1, #1
 800506e:	4618      	mov	r0, r3
 8005070:	f007 fe68 	bl	800cd44 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f007 fb93 	bl	800c7a4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_HCD_Stop+0x16>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e00d      	b.n	80050c2 <HAL_HCD_Stop+0x32>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f008 fa50 	bl	800d558 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f007 fe0a 	bl	800ccf0 <USB_ResetPort>
 80050dc:	4603      	mov	r3, r0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	460b      	mov	r3, r1
 80050f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	212c      	movs	r1, #44	; 0x2c
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	4413      	add	r3, r2
 80050fe:	3360      	adds	r3, #96	; 0x60
 8005100:	781b      	ldrb	r3, [r3, #0]
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	460b      	mov	r3, r1
 8005118:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800511a:	78fb      	ldrb	r3, [r7, #3]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	212c      	movs	r1, #44	; 0x2c
 8005120:	fb01 f303 	mul.w	r3, r1, r3
 8005124:	4413      	add	r3, r2
 8005126:	3350      	adds	r3, #80	; 0x50
 8005128:	681b      	ldr	r3, [r3, #0]
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f007 fe4e 	bl	800cde4 <USB_GetCurrentFrame>
 8005148:	4603      	mov	r3, r0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f007 fe29 	bl	800cdb6 <USB_GetHostSpeed>
 8005164:	4603      	mov	r3, r0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b086      	sub	sp, #24
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	460b      	mov	r3, r1
 8005178:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4413      	add	r3, r2
 8005190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b04      	cmp	r3, #4
 800519c:	d11a      	bne.n	80051d4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051aa:	461a      	mov	r2, r3
 80051ac:	2304      	movs	r3, #4
 80051ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	212c      	movs	r1, #44	; 0x2c
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	4413      	add	r3, r2
 80051bc:	3361      	adds	r3, #97	; 0x61
 80051be:	2206      	movs	r2, #6
 80051c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	4611      	mov	r1, r2
 80051cc:	4618      	mov	r0, r3
 80051ce:	f008 f88c 	bl	800d2ea <USB_HC_Halt>
 80051d2:	e0af      	b.n	8005334 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ea:	d11b      	bne.n	8005224 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f8:	461a      	mov	r2, r3
 80051fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	212c      	movs	r1, #44	; 0x2c
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	4413      	add	r3, r2
 800520c:	3361      	adds	r3, #97	; 0x61
 800520e:	2207      	movs	r2, #7
 8005210:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	4611      	mov	r1, r2
 800521c:	4618      	mov	r0, r3
 800521e:	f008 f864 	bl	800d2ea <USB_HC_Halt>
 8005222:	e087      	b.n	8005334 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b20      	cmp	r3, #32
 8005238:	d109      	bne.n	800524e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4413      	add	r3, r2
 8005242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005246:	461a      	mov	r2, r3
 8005248:	2320      	movs	r3, #32
 800524a:	6093      	str	r3, [r2, #8]
 800524c:	e072      	b.n	8005334 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b08      	cmp	r3, #8
 8005262:	d11a      	bne.n	800529a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005270:	461a      	mov	r2, r3
 8005272:	2308      	movs	r3, #8
 8005274:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	212c      	movs	r1, #44	; 0x2c
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	4413      	add	r3, r2
 8005282:	3361      	adds	r3, #97	; 0x61
 8005284:	2205      	movs	r2, #5
 8005286:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f008 f829 	bl	800d2ea <USB_HC_Halt>
 8005298:	e04c      	b.n	8005334 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b0:	d11b      	bne.n	80052ea <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052be:	461a      	mov	r2, r3
 80052c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	212c      	movs	r1, #44	; 0x2c
 80052cc:	fb01 f303 	mul.w	r3, r1, r3
 80052d0:	4413      	add	r3, r2
 80052d2:	3361      	adds	r3, #97	; 0x61
 80052d4:	2208      	movs	r2, #8
 80052d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f008 f801 	bl	800d2ea <USB_HC_Halt>
 80052e8:	e024      	b.n	8005334 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fc:	2b80      	cmp	r3, #128	; 0x80
 80052fe:	d119      	bne.n	8005334 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	4413      	add	r3, r2
 8005308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530c:	461a      	mov	r2, r3
 800530e:	2380      	movs	r3, #128	; 0x80
 8005310:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	212c      	movs	r1, #44	; 0x2c
 8005318:	fb01 f303 	mul.w	r3, r1, r3
 800531c:	4413      	add	r3, r2
 800531e:	3361      	adds	r3, #97	; 0x61
 8005320:	2206      	movs	r2, #6
 8005322:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	4611      	mov	r1, r2
 800532e:	4618      	mov	r0, r3
 8005330:	f007 ffdb 	bl	800d2ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4413      	add	r3, r2
 800533c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534a:	d112      	bne.n	8005372 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	4611      	mov	r1, r2
 8005356:	4618      	mov	r0, r3
 8005358:	f007 ffc7 	bl	800d2ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005368:	461a      	mov	r2, r3
 800536a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800536e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005370:	e27a      	b.n	8005868 <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4413      	add	r3, r2
 800537a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b01      	cmp	r3, #1
 8005386:	f040 810b 	bne.w	80055a0 <HCD_HC_IN_IRQHandler+0x432>
    if (hhcd->Init.dma_enable != 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d019      	beq.n	80053c6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	212c      	movs	r1, #44	; 0x2c
 8005398:	fb01 f303 	mul.w	r3, r1, r3
 800539c:	4413      	add	r3, r2
 800539e:	3348      	adds	r3, #72	; 0x48
 80053a0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	0159      	lsls	r1, r3, #5
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	440b      	add	r3, r1
 80053aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80053b4:	1ad2      	subs	r2, r2, r3
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	202c      	movs	r0, #44	; 0x2c
 80053bc:	fb00 f303 	mul.w	r3, r0, r3
 80053c0:	440b      	add	r3, r1
 80053c2:	3350      	adds	r3, #80	; 0x50
 80053c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	212c      	movs	r1, #44	; 0x2c
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	3361      	adds	r3, #97	; 0x61
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	212c      	movs	r1, #44	; 0x2c
 80053de:	fb01 f303 	mul.w	r3, r1, r3
 80053e2:	4413      	add	r3, r2
 80053e4:	335c      	adds	r3, #92	; 0x5c
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f6:	461a      	mov	r2, r3
 80053f8:	2301      	movs	r3, #1
 80053fa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	212c      	movs	r1, #44	; 0x2c
 8005402:	fb01 f303 	mul.w	r3, r1, r3
 8005406:	4413      	add	r3, r2
 8005408:	333f      	adds	r3, #63	; 0x3f
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	212c      	movs	r1, #44	; 0x2c
 8005416:	fb01 f303 	mul.w	r3, r1, r3
 800541a:	4413      	add	r3, r2
 800541c:	333f      	adds	r3, #63	; 0x3f
 800541e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005420:	2b02      	cmp	r3, #2
 8005422:	d111      	bne.n	8005448 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	4611      	mov	r1, r2
 800542e:	4618      	mov	r0, r3
 8005430:	f007 ff5b 	bl	800d2ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005440:	461a      	mov	r2, r3
 8005442:	2310      	movs	r3, #16
 8005444:	6093      	str	r3, [r2, #8]
 8005446:	e066      	b.n	8005516 <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	212c      	movs	r1, #44	; 0x2c
 800544e:	fb01 f303 	mul.w	r3, r1, r3
 8005452:	4413      	add	r3, r2
 8005454:	333f      	adds	r3, #63	; 0x3f
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d127      	bne.n	80054ac <HCD_HC_IN_IRQHandler+0x33e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	0151      	lsls	r1, r2, #5
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	440a      	add	r2, r1
 8005472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005476:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800547a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	212c      	movs	r1, #44	; 0x2c
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	4413      	add	r3, r2
 8005488:	3360      	adds	r3, #96	; 0x60
 800548a:	2201      	movs	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	b2d9      	uxtb	r1, r3
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	202c      	movs	r0, #44	; 0x2c
 8005498:	fb00 f303 	mul.w	r3, r0, r3
 800549c:	4413      	add	r3, r2
 800549e:	3360      	adds	r3, #96	; 0x60
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f00d f8cb 	bl	8012640 <HAL_HCD_HC_NotifyURBChange_Callback>
 80054aa:	e034      	b.n	8005516 <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	212c      	movs	r1, #44	; 0x2c
 80054b2:	fb01 f303 	mul.w	r3, r1, r3
 80054b6:	4413      	add	r3, r2
 80054b8:	333f      	adds	r3, #63	; 0x3f
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d12a      	bne.n	8005516 <HCD_HC_IN_IRQHandler+0x3a8>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	212c      	movs	r1, #44	; 0x2c
 80054c6:	fb01 f303 	mul.w	r3, r1, r3
 80054ca:	4413      	add	r3, r2
 80054cc:	3360      	adds	r3, #96	; 0x60
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	212c      	movs	r1, #44	; 0x2c
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	4413      	add	r3, r2
 80054de:	3354      	adds	r3, #84	; 0x54
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	f083 0301 	eor.w	r3, r3, #1
 80054e6:	b2d8      	uxtb	r0, r3
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	212c      	movs	r1, #44	; 0x2c
 80054ee:	fb01 f303 	mul.w	r3, r1, r3
 80054f2:	4413      	add	r3, r2
 80054f4:	3354      	adds	r3, #84	; 0x54
 80054f6:	4602      	mov	r2, r0
 80054f8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	b2d9      	uxtb	r1, r3
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	202c      	movs	r0, #44	; 0x2c
 8005504:	fb00 f303 	mul.w	r3, r0, r3
 8005508:	4413      	add	r3, r2
 800550a:	3360      	adds	r3, #96	; 0x60
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f00d f895 	bl	8012640 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d12b      	bne.n	8005576 <HCD_HC_IN_IRQHandler+0x408>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	212c      	movs	r1, #44	; 0x2c
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	4413      	add	r3, r2
 800552a:	3348      	adds	r3, #72	; 0x48
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	202c      	movs	r0, #44	; 0x2c
 8005534:	fb00 f202 	mul.w	r2, r0, r2
 8005538:	440a      	add	r2, r1
 800553a:	3240      	adds	r2, #64	; 0x40
 800553c:	8812      	ldrh	r2, [r2, #0]
 800553e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005542:	f003 0301 	and.w	r3, r3, #1
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 818e 	beq.w	8005868 <HCD_HC_IN_IRQHandler+0x6fa>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	212c      	movs	r1, #44	; 0x2c
 8005552:	fb01 f303 	mul.w	r3, r1, r3
 8005556:	4413      	add	r3, r2
 8005558:	3354      	adds	r3, #84	; 0x54
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f083 0301 	eor.w	r3, r3, #1
 8005560:	b2d8      	uxtb	r0, r3
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	212c      	movs	r1, #44	; 0x2c
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	4413      	add	r3, r2
 800556e:	3354      	adds	r3, #84	; 0x54
 8005570:	4602      	mov	r2, r0
 8005572:	701a      	strb	r2, [r3, #0]
}
 8005574:	e178      	b.n	8005868 <HCD_HC_IN_IRQHandler+0x6fa>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	212c      	movs	r1, #44	; 0x2c
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	4413      	add	r3, r2
 8005582:	3354      	adds	r3, #84	; 0x54
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	f083 0301 	eor.w	r3, r3, #1
 800558a:	b2d8      	uxtb	r0, r3
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	212c      	movs	r1, #44	; 0x2c
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	4413      	add	r3, r2
 8005598:	3354      	adds	r3, #84	; 0x54
 800559a:	4602      	mov	r2, r0
 800559c:	701a      	strb	r2, [r3, #0]
}
 800559e:	e163      	b.n	8005868 <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	f040 80f6 	bne.w	80057a4 <HCD_HC_IN_IRQHandler+0x636>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	212c      	movs	r1, #44	; 0x2c
 80055be:	fb01 f303 	mul.w	r3, r1, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	3361      	adds	r3, #97	; 0x61
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d109      	bne.n	80055e0 <HCD_HC_IN_IRQHandler+0x472>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	212c      	movs	r1, #44	; 0x2c
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	3360      	adds	r3, #96	; 0x60
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	e0c9      	b.n	8005774 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	212c      	movs	r1, #44	; 0x2c
 80055e6:	fb01 f303 	mul.w	r3, r1, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	3361      	adds	r3, #97	; 0x61
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b05      	cmp	r3, #5
 80055f2:	d109      	bne.n	8005608 <HCD_HC_IN_IRQHandler+0x49a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	212c      	movs	r1, #44	; 0x2c
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	4413      	add	r3, r2
 8005600:	3360      	adds	r3, #96	; 0x60
 8005602:	2205      	movs	r2, #5
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	e0b5      	b.n	8005774 <HCD_HC_IN_IRQHandler+0x606>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	212c      	movs	r1, #44	; 0x2c
 800560e:	fb01 f303 	mul.w	r3, r1, r3
 8005612:	4413      	add	r3, r2
 8005614:	3361      	adds	r3, #97	; 0x61
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b06      	cmp	r3, #6
 800561a:	d009      	beq.n	8005630 <HCD_HC_IN_IRQHandler+0x4c2>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	212c      	movs	r1, #44	; 0x2c
 8005622:	fb01 f303 	mul.w	r3, r1, r3
 8005626:	4413      	add	r3, r2
 8005628:	3361      	adds	r3, #97	; 0x61
 800562a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800562c:	2b08      	cmp	r3, #8
 800562e:	d150      	bne.n	80056d2 <HCD_HC_IN_IRQHandler+0x564>
      hhcd->hc[ch_num].ErrCnt++;
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	212c      	movs	r1, #44	; 0x2c
 8005636:	fb01 f303 	mul.w	r3, r1, r3
 800563a:	4413      	add	r3, r2
 800563c:	335c      	adds	r3, #92	; 0x5c
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	202c      	movs	r0, #44	; 0x2c
 8005648:	fb00 f303 	mul.w	r3, r0, r3
 800564c:	440b      	add	r3, r1
 800564e:	335c      	adds	r3, #92	; 0x5c
 8005650:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	212c      	movs	r1, #44	; 0x2c
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	4413      	add	r3, r2
 800565e:	335c      	adds	r3, #92	; 0x5c
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d912      	bls.n	800568c <HCD_HC_IN_IRQHandler+0x51e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	212c      	movs	r1, #44	; 0x2c
 800566c:	fb01 f303 	mul.w	r3, r1, r3
 8005670:	4413      	add	r3, r2
 8005672:	335c      	adds	r3, #92	; 0x5c
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	212c      	movs	r1, #44	; 0x2c
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	3360      	adds	r3, #96	; 0x60
 8005686:	2204      	movs	r2, #4
 8005688:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800568a:	e073      	b.n	8005774 <HCD_HC_IN_IRQHandler+0x606>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	212c      	movs	r1, #44	; 0x2c
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	3360      	adds	r3, #96	; 0x60
 800569a:	2202      	movs	r2, #2
 800569c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056b4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056bc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ca:	461a      	mov	r2, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80056d0:	e050      	b.n	8005774 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	212c      	movs	r1, #44	; 0x2c
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	3361      	adds	r3, #97	; 0x61
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d122      	bne.n	800572c <HCD_HC_IN_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	212c      	movs	r1, #44	; 0x2c
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	4413      	add	r3, r2
 80056f2:	3360      	adds	r3, #96	; 0x60
 80056f4:	2202      	movs	r2, #2
 80056f6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800570e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005716:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4413      	add	r3, r2
 8005720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005724:	461a      	mov	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	e023      	b.n	8005774 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	212c      	movs	r1, #44	; 0x2c
 8005732:	fb01 f303 	mul.w	r3, r1, r3
 8005736:	4413      	add	r3, r2
 8005738:	3361      	adds	r3, #97	; 0x61
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b07      	cmp	r3, #7
 800573e:	d119      	bne.n	8005774 <HCD_HC_IN_IRQHandler+0x606>
      hhcd->hc[ch_num].ErrCnt++;
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	212c      	movs	r1, #44	; 0x2c
 8005746:	fb01 f303 	mul.w	r3, r1, r3
 800574a:	4413      	add	r3, r2
 800574c:	335c      	adds	r3, #92	; 0x5c
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	6879      	ldr	r1, [r7, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	202c      	movs	r0, #44	; 0x2c
 8005758:	fb00 f303 	mul.w	r3, r0, r3
 800575c:	440b      	add	r3, r1
 800575e:	335c      	adds	r3, #92	; 0x5c
 8005760:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	212c      	movs	r1, #44	; 0x2c
 8005768:	fb01 f303 	mul.w	r3, r1, r3
 800576c:	4413      	add	r3, r2
 800576e:	3360      	adds	r3, #96	; 0x60
 8005770:	2204      	movs	r2, #4
 8005772:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4413      	add	r3, r2
 800577c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005780:	461a      	mov	r2, r3
 8005782:	2302      	movs	r3, #2
 8005784:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	b2d9      	uxtb	r1, r3
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	202c      	movs	r0, #44	; 0x2c
 8005790:	fb00 f303 	mul.w	r3, r0, r3
 8005794:	4413      	add	r3, r2
 8005796:	3360      	adds	r3, #96	; 0x60
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f00c ff4f 	bl	8012640 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80057a2:	e061      	b.n	8005868 <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	2b10      	cmp	r3, #16
 80057b8:	d156      	bne.n	8005868 <HCD_HC_IN_IRQHandler+0x6fa>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	212c      	movs	r1, #44	; 0x2c
 80057c0:	fb01 f303 	mul.w	r3, r1, r3
 80057c4:	4413      	add	r3, r2
 80057c6:	333f      	adds	r3, #63	; 0x3f
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d111      	bne.n	80057f2 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	212c      	movs	r1, #44	; 0x2c
 80057d4:	fb01 f303 	mul.w	r3, r1, r3
 80057d8:	4413      	add	r3, r2
 80057da:	335c      	adds	r3, #92	; 0x5c
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	4611      	mov	r1, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f007 fd7d 	bl	800d2ea <USB_HC_Halt>
 80057f0:	e031      	b.n	8005856 <HCD_HC_IN_IRQHandler+0x6e8>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	212c      	movs	r1, #44	; 0x2c
 80057f8:	fb01 f303 	mul.w	r3, r1, r3
 80057fc:	4413      	add	r3, r2
 80057fe:	333f      	adds	r3, #63	; 0x3f
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HCD_HC_IN_IRQHandler+0x6ac>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	212c      	movs	r1, #44	; 0x2c
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	4413      	add	r3, r2
 8005812:	333f      	adds	r3, #63	; 0x3f
 8005814:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005816:	2b02      	cmp	r3, #2
 8005818:	d11d      	bne.n	8005856 <HCD_HC_IN_IRQHandler+0x6e8>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	212c      	movs	r1, #44	; 0x2c
 8005820:	fb01 f303 	mul.w	r3, r1, r3
 8005824:	4413      	add	r3, r2
 8005826:	335c      	adds	r3, #92	; 0x5c
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d110      	bne.n	8005856 <HCD_HC_IN_IRQHandler+0x6e8>
        hhcd->hc[ch_num].state = HC_NAK;
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	212c      	movs	r1, #44	; 0x2c
 800583a:	fb01 f303 	mul.w	r3, r1, r3
 800583e:	4413      	add	r3, r2
 8005840:	3361      	adds	r3, #97	; 0x61
 8005842:	2203      	movs	r2, #3
 8005844:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	4611      	mov	r1, r2
 8005850:	4618      	mov	r0, r3
 8005852:	f007 fd4a 	bl	800d2ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	4413      	add	r3, r2
 800585e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005862:	461a      	mov	r2, r3
 8005864:	2310      	movs	r3, #16
 8005866:	6093      	str	r3, [r2, #8]
}
 8005868:	bf00      	nop
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	4413      	add	r3, r2
 8005892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b04      	cmp	r3, #4
 800589e:	d11a      	bne.n	80058d6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ac:	461a      	mov	r2, r3
 80058ae:	2304      	movs	r3, #4
 80058b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	212c      	movs	r1, #44	; 0x2c
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	4413      	add	r3, r2
 80058be:	3361      	adds	r3, #97	; 0x61
 80058c0:	2206      	movs	r2, #6
 80058c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	b2d2      	uxtb	r2, r2
 80058cc:	4611      	mov	r1, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f007 fd0b 	bl	800d2ea <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80058d4:	e331      	b.n	8005f3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d12e      	bne.n	800594a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f8:	461a      	mov	r2, r3
 80058fa:	2320      	movs	r3, #32
 80058fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	212c      	movs	r1, #44	; 0x2c
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	4413      	add	r3, r2
 800590a:	333d      	adds	r3, #61	; 0x3d
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b01      	cmp	r3, #1
 8005910:	f040 8313 	bne.w	8005f3a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	212c      	movs	r1, #44	; 0x2c
 800591a:	fb01 f303 	mul.w	r3, r1, r3
 800591e:	4413      	add	r3, r2
 8005920:	333d      	adds	r3, #61	; 0x3d
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	212c      	movs	r1, #44	; 0x2c
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	4413      	add	r3, r2
 8005932:	3360      	adds	r3, #96	; 0x60
 8005934:	2202      	movs	r2, #2
 8005936:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	4611      	mov	r1, r2
 8005942:	4618      	mov	r0, r3
 8005944:	f007 fcd1 	bl	800d2ea <USB_HC_Halt>
}
 8005948:	e2f7      	b.n	8005f3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800595c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005960:	d112      	bne.n	8005988 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596e:	461a      	mov	r2, r3
 8005970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005974:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	4611      	mov	r1, r2
 8005980:	4618      	mov	r0, r3
 8005982:	f007 fcb2 	bl	800d2ea <USB_HC_Halt>
}
 8005986:	e2d8      	b.n	8005f3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b01      	cmp	r3, #1
 800599c:	d140      	bne.n	8005a20 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	212c      	movs	r1, #44	; 0x2c
 80059a4:	fb01 f303 	mul.w	r3, r1, r3
 80059a8:	4413      	add	r3, r2
 80059aa:	335c      	adds	r3, #92	; 0x5c
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c2:	2b40      	cmp	r3, #64	; 0x40
 80059c4:	d111      	bne.n	80059ea <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	212c      	movs	r1, #44	; 0x2c
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	4413      	add	r3, r2
 80059d2:	333d      	adds	r3, #61	; 0x3d
 80059d4:	2201      	movs	r2, #1
 80059d6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e4:	461a      	mov	r2, r3
 80059e6:	2340      	movs	r3, #64	; 0x40
 80059e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f6:	461a      	mov	r2, r3
 80059f8:	2301      	movs	r3, #1
 80059fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	212c      	movs	r1, #44	; 0x2c
 8005a02:	fb01 f303 	mul.w	r3, r1, r3
 8005a06:	4413      	add	r3, r2
 8005a08:	3361      	adds	r3, #97	; 0x61
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	4611      	mov	r1, r2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f007 fc66 	bl	800d2ea <USB_HC_Halt>
}
 8005a1e:	e28c      	b.n	8005f3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a32:	2b40      	cmp	r3, #64	; 0x40
 8005a34:	d12c      	bne.n	8005a90 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	212c      	movs	r1, #44	; 0x2c
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	4413      	add	r3, r2
 8005a42:	3361      	adds	r3, #97	; 0x61
 8005a44:	2204      	movs	r2, #4
 8005a46:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	212c      	movs	r1, #44	; 0x2c
 8005a4e:	fb01 f303 	mul.w	r3, r1, r3
 8005a52:	4413      	add	r3, r2
 8005a54:	333d      	adds	r3, #61	; 0x3d
 8005a56:	2201      	movs	r2, #1
 8005a58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	212c      	movs	r1, #44	; 0x2c
 8005a60:	fb01 f303 	mul.w	r3, r1, r3
 8005a64:	4413      	add	r3, r2
 8005a66:	335c      	adds	r3, #92	; 0x5c
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	4611      	mov	r1, r2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f007 fc37 	bl	800d2ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a88:	461a      	mov	r2, r3
 8005a8a:	2340      	movs	r3, #64	; 0x40
 8005a8c:	6093      	str	r3, [r2, #8]
}
 8005a8e:	e254      	b.n	8005f3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d11a      	bne.n	8005adc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2308      	movs	r3, #8
 8005ab6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	212c      	movs	r1, #44	; 0x2c
 8005abe:	fb01 f303 	mul.w	r3, r1, r3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	3361      	adds	r3, #97	; 0x61
 8005ac6:	2205      	movs	r2, #5
 8005ac8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f007 fc08 	bl	800d2ea <USB_HC_Halt>
}
 8005ada:	e22e      	b.n	8005f3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b10      	cmp	r3, #16
 8005af0:	d140      	bne.n	8005b74 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	212c      	movs	r1, #44	; 0x2c
 8005af8:	fb01 f303 	mul.w	r3, r1, r3
 8005afc:	4413      	add	r3, r2
 8005afe:	335c      	adds	r3, #92	; 0x5c
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	212c      	movs	r1, #44	; 0x2c
 8005b0a:	fb01 f303 	mul.w	r3, r1, r3
 8005b0e:	4413      	add	r3, r2
 8005b10:	3361      	adds	r3, #97	; 0x61
 8005b12:	2203      	movs	r2, #3
 8005b14:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	212c      	movs	r1, #44	; 0x2c
 8005b1c:	fb01 f303 	mul.w	r3, r1, r3
 8005b20:	4413      	add	r3, r2
 8005b22:	333d      	adds	r3, #61	; 0x3d
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d112      	bne.n	8005b50 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	212c      	movs	r1, #44	; 0x2c
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	4413      	add	r3, r2
 8005b36:	333c      	adds	r3, #60	; 0x3c
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d108      	bne.n	8005b50 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	212c      	movs	r1, #44	; 0x2c
 8005b44:	fb01 f303 	mul.w	r3, r1, r3
 8005b48:	4413      	add	r3, r2
 8005b4a:	333d      	adds	r3, #61	; 0x3d
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f007 fbc5 	bl	800d2ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	2310      	movs	r3, #16
 8005b70:	6093      	str	r3, [r2, #8]
}
 8005b72:	e1e2      	b.n	8005f3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b86:	2b80      	cmp	r3, #128	; 0x80
 8005b88:	d164      	bne.n	8005c54 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d111      	bne.n	8005bb6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	212c      	movs	r1, #44	; 0x2c
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3361      	adds	r3, #97	; 0x61
 8005ba0:	2206      	movs	r2, #6
 8005ba2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f007 fb9b 	bl	800d2ea <USB_HC_Halt>
 8005bb4:	e044      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	212c      	movs	r1, #44	; 0x2c
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	335c      	adds	r3, #92	; 0x5c
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	202c      	movs	r0, #44	; 0x2c
 8005bce:	fb00 f303 	mul.w	r3, r0, r3
 8005bd2:	440b      	add	r3, r1
 8005bd4:	335c      	adds	r3, #92	; 0x5c
 8005bd6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	212c      	movs	r1, #44	; 0x2c
 8005bde:	fb01 f303 	mul.w	r3, r1, r3
 8005be2:	4413      	add	r3, r2
 8005be4:	335c      	adds	r3, #92	; 0x5c
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d920      	bls.n	8005c2e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	212c      	movs	r1, #44	; 0x2c
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	335c      	adds	r3, #92	; 0x5c
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	212c      	movs	r1, #44	; 0x2c
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	4413      	add	r3, r2
 8005c0a:	3360      	adds	r3, #96	; 0x60
 8005c0c:	2204      	movs	r2, #4
 8005c0e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	b2d9      	uxtb	r1, r3
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	202c      	movs	r0, #44	; 0x2c
 8005c1a:	fb00 f303 	mul.w	r3, r0, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	3360      	adds	r3, #96	; 0x60
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	461a      	mov	r2, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f00c fd0a 	bl	8012640 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005c2c:	e008      	b.n	8005c40 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	212c      	movs	r1, #44	; 0x2c
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
 8005c38:	4413      	add	r3, r2
 8005c3a:	3360      	adds	r3, #96	; 0x60
 8005c3c:	2202      	movs	r2, #2
 8005c3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	6093      	str	r3, [r2, #8]
}
 8005c52:	e172      	b.n	8005f3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c6a:	d11b      	bne.n	8005ca4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	212c      	movs	r1, #44	; 0x2c
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	4413      	add	r3, r2
 8005c78:	3361      	adds	r3, #97	; 0x61
 8005c7a:	2208      	movs	r2, #8
 8005c7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	4611      	mov	r1, r2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f007 fb2e 	bl	800d2ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ca0:	6093      	str	r3, [r2, #8]
}
 8005ca2:	e14a      	b.n	8005f3a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	f040 813f 	bne.w	8005f3a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	212c      	movs	r1, #44	; 0x2c
 8005cc2:	fb01 f303 	mul.w	r3, r1, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3361      	adds	r3, #97	; 0x61
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d17d      	bne.n	8005dcc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	212c      	movs	r1, #44	; 0x2c
 8005cd6:	fb01 f303 	mul.w	r3, r1, r3
 8005cda:	4413      	add	r3, r2
 8005cdc:	3360      	adds	r3, #96	; 0x60
 8005cde:	2201      	movs	r2, #1
 8005ce0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	212c      	movs	r1, #44	; 0x2c
 8005ce8:	fb01 f303 	mul.w	r3, r1, r3
 8005cec:	4413      	add	r3, r2
 8005cee:	333f      	adds	r3, #63	; 0x3f
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d00a      	beq.n	8005d0c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	212c      	movs	r1, #44	; 0x2c
 8005cfc:	fb01 f303 	mul.w	r3, r1, r3
 8005d00:	4413      	add	r3, r2
 8005d02:	333f      	adds	r3, #63	; 0x3f
 8005d04:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	f040 8100 	bne.w	8005f0c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d113      	bne.n	8005d3c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	212c      	movs	r1, #44	; 0x2c
 8005d1a:	fb01 f303 	mul.w	r3, r1, r3
 8005d1e:	4413      	add	r3, r2
 8005d20:	3355      	adds	r3, #85	; 0x55
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	f083 0301 	eor.w	r3, r3, #1
 8005d28:	b2d8      	uxtb	r0, r3
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	212c      	movs	r1, #44	; 0x2c
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	4413      	add	r3, r2
 8005d36:	3355      	adds	r3, #85	; 0x55
 8005d38:	4602      	mov	r2, r0
 8005d3a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	f040 80e3 	bne.w	8005f0c <HCD_HC_OUT_IRQHandler+0x69c>
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	212c      	movs	r1, #44	; 0x2c
 8005d4c:	fb01 f303 	mul.w	r3, r1, r3
 8005d50:	4413      	add	r3, r2
 8005d52:	334c      	adds	r3, #76	; 0x4c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 80d8 	beq.w	8005f0c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	212c      	movs	r1, #44	; 0x2c
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	4413      	add	r3, r2
 8005d68:	334c      	adds	r3, #76	; 0x4c
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6879      	ldr	r1, [r7, #4]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	202c      	movs	r0, #44	; 0x2c
 8005d72:	fb00 f202 	mul.w	r2, r0, r2
 8005d76:	440a      	add	r2, r1
 8005d78:	3240      	adds	r2, #64	; 0x40
 8005d7a:	8812      	ldrh	r2, [r2, #0]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	202c      	movs	r0, #44	; 0x2c
 8005d86:	fb00 f202 	mul.w	r2, r0, r2
 8005d8a:	440a      	add	r2, r1
 8005d8c:	3240      	adds	r2, #64	; 0x40
 8005d8e:	8812      	ldrh	r2, [r2, #0]
 8005d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80b5 	beq.w	8005f0c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	212c      	movs	r1, #44	; 0x2c
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	4413      	add	r3, r2
 8005dae:	3355      	adds	r3, #85	; 0x55
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	f083 0301 	eor.w	r3, r3, #1
 8005db6:	b2d8      	uxtb	r0, r3
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	212c      	movs	r1, #44	; 0x2c
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3355      	adds	r3, #85	; 0x55
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	e09f      	b.n	8005f0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	212c      	movs	r1, #44	; 0x2c
 8005dd2:	fb01 f303 	mul.w	r3, r1, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3361      	adds	r3, #97	; 0x61
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d109      	bne.n	8005df4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	212c      	movs	r1, #44	; 0x2c
 8005de6:	fb01 f303 	mul.w	r3, r1, r3
 8005dea:	4413      	add	r3, r2
 8005dec:	3360      	adds	r3, #96	; 0x60
 8005dee:	2202      	movs	r2, #2
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	e08b      	b.n	8005f0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	212c      	movs	r1, #44	; 0x2c
 8005dfa:	fb01 f303 	mul.w	r3, r1, r3
 8005dfe:	4413      	add	r3, r2
 8005e00:	3361      	adds	r3, #97	; 0x61
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d109      	bne.n	8005e1c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	212c      	movs	r1, #44	; 0x2c
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	3360      	adds	r3, #96	; 0x60
 8005e16:	2202      	movs	r2, #2
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	e077      	b.n	8005f0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	212c      	movs	r1, #44	; 0x2c
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	3361      	adds	r3, #97	; 0x61
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b05      	cmp	r3, #5
 8005e2e:	d109      	bne.n	8005e44 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	212c      	movs	r1, #44	; 0x2c
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3360      	adds	r3, #96	; 0x60
 8005e3e:	2205      	movs	r2, #5
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	e063      	b.n	8005f0c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	212c      	movs	r1, #44	; 0x2c
 8005e4a:	fb01 f303 	mul.w	r3, r1, r3
 8005e4e:	4413      	add	r3, r2
 8005e50:	3361      	adds	r3, #97	; 0x61
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b06      	cmp	r3, #6
 8005e56:	d009      	beq.n	8005e6c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	212c      	movs	r1, #44	; 0x2c
 8005e5e:	fb01 f303 	mul.w	r3, r1, r3
 8005e62:	4413      	add	r3, r2
 8005e64:	3361      	adds	r3, #97	; 0x61
 8005e66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d14f      	bne.n	8005f0c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	212c      	movs	r1, #44	; 0x2c
 8005e72:	fb01 f303 	mul.w	r3, r1, r3
 8005e76:	4413      	add	r3, r2
 8005e78:	335c      	adds	r3, #92	; 0x5c
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	1c5a      	adds	r2, r3, #1
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	202c      	movs	r0, #44	; 0x2c
 8005e84:	fb00 f303 	mul.w	r3, r0, r3
 8005e88:	440b      	add	r3, r1
 8005e8a:	335c      	adds	r3, #92	; 0x5c
 8005e8c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	212c      	movs	r1, #44	; 0x2c
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	4413      	add	r3, r2
 8005e9a:	335c      	adds	r3, #92	; 0x5c
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d912      	bls.n	8005ec8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	212c      	movs	r1, #44	; 0x2c
 8005ea8:	fb01 f303 	mul.w	r3, r1, r3
 8005eac:	4413      	add	r3, r2
 8005eae:	335c      	adds	r3, #92	; 0x5c
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	212c      	movs	r1, #44	; 0x2c
 8005eba:	fb01 f303 	mul.w	r3, r1, r3
 8005ebe:	4413      	add	r3, r2
 8005ec0:	3360      	adds	r3, #96	; 0x60
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	701a      	strb	r2, [r3, #0]
 8005ec6:	e021      	b.n	8005f0c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	212c      	movs	r1, #44	; 0x2c
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3360      	adds	r3, #96	; 0x60
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ef0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ef8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f06:	461a      	mov	r2, r3
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f18:	461a      	mov	r2, r3
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	b2d9      	uxtb	r1, r3
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	202c      	movs	r0, #44	; 0x2c
 8005f28:	fb00 f303 	mul.w	r3, r0, r3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3360      	adds	r3, #96	; 0x60
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f00c fb83 	bl	8012640 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005f3a:	bf00      	nop
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b08a      	sub	sp, #40	; 0x28
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	0c5b      	lsrs	r3, r3, #17
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	091b      	lsrs	r3, r3, #4
 8005f72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f76:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d004      	beq.n	8005f88 <HCD_RXQLVL_IRQHandler+0x46>
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b05      	cmp	r3, #5
 8005f82:	f000 80a9 	beq.w	80060d8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005f86:	e0aa      	b.n	80060de <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f000 80a6 	beq.w	80060dc <HCD_RXQLVL_IRQHandler+0x19a>
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	212c      	movs	r1, #44	; 0x2c
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3344      	adds	r3, #68	; 0x44
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 809b 	beq.w	80060dc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	212c      	movs	r1, #44	; 0x2c
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3350      	adds	r3, #80	; 0x50
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	441a      	add	r2, r3
 8005fba:	6879      	ldr	r1, [r7, #4]
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	202c      	movs	r0, #44	; 0x2c
 8005fc0:	fb00 f303 	mul.w	r3, r0, r3
 8005fc4:	440b      	add	r3, r1
 8005fc6:	334c      	adds	r3, #76	; 0x4c
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d87a      	bhi.n	80060c4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	212c      	movs	r1, #44	; 0x2c
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	3344      	adds	r3, #68	; 0x44
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	b292      	uxth	r2, r2
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	f006 fce8 	bl	800c9bc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	212c      	movs	r1, #44	; 0x2c
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3344      	adds	r3, #68	; 0x44
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	441a      	add	r2, r3
 8006000:	6879      	ldr	r1, [r7, #4]
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	202c      	movs	r0, #44	; 0x2c
 8006006:	fb00 f303 	mul.w	r3, r0, r3
 800600a:	440b      	add	r3, r1
 800600c:	3344      	adds	r3, #68	; 0x44
 800600e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	212c      	movs	r1, #44	; 0x2c
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	4413      	add	r3, r2
 800601c:	3350      	adds	r3, #80	; 0x50
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	441a      	add	r2, r3
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	202c      	movs	r0, #44	; 0x2c
 800602a:	fb00 f303 	mul.w	r3, r0, r3
 800602e:	440b      	add	r3, r1
 8006030:	3350      	adds	r3, #80	; 0x50
 8006032:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	4413      	add	r3, r2
 800603c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	0cdb      	lsrs	r3, r3, #19
 8006044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006048:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	212c      	movs	r1, #44	; 0x2c
 8006050:	fb01 f303 	mul.w	r3, r1, r3
 8006054:	4413      	add	r3, r2
 8006056:	3340      	adds	r3, #64	; 0x40
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	461a      	mov	r2, r3
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	4293      	cmp	r3, r2
 8006060:	d13c      	bne.n	80060dc <HCD_RXQLVL_IRQHandler+0x19a>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d039      	beq.n	80060dc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	4413      	add	r3, r2
 8006070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800607e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006086:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	4413      	add	r3, r2
 8006090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006094:	461a      	mov	r2, r3
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	212c      	movs	r1, #44	; 0x2c
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	4413      	add	r3, r2
 80060a6:	3354      	adds	r3, #84	; 0x54
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	f083 0301 	eor.w	r3, r3, #1
 80060ae:	b2d8      	uxtb	r0, r3
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	212c      	movs	r1, #44	; 0x2c
 80060b6:	fb01 f303 	mul.w	r3, r1, r3
 80060ba:	4413      	add	r3, r2
 80060bc:	3354      	adds	r3, #84	; 0x54
 80060be:	4602      	mov	r2, r0
 80060c0:	701a      	strb	r2, [r3, #0]
      break;
 80060c2:	e00b      	b.n	80060dc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	212c      	movs	r1, #44	; 0x2c
 80060ca:	fb01 f303 	mul.w	r3, r1, r3
 80060ce:	4413      	add	r3, r2
 80060d0:	3360      	adds	r3, #96	; 0x60
 80060d2:	2204      	movs	r2, #4
 80060d4:	701a      	strb	r2, [r3, #0]
      break;
 80060d6:	e001      	b.n	80060dc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80060d8:	bf00      	nop
 80060da:	e000      	b.n	80060de <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80060dc:	bf00      	nop
  }
}
 80060de:	bf00      	nop
 80060e0:	3728      	adds	r7, #40	; 0x28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b086      	sub	sp, #24
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006112:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b02      	cmp	r3, #2
 800611c:	d10b      	bne.n	8006136 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b01      	cmp	r3, #1
 8006126:	d102      	bne.n	800612e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f00c fa6d 	bl	8012608 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f043 0302 	orr.w	r3, r3, #2
 8006134:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f003 0308 	and.w	r3, r3, #8
 800613c:	2b08      	cmp	r3, #8
 800613e:	d132      	bne.n	80061a6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f043 0308 	orr.w	r3, r3, #8
 8006146:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b04      	cmp	r3, #4
 8006150:	d126      	bne.n	80061a0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d113      	bne.n	8006182 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006160:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006164:	d106      	bne.n	8006174 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2102      	movs	r1, #2
 800616c:	4618      	mov	r0, r3
 800616e:	f006 fd85 	bl	800cc7c <USB_InitFSLSPClkSel>
 8006172:	e011      	b.n	8006198 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2101      	movs	r1, #1
 800617a:	4618      	mov	r0, r3
 800617c:	f006 fd7e 	bl	800cc7c <USB_InitFSLSPClkSel>
 8006180:	e00a      	b.n	8006198 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d106      	bne.n	8006198 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006190:	461a      	mov	r2, r3
 8006192:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006196:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f00c fa63 	bl	8012664 <HAL_HCD_PortEnabled_Callback>
 800619e:	e002      	b.n	80061a6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f00c fa6d 	bl	8012680 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d103      	bne.n	80061b8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f043 0320 	orr.w	r3, r3, #32
 80061b6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061be:	461a      	mov	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	6013      	str	r3, [r2, #0]
}
 80061c4:	bf00      	nop
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e07f      	b.n	80062de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d106      	bne.n	80061f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fb fe3a 	bl	8001e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2224      	movs	r2, #36	; 0x24
 80061fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0201 	bic.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800621c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800622c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d107      	bne.n	8006246 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006242:	609a      	str	r2, [r3, #8]
 8006244:	e006      	b.n	8006254 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006252:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d104      	bne.n	8006266 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006264:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6859      	ldr	r1, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <HAL_I2C_Init+0x11c>)
 8006272:	430b      	orrs	r3, r1
 8006274:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006284:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691a      	ldr	r2, [r3, #16]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	699b      	ldr	r3, [r3, #24]
 8006296:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	69d9      	ldr	r1, [r3, #28]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a1a      	ldr	r2, [r3, #32]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	02008000 	.word	0x02008000

080062ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d138      	bne.n	8006374 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800630c:	2302      	movs	r3, #2
 800630e:	e032      	b.n	8006376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2224      	movs	r2, #36	; 0x24
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800633e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6819      	ldr	r1, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	e000      	b.n	8006376 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006374:	2302      	movs	r3, #2
  }
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b20      	cmp	r3, #32
 8006396:	d139      	bne.n	800640c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d101      	bne.n	80063a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063a2:	2302      	movs	r3, #2
 80063a4:	e033      	b.n	800640e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2224      	movs	r2, #36	; 0x24
 80063b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	e000      	b.n	800640e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800640c:	2302      	movs	r3, #2
  }
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
	...

0800641c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e0bf      	b.n	80065ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fb fdba 	bl	8001fbc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800645e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6999      	ldr	r1, [r3, #24]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006474:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6899      	ldr	r1, [r3, #8]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	4b4a      	ldr	r3, [pc, #296]	; (80065b8 <HAL_LTDC_Init+0x19c>)
 8006490:	400b      	ands	r3, r1
 8006492:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	041b      	lsls	r3, r3, #16
 800649a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6899      	ldr	r1, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68d9      	ldr	r1, [r3, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	4b3e      	ldr	r3, [pc, #248]	; (80065b8 <HAL_LTDC_Init+0x19c>)
 80064be:	400b      	ands	r3, r1
 80064c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68d9      	ldr	r1, [r3, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a1a      	ldr	r2, [r3, #32]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6919      	ldr	r1, [r3, #16]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4b33      	ldr	r3, [pc, #204]	; (80065b8 <HAL_LTDC_Init+0x19c>)
 80064ec:	400b      	ands	r3, r1
 80064ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	041b      	lsls	r3, r3, #16
 80064f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6919      	ldr	r1, [r3, #16]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	431a      	orrs	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6959      	ldr	r1, [r3, #20]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	4b27      	ldr	r3, [pc, #156]	; (80065b8 <HAL_LTDC_Init+0x19c>)
 800651a:	400b      	ands	r3, r1
 800651c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006522:	041b      	lsls	r3, r3, #16
 8006524:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	6959      	ldr	r1, [r3, #20]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800654c:	041b      	lsls	r3, r3, #16
 800654e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800655e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4313      	orrs	r3, r2
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0206 	orr.w	r2, r2, #6
 800658a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0201 	orr.w	r2, r2, #1
 800659a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	f000f800 	.word	0xf000f800

080065bc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d023      	beq.n	8006626 <HAL_LTDC_IRQHandler+0x6a>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f003 0304 	and.w	r3, r3, #4
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01e      	beq.n	8006626 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0204 	bic.w	r2, r2, #4
 80065f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2204      	movs	r2, #4
 80065fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006606:	f043 0201 	orr.w	r2, r3, #1
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2204      	movs	r2, #4
 8006614:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f86f 	bl	8006704 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d023      	beq.n	8006678 <HAL_LTDC_IRQHandler+0xbc>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d01e      	beq.n	8006678 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0202 	bic.w	r2, r2, #2
 8006648:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2202      	movs	r2, #2
 8006650:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006658:	f043 0202 	orr.w	r2, r3, #2
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2204      	movs	r2, #4
 8006666:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f846 	bl	8006704 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d01b      	beq.n	80066ba <HAL_LTDC_IRQHandler+0xfe>
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d016      	beq.n	80066ba <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0201 	bic.w	r2, r2, #1
 800669a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2201      	movs	r2, #1
 80066a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f82f 	bl	8006718 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01b      	beq.n	80066fc <HAL_LTDC_IRQHandler+0x140>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d016      	beq.n	80066fc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0208 	bic.w	r2, r2, #8
 80066dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2208      	movs	r2, #8
 80066e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f818 	bl	800672c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006740:	b5b0      	push	{r4, r5, r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006752:	2b01      	cmp	r3, #1
 8006754:	d101      	bne.n	800675a <HAL_LTDC_ConfigLayer+0x1a>
 8006756:	2302      	movs	r3, #2
 8006758:	e02c      	b.n	80067b4 <HAL_LTDC_ConfigLayer+0x74>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2202      	movs	r2, #2
 8006766:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2134      	movs	r1, #52	; 0x34
 8006770:	fb01 f303 	mul.w	r3, r1, r3
 8006774:	4413      	add	r3, r2
 8006776:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	4614      	mov	r4, r2
 800677e:	461d      	mov	r5, r3
 8006780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800678a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f811 	bl	80067bc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2201      	movs	r2, #1
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bdb0      	pop	{r4, r5, r7, pc}

080067bc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80067bc:	b480      	push	{r7}
 80067be:	b089      	sub	sp, #36	; 0x24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	0c1b      	lsrs	r3, r3, #16
 80067d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067d8:	4413      	add	r3, r2
 80067da:	041b      	lsls	r3, r3, #16
 80067dc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	01db      	lsls	r3, r3, #7
 80067e8:	4413      	add	r3, r2
 80067ea:	3384      	adds	r3, #132	; 0x84
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	6812      	ldr	r2, [r2, #0]
 80067f2:	4611      	mov	r1, r2
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	01d2      	lsls	r2, r2, #7
 80067f8:	440a      	add	r2, r1
 80067fa:	3284      	adds	r2, #132	; 0x84
 80067fc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006800:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	0c1b      	lsrs	r3, r3, #16
 800680e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006812:	4413      	add	r3, r2
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4619      	mov	r1, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	01db      	lsls	r3, r3, #7
 8006820:	440b      	add	r3, r1
 8006822:	3384      	adds	r3, #132	; 0x84
 8006824:	4619      	mov	r1, r3
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4313      	orrs	r3, r2
 800682a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800683a:	4413      	add	r3, r2
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	01db      	lsls	r3, r3, #7
 800684a:	4413      	add	r3, r2
 800684c:	3384      	adds	r3, #132	; 0x84
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	6812      	ldr	r2, [r2, #0]
 8006854:	4611      	mov	r1, r2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	01d2      	lsls	r2, r2, #7
 800685a:	440a      	add	r2, r1
 800685c:	3284      	adds	r2, #132	; 0x84
 800685e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006862:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006872:	4413      	add	r3, r2
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4619      	mov	r1, r3
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	01db      	lsls	r3, r3, #7
 8006880:	440b      	add	r3, r1
 8006882:	3384      	adds	r3, #132	; 0x84
 8006884:	4619      	mov	r1, r3
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	4313      	orrs	r3, r2
 800688a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	01db      	lsls	r3, r3, #7
 8006896:	4413      	add	r3, r2
 8006898:	3384      	adds	r3, #132	; 0x84
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	4611      	mov	r1, r2
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	01d2      	lsls	r2, r2, #7
 80068a6:	440a      	add	r2, r1
 80068a8:	3284      	adds	r2, #132	; 0x84
 80068aa:	f023 0307 	bic.w	r3, r3, #7
 80068ae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	461a      	mov	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	01db      	lsls	r3, r3, #7
 80068ba:	4413      	add	r3, r2
 80068bc:	3384      	adds	r3, #132	; 0x84
 80068be:	461a      	mov	r2, r3
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80068d6:	041b      	lsls	r3, r3, #16
 80068d8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	061b      	lsls	r3, r3, #24
 80068e0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	01db      	lsls	r3, r3, #7
 80068ec:	4413      	add	r3, r2
 80068ee:	3384      	adds	r3, #132	; 0x84
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	01db      	lsls	r3, r3, #7
 80068fc:	4413      	add	r3, r2
 80068fe:	3384      	adds	r3, #132	; 0x84
 8006900:	461a      	mov	r2, r3
 8006902:	2300      	movs	r3, #0
 8006904:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800690c:	461a      	mov	r2, r3
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	431a      	orrs	r2, r3
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	431a      	orrs	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4619      	mov	r1, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	01db      	lsls	r3, r3, #7
 8006920:	440b      	add	r3, r1
 8006922:	3384      	adds	r3, #132	; 0x84
 8006924:	4619      	mov	r1, r3
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	01db      	lsls	r3, r3, #7
 8006936:	4413      	add	r3, r2
 8006938:	3384      	adds	r3, #132	; 0x84
 800693a:	695b      	ldr	r3, [r3, #20]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	6812      	ldr	r2, [r2, #0]
 8006940:	4611      	mov	r1, r2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	01d2      	lsls	r2, r2, #7
 8006946:	440a      	add	r2, r1
 8006948:	3284      	adds	r2, #132	; 0x84
 800694a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800694e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	01db      	lsls	r3, r3, #7
 800695a:	4413      	add	r3, r2
 800695c:	3384      	adds	r3, #132	; 0x84
 800695e:	461a      	mov	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	01db      	lsls	r3, r3, #7
 8006970:	4413      	add	r3, r2
 8006972:	3384      	adds	r3, #132	; 0x84
 8006974:	69da      	ldr	r2, [r3, #28]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4619      	mov	r1, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	01db      	lsls	r3, r3, #7
 8006980:	440b      	add	r3, r1
 8006982:	3384      	adds	r3, #132	; 0x84
 8006984:	4619      	mov	r1, r3
 8006986:	4b58      	ldr	r3, [pc, #352]	; (8006ae8 <LTDC_SetConfig+0x32c>)
 8006988:	4013      	ands	r3, r2
 800698a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	68f9      	ldr	r1, [r7, #12]
 8006996:	6809      	ldr	r1, [r1, #0]
 8006998:	4608      	mov	r0, r1
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	01c9      	lsls	r1, r1, #7
 800699e:	4401      	add	r1, r0
 80069a0:	3184      	adds	r1, #132	; 0x84
 80069a2:	4313      	orrs	r3, r2
 80069a4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	01db      	lsls	r3, r3, #7
 80069b0:	4413      	add	r3, r2
 80069b2:	3384      	adds	r3, #132	; 0x84
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	01db      	lsls	r3, r3, #7
 80069c0:	4413      	add	r3, r2
 80069c2:	3384      	adds	r3, #132	; 0x84
 80069c4:	461a      	mov	r2, r3
 80069c6:	2300      	movs	r3, #0
 80069c8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	01db      	lsls	r3, r3, #7
 80069d4:	4413      	add	r3, r2
 80069d6:	3384      	adds	r3, #132	; 0x84
 80069d8:	461a      	mov	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d102      	bne.n	80069ee <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80069e8:	2304      	movs	r3, #4
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	e01b      	b.n	8006a26 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d102      	bne.n	80069fc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80069f6:	2303      	movs	r3, #3
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	e014      	b.n	8006a26 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d00b      	beq.n	8006a1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d007      	beq.n	8006a1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a10:	2b03      	cmp	r3, #3
 8006a12:	d003      	beq.n	8006a1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a18:	2b07      	cmp	r3, #7
 8006a1a:	d102      	bne.n	8006a22 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	61fb      	str	r3, [r7, #28]
 8006a20:	e001      	b.n	8006a26 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006a22:	2301      	movs	r3, #1
 8006a24:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	01db      	lsls	r3, r3, #7
 8006a30:	4413      	add	r3, r2
 8006a32:	3384      	adds	r3, #132	; 0x84
 8006a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	01d2      	lsls	r2, r2, #7
 8006a40:	440a      	add	r2, r1
 8006a42:	3284      	adds	r2, #132	; 0x84
 8006a44:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006a48:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	fb02 f303 	mul.w	r3, r2, r3
 8006a54:	041a      	lsls	r2, r3, #16
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	6859      	ldr	r1, [r3, #4]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	1acb      	subs	r3, r1, r3
 8006a60:	69f9      	ldr	r1, [r7, #28]
 8006a62:	fb01 f303 	mul.w	r3, r1, r3
 8006a66:	3303      	adds	r3, #3
 8006a68:	68f9      	ldr	r1, [r7, #12]
 8006a6a:	6809      	ldr	r1, [r1, #0]
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	01c9      	lsls	r1, r1, #7
 8006a72:	4401      	add	r1, r0
 8006a74:	3184      	adds	r1, #132	; 0x84
 8006a76:	4313      	orrs	r3, r2
 8006a78:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	01db      	lsls	r3, r3, #7
 8006a84:	4413      	add	r3, r2
 8006a86:	3384      	adds	r3, #132	; 0x84
 8006a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	01db      	lsls	r3, r3, #7
 8006a94:	440b      	add	r3, r1
 8006a96:	3384      	adds	r3, #132	; 0x84
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4b14      	ldr	r3, [pc, #80]	; (8006aec <LTDC_SetConfig+0x330>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	01db      	lsls	r3, r3, #7
 8006aaa:	4413      	add	r3, r2
 8006aac:	3384      	adds	r3, #132	; 0x84
 8006aae:	461a      	mov	r2, r3
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	01db      	lsls	r3, r3, #7
 8006ac0:	4413      	add	r3, r2
 8006ac2:	3384      	adds	r3, #132	; 0x84
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	6812      	ldr	r2, [r2, #0]
 8006aca:	4611      	mov	r1, r2
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	01d2      	lsls	r2, r2, #7
 8006ad0:	440a      	add	r2, r1
 8006ad2:	3284      	adds	r2, #132	; 0x84
 8006ad4:	f043 0301 	orr.w	r3, r3, #1
 8006ad8:	6013      	str	r3, [r2, #0]
}
 8006ada:	bf00      	nop
 8006adc:	3724      	adds	r7, #36	; 0x24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	fffff8f8 	.word	0xfffff8f8
 8006aec:	fffff800 	.word	0xfffff800

08006af0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006afe:	6013      	str	r3, [r2, #0]
}
 8006b00:	bf00      	nop
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40007000 	.word	0x40007000

08006b10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006b1a:	4b23      	ldr	r3, [pc, #140]	; (8006ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	4a22      	ldr	r2, [pc, #136]	; (8006ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b24:	6413      	str	r3, [r2, #64]	; 0x40
 8006b26:	4b20      	ldr	r3, [pc, #128]	; (8006ba8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006b32:	4b1e      	ldr	r3, [pc, #120]	; (8006bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1d      	ldr	r2, [pc, #116]	; (8006bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b3e:	f7fc f93b 	bl	8002db8 <HAL_GetTick>
 8006b42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b44:	e009      	b.n	8006b5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b46:	f7fc f937 	bl	8002db8 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b54:	d901      	bls.n	8006b5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e022      	b.n	8006ba0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b5a:	4b14      	ldr	r3, [pc, #80]	; (8006bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b66:	d1ee      	bne.n	8006b46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b68:	4b10      	ldr	r3, [pc, #64]	; (8006bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a0f      	ldr	r2, [pc, #60]	; (8006bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b74:	f7fc f920 	bl	8002db8 <HAL_GetTick>
 8006b78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b7a:	e009      	b.n	8006b90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b7c:	f7fc f91c 	bl	8002db8 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b8a:	d901      	bls.n	8006b90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e007      	b.n	8006ba0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b90:	4b06      	ldr	r3, [pc, #24]	; (8006bac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b9c:	d1ee      	bne.n	8006b7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40023800 	.word	0x40023800
 8006bac:	40007000 	.word	0x40007000

08006bb0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006bb8:	f7fc f8fe 	bl	8002db8 <HAL_GetTick>
 8006bbc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e067      	b.n	8006c98 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10b      	bne.n	8006bec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7fb fab5 	bl	800214c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006be2:	f241 3188 	movw	r1, #5000	; 0x1388
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f85e 	bl	8006ca8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	021a      	lsls	r2, r3, #8
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2120      	movs	r1, #32
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f856 	bl	8006cc4 <QSPI_WaitFlagStateUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d135      	bne.n	8006c8e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <HAL_QSPI_Init+0xf0>)
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	6852      	ldr	r2, [r2, #4]
 8006c30:	0611      	lsls	r1, r2, #24
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	68d2      	ldr	r2, [r2, #12]
 8006c36:	4311      	orrs	r1, r2
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	69d2      	ldr	r2, [r2, #28]
 8006c3c:	4311      	orrs	r1, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6a12      	ldr	r2, [r2, #32]
 8006c42:	4311      	orrs	r1, r2
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	4b14      	ldr	r3, [pc, #80]	; (8006ca4 <HAL_QSPI_Init+0xf4>)
 8006c54:	4013      	ands	r3, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6912      	ldr	r2, [r2, #16]
 8006c5a:	0411      	lsls	r1, r2, #16
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6952      	ldr	r2, [r2, #20]
 8006c60:	4311      	orrs	r1, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6992      	ldr	r2, [r2, #24]
 8006c66:	4311      	orrs	r1, r2
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6812      	ldr	r2, [r2, #0]
 8006c6c:	430b      	orrs	r3, r1
 8006c6e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006c96:	7afb      	ldrb	r3, [r7, #11]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	00ffff2f 	.word	0x00ffff2f
 8006ca4:	ffe0f8fe 	.word	0xffe0f8fe

08006ca8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	683a      	ldr	r2, [r7, #0]
 8006cb6:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	603b      	str	r3, [r7, #0]
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006cd4:	e01a      	b.n	8006d0c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cdc:	d016      	beq.n	8006d0c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cde:	f7fc f86b 	bl	8002db8 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d302      	bcc.n	8006cf4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10b      	bne.n	8006d0c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2204      	movs	r2, #4
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d00:	f043 0201 	orr.w	r2, r3, #1
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e00e      	b.n	8006d2a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4013      	ands	r3, r2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	bf14      	ite	ne
 8006d1a:	2301      	movne	r3, #1
 8006d1c:	2300      	moveq	r3, #0
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d1d6      	bne.n	8006cd6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e291      	b.n	800726e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 8087 	beq.w	8006e66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d58:	4b96      	ldr	r3, [pc, #600]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 030c 	and.w	r3, r3, #12
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d00c      	beq.n	8006d7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d64:	4b93      	ldr	r3, [pc, #588]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 030c 	and.w	r3, r3, #12
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d112      	bne.n	8006d96 <HAL_RCC_OscConfig+0x62>
 8006d70:	4b90      	ldr	r3, [pc, #576]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d7c:	d10b      	bne.n	8006d96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d7e:	4b8d      	ldr	r3, [pc, #564]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d06c      	beq.n	8006e64 <HAL_RCC_OscConfig+0x130>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d168      	bne.n	8006e64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e26b      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9e:	d106      	bne.n	8006dae <HAL_RCC_OscConfig+0x7a>
 8006da0:	4b84      	ldr	r3, [pc, #528]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a83      	ldr	r2, [pc, #524]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	e02e      	b.n	8006e0c <HAL_RCC_OscConfig+0xd8>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10c      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x9c>
 8006db6:	4b7f      	ldr	r3, [pc, #508]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a7e      	ldr	r2, [pc, #504]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	4b7c      	ldr	r3, [pc, #496]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a7b      	ldr	r2, [pc, #492]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	e01d      	b.n	8006e0c <HAL_RCC_OscConfig+0xd8>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006dd8:	d10c      	bne.n	8006df4 <HAL_RCC_OscConfig+0xc0>
 8006dda:	4b76      	ldr	r3, [pc, #472]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a75      	ldr	r2, [pc, #468]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	4b73      	ldr	r3, [pc, #460]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a72      	ldr	r2, [pc, #456]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	e00b      	b.n	8006e0c <HAL_RCC_OscConfig+0xd8>
 8006df4:	4b6f      	ldr	r3, [pc, #444]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a6e      	ldr	r2, [pc, #440]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	4b6c      	ldr	r3, [pc, #432]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a6b      	ldr	r2, [pc, #428]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d013      	beq.n	8006e3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e14:	f7fb ffd0 	bl	8002db8 <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e1c:	f7fb ffcc 	bl	8002db8 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b64      	cmp	r3, #100	; 0x64
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e21f      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e2e:	4b61      	ldr	r3, [pc, #388]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0f0      	beq.n	8006e1c <HAL_RCC_OscConfig+0xe8>
 8006e3a:	e014      	b.n	8006e66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e3c:	f7fb ffbc 	bl	8002db8 <HAL_GetTick>
 8006e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e44:	f7fb ffb8 	bl	8002db8 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b64      	cmp	r3, #100	; 0x64
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e20b      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e56:	4b57      	ldr	r3, [pc, #348]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f0      	bne.n	8006e44 <HAL_RCC_OscConfig+0x110>
 8006e62:	e000      	b.n	8006e66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d069      	beq.n	8006f46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e72:	4b50      	ldr	r3, [pc, #320]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f003 030c 	and.w	r3, r3, #12
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e7e:	4b4d      	ldr	r3, [pc, #308]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 030c 	and.w	r3, r3, #12
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d11c      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x190>
 8006e8a:	4b4a      	ldr	r3, [pc, #296]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d116      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e96:	4b47      	ldr	r3, [pc, #284]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_RCC_OscConfig+0x17a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d001      	beq.n	8006eae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e1df      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eae:	4b41      	ldr	r3, [pc, #260]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	493d      	ldr	r1, [pc, #244]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ec2:	e040      	b.n	8006f46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d023      	beq.n	8006f14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ecc:	4b39      	ldr	r3, [pc, #228]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a38      	ldr	r2, [pc, #224]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006ed2:	f043 0301 	orr.w	r3, r3, #1
 8006ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed8:	f7fb ff6e 	bl	8002db8 <HAL_GetTick>
 8006edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ede:	e008      	b.n	8006ef2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ee0:	f7fb ff6a 	bl	8002db8 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d901      	bls.n	8006ef2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e1bd      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef2:	4b30      	ldr	r3, [pc, #192]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d0f0      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006efe:	4b2d      	ldr	r3, [pc, #180]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	4929      	ldr	r1, [pc, #164]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	600b      	str	r3, [r1, #0]
 8006f12:	e018      	b.n	8006f46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f14:	4b27      	ldr	r3, [pc, #156]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a26      	ldr	r2, [pc, #152]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f20:	f7fb ff4a 	bl	8002db8 <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f28:	f7fb ff46 	bl	8002db8 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e199      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f3a:	4b1e      	ldr	r3, [pc, #120]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f0      	bne.n	8006f28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d038      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d019      	beq.n	8006f8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f5a:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5e:	4a15      	ldr	r2, [pc, #84]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006f60:	f043 0301 	orr.w	r3, r3, #1
 8006f64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f66:	f7fb ff27 	bl	8002db8 <HAL_GetTick>
 8006f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f6c:	e008      	b.n	8006f80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f6e:	f7fb ff23 	bl	8002db8 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d901      	bls.n	8006f80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e176      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f80:	4b0c      	ldr	r3, [pc, #48]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d0f0      	beq.n	8006f6e <HAL_RCC_OscConfig+0x23a>
 8006f8c:	e01a      	b.n	8006fc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f92:	4a08      	ldr	r2, [pc, #32]	; (8006fb4 <HAL_RCC_OscConfig+0x280>)
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f9a:	f7fb ff0d 	bl	8002db8 <HAL_GetTick>
 8006f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fa0:	e00a      	b.n	8006fb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fa2:	f7fb ff09 	bl	8002db8 <HAL_GetTick>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d903      	bls.n	8006fb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e15c      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
 8006fb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fb8:	4b91      	ldr	r3, [pc, #580]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8006fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1ee      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 80a4 	beq.w	800711a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fd2:	4b8b      	ldr	r3, [pc, #556]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10d      	bne.n	8006ffa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fde:	4b88      	ldr	r3, [pc, #544]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	4a87      	ldr	r2, [pc, #540]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8006fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8006fea:	4b85      	ldr	r3, [pc, #532]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff2:	60bb      	str	r3, [r7, #8]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ffa:	4b82      	ldr	r3, [pc, #520]	; (8007204 <HAL_RCC_OscConfig+0x4d0>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007002:	2b00      	cmp	r3, #0
 8007004:	d118      	bne.n	8007038 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007006:	4b7f      	ldr	r3, [pc, #508]	; (8007204 <HAL_RCC_OscConfig+0x4d0>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a7e      	ldr	r2, [pc, #504]	; (8007204 <HAL_RCC_OscConfig+0x4d0>)
 800700c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007012:	f7fb fed1 	bl	8002db8 <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007018:	e008      	b.n	800702c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800701a:	f7fb fecd 	bl	8002db8 <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	2b64      	cmp	r3, #100	; 0x64
 8007026:	d901      	bls.n	800702c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e120      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800702c:	4b75      	ldr	r3, [pc, #468]	; (8007204 <HAL_RCC_OscConfig+0x4d0>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0f0      	beq.n	800701a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d106      	bne.n	800704e <HAL_RCC_OscConfig+0x31a>
 8007040:	4b6f      	ldr	r3, [pc, #444]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007044:	4a6e      	ldr	r2, [pc, #440]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007046:	f043 0301 	orr.w	r3, r3, #1
 800704a:	6713      	str	r3, [r2, #112]	; 0x70
 800704c:	e02d      	b.n	80070aa <HAL_RCC_OscConfig+0x376>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10c      	bne.n	8007070 <HAL_RCC_OscConfig+0x33c>
 8007056:	4b6a      	ldr	r3, [pc, #424]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800705a:	4a69      	ldr	r2, [pc, #420]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	6713      	str	r3, [r2, #112]	; 0x70
 8007062:	4b67      	ldr	r3, [pc, #412]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	4a66      	ldr	r2, [pc, #408]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007068:	f023 0304 	bic.w	r3, r3, #4
 800706c:	6713      	str	r3, [r2, #112]	; 0x70
 800706e:	e01c      	b.n	80070aa <HAL_RCC_OscConfig+0x376>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	2b05      	cmp	r3, #5
 8007076:	d10c      	bne.n	8007092 <HAL_RCC_OscConfig+0x35e>
 8007078:	4b61      	ldr	r3, [pc, #388]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 800707a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707c:	4a60      	ldr	r2, [pc, #384]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 800707e:	f043 0304 	orr.w	r3, r3, #4
 8007082:	6713      	str	r3, [r2, #112]	; 0x70
 8007084:	4b5e      	ldr	r3, [pc, #376]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007088:	4a5d      	ldr	r2, [pc, #372]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 800708a:	f043 0301 	orr.w	r3, r3, #1
 800708e:	6713      	str	r3, [r2, #112]	; 0x70
 8007090:	e00b      	b.n	80070aa <HAL_RCC_OscConfig+0x376>
 8007092:	4b5b      	ldr	r3, [pc, #364]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007096:	4a5a      	ldr	r2, [pc, #360]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007098:	f023 0301 	bic.w	r3, r3, #1
 800709c:	6713      	str	r3, [r2, #112]	; 0x70
 800709e:	4b58      	ldr	r3, [pc, #352]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 80070a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a2:	4a57      	ldr	r2, [pc, #348]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 80070a4:	f023 0304 	bic.w	r3, r3, #4
 80070a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d015      	beq.n	80070de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b2:	f7fb fe81 	bl	8002db8 <HAL_GetTick>
 80070b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b8:	e00a      	b.n	80070d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070ba:	f7fb fe7d 	bl	8002db8 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d901      	bls.n	80070d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e0ce      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070d0:	4b4b      	ldr	r3, [pc, #300]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 80070d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0ee      	beq.n	80070ba <HAL_RCC_OscConfig+0x386>
 80070dc:	e014      	b.n	8007108 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070de:	f7fb fe6b 	bl	8002db8 <HAL_GetTick>
 80070e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070e4:	e00a      	b.n	80070fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070e6:	f7fb fe67 	bl	8002db8 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d901      	bls.n	80070fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e0b8      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070fc:	4b40      	ldr	r3, [pc, #256]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 80070fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1ee      	bne.n	80070e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	2b01      	cmp	r3, #1
 800710c:	d105      	bne.n	800711a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800710e:	4b3c      	ldr	r3, [pc, #240]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	4a3b      	ldr	r2, [pc, #236]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007118:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f000 80a4 	beq.w	800726c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007124:	4b36      	ldr	r3, [pc, #216]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 030c 	and.w	r3, r3, #12
 800712c:	2b08      	cmp	r3, #8
 800712e:	d06b      	beq.n	8007208 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d149      	bne.n	80071cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007138:	4b31      	ldr	r3, [pc, #196]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a30      	ldr	r2, [pc, #192]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 800713e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007144:	f7fb fe38 	bl	8002db8 <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800714c:	f7fb fe34 	bl	8002db8 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e087      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800715e:	4b28      	ldr	r3, [pc, #160]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1f0      	bne.n	800714c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	69da      	ldr	r2, [r3, #28]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a1b      	ldr	r3, [r3, #32]
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	019b      	lsls	r3, r3, #6
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	085b      	lsrs	r3, r3, #1
 8007182:	3b01      	subs	r3, #1
 8007184:	041b      	lsls	r3, r3, #16
 8007186:	431a      	orrs	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	061b      	lsls	r3, r3, #24
 800718e:	4313      	orrs	r3, r2
 8007190:	4a1b      	ldr	r2, [pc, #108]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 8007192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007196:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007198:	4b19      	ldr	r3, [pc, #100]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a18      	ldr	r2, [pc, #96]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 800719e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a4:	f7fb fe08 	bl	8002db8 <HAL_GetTick>
 80071a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071aa:	e008      	b.n	80071be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071ac:	f7fb fe04 	bl	8002db8 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d901      	bls.n	80071be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e057      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071be:	4b10      	ldr	r3, [pc, #64]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0f0      	beq.n	80071ac <HAL_RCC_OscConfig+0x478>
 80071ca:	e04f      	b.n	800726c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071cc:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a0b      	ldr	r2, [pc, #44]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 80071d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fb fdee 	bl	8002db8 <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071e0:	f7fb fdea 	bl	8002db8 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e03d      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071f2:	4b03      	ldr	r3, [pc, #12]	; (8007200 <HAL_RCC_OscConfig+0x4cc>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1f0      	bne.n	80071e0 <HAL_RCC_OscConfig+0x4ac>
 80071fe:	e035      	b.n	800726c <HAL_RCC_OscConfig+0x538>
 8007200:	40023800 	.word	0x40023800
 8007204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007208:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <HAL_RCC_OscConfig+0x544>)
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d028      	beq.n	8007268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007220:	429a      	cmp	r2, r3
 8007222:	d121      	bne.n	8007268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800722e:	429a      	cmp	r2, r3
 8007230:	d11a      	bne.n	8007268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007238:	4013      	ands	r3, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800723e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007240:	4293      	cmp	r3, r2
 8007242:	d111      	bne.n	8007268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724e:	085b      	lsrs	r3, r3, #1
 8007250:	3b01      	subs	r3, #1
 8007252:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007254:	429a      	cmp	r2, r3
 8007256:	d107      	bne.n	8007268 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007264:	429a      	cmp	r2, r3
 8007266:	d001      	beq.n	800726c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40023800 	.word	0x40023800

0800727c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e0d0      	b.n	8007436 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007294:	4b6a      	ldr	r3, [pc, #424]	; (8007440 <HAL_RCC_ClockConfig+0x1c4>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d910      	bls.n	80072c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072a2:	4b67      	ldr	r3, [pc, #412]	; (8007440 <HAL_RCC_ClockConfig+0x1c4>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f023 020f 	bic.w	r2, r3, #15
 80072aa:	4965      	ldr	r1, [pc, #404]	; (8007440 <HAL_RCC_ClockConfig+0x1c4>)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072b2:	4b63      	ldr	r3, [pc, #396]	; (8007440 <HAL_RCC_ClockConfig+0x1c4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d001      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e0b8      	b.n	8007436 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0302 	and.w	r3, r3, #2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d020      	beq.n	8007312 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d005      	beq.n	80072e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072dc:	4b59      	ldr	r3, [pc, #356]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	4a58      	ldr	r2, [pc, #352]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 80072e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0308 	and.w	r3, r3, #8
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072f4:	4b53      	ldr	r3, [pc, #332]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	4a52      	ldr	r2, [pc, #328]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 80072fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80072fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007300:	4b50      	ldr	r3, [pc, #320]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	494d      	ldr	r1, [pc, #308]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 800730e:	4313      	orrs	r3, r2
 8007310:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d040      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d107      	bne.n	8007336 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007326:	4b47      	ldr	r3, [pc, #284]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d115      	bne.n	800735e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e07f      	b.n	8007436 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2b02      	cmp	r3, #2
 800733c:	d107      	bne.n	800734e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800733e:	4b41      	ldr	r3, [pc, #260]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e073      	b.n	8007436 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800734e:	4b3d      	ldr	r3, [pc, #244]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e06b      	b.n	8007436 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800735e:	4b39      	ldr	r3, [pc, #228]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f023 0203 	bic.w	r2, r3, #3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	4936      	ldr	r1, [pc, #216]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 800736c:	4313      	orrs	r3, r2
 800736e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007370:	f7fb fd22 	bl	8002db8 <HAL_GetTick>
 8007374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007376:	e00a      	b.n	800738e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007378:	f7fb fd1e 	bl	8002db8 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	f241 3288 	movw	r2, #5000	; 0x1388
 8007386:	4293      	cmp	r3, r2
 8007388:	d901      	bls.n	800738e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e053      	b.n	8007436 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800738e:	4b2d      	ldr	r3, [pc, #180]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f003 020c 	and.w	r2, r3, #12
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	429a      	cmp	r2, r3
 800739e:	d1eb      	bne.n	8007378 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073a0:	4b27      	ldr	r3, [pc, #156]	; (8007440 <HAL_RCC_ClockConfig+0x1c4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 030f 	and.w	r3, r3, #15
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d210      	bcs.n	80073d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ae:	4b24      	ldr	r3, [pc, #144]	; (8007440 <HAL_RCC_ClockConfig+0x1c4>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f023 020f 	bic.w	r2, r3, #15
 80073b6:	4922      	ldr	r1, [pc, #136]	; (8007440 <HAL_RCC_ClockConfig+0x1c4>)
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073be:	4b20      	ldr	r3, [pc, #128]	; (8007440 <HAL_RCC_ClockConfig+0x1c4>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d001      	beq.n	80073d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e032      	b.n	8007436 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0304 	and.w	r3, r3, #4
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d008      	beq.n	80073ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073dc:	4b19      	ldr	r3, [pc, #100]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	4916      	ldr	r1, [pc, #88]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0308 	and.w	r3, r3, #8
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d009      	beq.n	800740e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073fa:	4b12      	ldr	r3, [pc, #72]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	490e      	ldr	r1, [pc, #56]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 800740a:	4313      	orrs	r3, r2
 800740c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800740e:	f000 f821 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 8007412:	4602      	mov	r2, r0
 8007414:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <HAL_RCC_ClockConfig+0x1c8>)
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	091b      	lsrs	r3, r3, #4
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	490a      	ldr	r1, [pc, #40]	; (8007448 <HAL_RCC_ClockConfig+0x1cc>)
 8007420:	5ccb      	ldrb	r3, [r1, r3]
 8007422:	fa22 f303 	lsr.w	r3, r2, r3
 8007426:	4a09      	ldr	r2, [pc, #36]	; (800744c <HAL_RCC_ClockConfig+0x1d0>)
 8007428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800742a:	4b09      	ldr	r3, [pc, #36]	; (8007450 <HAL_RCC_ClockConfig+0x1d4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4618      	mov	r0, r3
 8007430:	f7fb fb9a 	bl	8002b68 <HAL_InitTick>

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	40023c00 	.word	0x40023c00
 8007444:	40023800 	.word	0x40023800
 8007448:	08012db4 	.word	0x08012db4
 800744c:	20000000 	.word	0x20000000
 8007450:	20000004 	.word	0x20000004

08007454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007458:	b090      	sub	sp, #64	; 0x40
 800745a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	637b      	str	r3, [r7, #52]	; 0x34
 8007460:	2300      	movs	r3, #0
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007464:	2300      	movs	r3, #0
 8007466:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800746c:	4b59      	ldr	r3, [pc, #356]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f003 030c 	and.w	r3, r3, #12
 8007474:	2b08      	cmp	r3, #8
 8007476:	d00d      	beq.n	8007494 <HAL_RCC_GetSysClockFreq+0x40>
 8007478:	2b08      	cmp	r3, #8
 800747a:	f200 80a1 	bhi.w	80075c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <HAL_RCC_GetSysClockFreq+0x34>
 8007482:	2b04      	cmp	r3, #4
 8007484:	d003      	beq.n	800748e <HAL_RCC_GetSysClockFreq+0x3a>
 8007486:	e09b      	b.n	80075c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007488:	4b53      	ldr	r3, [pc, #332]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800748a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800748c:	e09b      	b.n	80075c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800748e:	4b53      	ldr	r3, [pc, #332]	; (80075dc <HAL_RCC_GetSysClockFreq+0x188>)
 8007490:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007492:	e098      	b.n	80075c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007494:	4b4f      	ldr	r3, [pc, #316]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800749c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800749e:	4b4d      	ldr	r3, [pc, #308]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d028      	beq.n	80074fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074aa:	4b4a      	ldr	r3, [pc, #296]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	099b      	lsrs	r3, r3, #6
 80074b0:	2200      	movs	r2, #0
 80074b2:	623b      	str	r3, [r7, #32]
 80074b4:	627a      	str	r2, [r7, #36]	; 0x24
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80074bc:	2100      	movs	r1, #0
 80074be:	4b47      	ldr	r3, [pc, #284]	; (80075dc <HAL_RCC_GetSysClockFreq+0x188>)
 80074c0:	fb03 f201 	mul.w	r2, r3, r1
 80074c4:	2300      	movs	r3, #0
 80074c6:	fb00 f303 	mul.w	r3, r0, r3
 80074ca:	4413      	add	r3, r2
 80074cc:	4a43      	ldr	r2, [pc, #268]	; (80075dc <HAL_RCC_GetSysClockFreq+0x188>)
 80074ce:	fba0 1202 	umull	r1, r2, r0, r2
 80074d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074d4:	460a      	mov	r2, r1
 80074d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80074d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074da:	4413      	add	r3, r2
 80074dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e0:	2200      	movs	r2, #0
 80074e2:	61bb      	str	r3, [r7, #24]
 80074e4:	61fa      	str	r2, [r7, #28]
 80074e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80074ee:	f7f8 fe8f 	bl	8000210 <__aeabi_uldivmod>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	4613      	mov	r3, r2
 80074f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074fa:	e053      	b.n	80075a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074fc:	4b35      	ldr	r3, [pc, #212]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	099b      	lsrs	r3, r3, #6
 8007502:	2200      	movs	r2, #0
 8007504:	613b      	str	r3, [r7, #16]
 8007506:	617a      	str	r2, [r7, #20]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800750e:	f04f 0b00 	mov.w	fp, #0
 8007512:	4652      	mov	r2, sl
 8007514:	465b      	mov	r3, fp
 8007516:	f04f 0000 	mov.w	r0, #0
 800751a:	f04f 0100 	mov.w	r1, #0
 800751e:	0159      	lsls	r1, r3, #5
 8007520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007524:	0150      	lsls	r0, r2, #5
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	ebb2 080a 	subs.w	r8, r2, sl
 800752e:	eb63 090b 	sbc.w	r9, r3, fp
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	f04f 0300 	mov.w	r3, #0
 800753a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800753e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007542:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007546:	ebb2 0408 	subs.w	r4, r2, r8
 800754a:	eb63 0509 	sbc.w	r5, r3, r9
 800754e:	f04f 0200 	mov.w	r2, #0
 8007552:	f04f 0300 	mov.w	r3, #0
 8007556:	00eb      	lsls	r3, r5, #3
 8007558:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800755c:	00e2      	lsls	r2, r4, #3
 800755e:	4614      	mov	r4, r2
 8007560:	461d      	mov	r5, r3
 8007562:	eb14 030a 	adds.w	r3, r4, sl
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	eb45 030b 	adc.w	r3, r5, fp
 800756c:	607b      	str	r3, [r7, #4]
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	f04f 0300 	mov.w	r3, #0
 8007576:	e9d7 4500 	ldrd	r4, r5, [r7]
 800757a:	4629      	mov	r1, r5
 800757c:	028b      	lsls	r3, r1, #10
 800757e:	4621      	mov	r1, r4
 8007580:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007584:	4621      	mov	r1, r4
 8007586:	028a      	lsls	r2, r1, #10
 8007588:	4610      	mov	r0, r2
 800758a:	4619      	mov	r1, r3
 800758c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758e:	2200      	movs	r2, #0
 8007590:	60bb      	str	r3, [r7, #8]
 8007592:	60fa      	str	r2, [r7, #12]
 8007594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007598:	f7f8 fe3a 	bl	8000210 <__aeabi_uldivmod>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4613      	mov	r3, r2
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80075a4:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	0c1b      	lsrs	r3, r3, #16
 80075aa:	f003 0303 	and.w	r3, r3, #3
 80075ae:	3301      	adds	r3, #1
 80075b0:	005b      	lsls	r3, r3, #1
 80075b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80075b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80075be:	e002      	b.n	80075c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075c0:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80075c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80075c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3740      	adds	r7, #64	; 0x40
 80075cc:	46bd      	mov	sp, r7
 80075ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075d2:	bf00      	nop
 80075d4:	40023800 	.word	0x40023800
 80075d8:	00f42400 	.word	0x00f42400
 80075dc:	017d7840 	.word	0x017d7840

080075e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075e4:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80075e6:	681b      	ldr	r3, [r3, #0]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000000 	.word	0x20000000

080075f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075fc:	f7ff fff0 	bl	80075e0 <HAL_RCC_GetHCLKFreq>
 8007600:	4602      	mov	r2, r0
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	0a9b      	lsrs	r3, r3, #10
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	4903      	ldr	r1, [pc, #12]	; (800761c <HAL_RCC_GetPCLK1Freq+0x24>)
 800760e:	5ccb      	ldrb	r3, [r1, r3]
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007614:	4618      	mov	r0, r3
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40023800 	.word	0x40023800
 800761c:	08012dc4 	.word	0x08012dc4

08007620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007624:	f7ff ffdc 	bl	80075e0 <HAL_RCC_GetHCLKFreq>
 8007628:	4602      	mov	r2, r0
 800762a:	4b05      	ldr	r3, [pc, #20]	; (8007640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	0b5b      	lsrs	r3, r3, #13
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	4903      	ldr	r1, [pc, #12]	; (8007644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007636:	5ccb      	ldrb	r3, [r1, r3]
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800763c:	4618      	mov	r0, r3
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40023800 	.word	0x40023800
 8007644:	08012dc4 	.word	0x08012dc4

08007648 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	220f      	movs	r2, #15
 8007656:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007658:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 0203 	and.w	r2, r3, #3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007664:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007670:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	08db      	lsrs	r3, r3, #3
 8007682:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <HAL_RCC_GetClockConfig+0x60>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 020f 	and.w	r2, r3, #15
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	601a      	str	r2, [r3, #0]
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40023800 	.word	0x40023800
 80076a8:	40023c00 	.word	0x40023c00

080076ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d012      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80076d4:	4b69      	ldr	r3, [pc, #420]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	4a68      	ldr	r2, [pc, #416]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80076de:	6093      	str	r3, [r2, #8]
 80076e0:	4b66      	ldr	r3, [pc, #408]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e8:	4964      	ldr	r1, [pc, #400]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80076f6:	2301      	movs	r3, #1
 80076f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d017      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007706:	4b5d      	ldr	r3, [pc, #372]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800770c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007714:	4959      	ldr	r1, [pc, #356]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007716:	4313      	orrs	r3, r2
 8007718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007724:	d101      	bne.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007726:	2301      	movs	r3, #1
 8007728:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007732:	2301      	movs	r3, #1
 8007734:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d017      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007742:	4b4e      	ldr	r3, [pc, #312]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007748:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	494a      	ldr	r1, [pc, #296]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007752:	4313      	orrs	r3, r2
 8007754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007760:	d101      	bne.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007762:	2301      	movs	r3, #1
 8007764:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800776e:	2301      	movs	r3, #1
 8007770:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800777e:	2301      	movs	r3, #1
 8007780:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0320 	and.w	r3, r3, #32
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 808b 	beq.w	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007790:	4b3a      	ldr	r3, [pc, #232]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007794:	4a39      	ldr	r2, [pc, #228]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800779a:	6413      	str	r3, [r2, #64]	; 0x40
 800779c:	4b37      	ldr	r3, [pc, #220]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077a4:	60bb      	str	r3, [r7, #8]
 80077a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80077a8:	4b35      	ldr	r3, [pc, #212]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a34      	ldr	r2, [pc, #208]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077b4:	f7fb fb00 	bl	8002db8 <HAL_GetTick>
 80077b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80077ba:	e008      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077bc:	f7fb fafc 	bl	8002db8 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b64      	cmp	r3, #100	; 0x64
 80077c8:	d901      	bls.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e357      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80077ce:	4b2c      	ldr	r3, [pc, #176]	; (8007880 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0f0      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077da:	4b28      	ldr	r3, [pc, #160]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d035      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d02e      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077f8:	4b20      	ldr	r3, [pc, #128]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007800:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007802:	4b1e      	ldr	r3, [pc, #120]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007806:	4a1d      	ldr	r2, [pc, #116]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800780c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800780e:	4b1b      	ldr	r3, [pc, #108]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007812:	4a1a      	ldr	r2, [pc, #104]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007818:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800781a:	4a18      	ldr	r2, [pc, #96]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007820:	4b16      	ldr	r3, [pc, #88]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007824:	f003 0301 	and.w	r3, r3, #1
 8007828:	2b01      	cmp	r3, #1
 800782a:	d114      	bne.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800782c:	f7fb fac4 	bl	8002db8 <HAL_GetTick>
 8007830:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007832:	e00a      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007834:	f7fb fac0 	bl	8002db8 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007842:	4293      	cmp	r3, r2
 8007844:	d901      	bls.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e319      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800784a:	4b0c      	ldr	r3, [pc, #48]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800784c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d0ee      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800785e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007862:	d111      	bne.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007864:	4b05      	ldr	r3, [pc, #20]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007870:	4b04      	ldr	r3, [pc, #16]	; (8007884 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007872:	400b      	ands	r3, r1
 8007874:	4901      	ldr	r1, [pc, #4]	; (800787c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007876:	4313      	orrs	r3, r2
 8007878:	608b      	str	r3, [r1, #8]
 800787a:	e00b      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800787c:	40023800 	.word	0x40023800
 8007880:	40007000 	.word	0x40007000
 8007884:	0ffffcff 	.word	0x0ffffcff
 8007888:	4baa      	ldr	r3, [pc, #680]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	4aa9      	ldr	r2, [pc, #676]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800788e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007892:	6093      	str	r3, [r2, #8]
 8007894:	4ba7      	ldr	r3, [pc, #668]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078a0:	49a4      	ldr	r1, [pc, #656]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d010      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078b2:	4ba0      	ldr	r3, [pc, #640]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b8:	4a9e      	ldr	r2, [pc, #632]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80078c2:	4b9c      	ldr	r3, [pc, #624]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	4999      	ldr	r1, [pc, #612]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00a      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078e0:	4b94      	ldr	r3, [pc, #592]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ee:	4991      	ldr	r1, [pc, #580]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007902:	4b8c      	ldr	r3, [pc, #560]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007908:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007910:	4988      	ldr	r1, [pc, #544]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007912:	4313      	orrs	r3, r2
 8007914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007924:	4b83      	ldr	r3, [pc, #524]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007932:	4980      	ldr	r1, [pc, #512]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007934:	4313      	orrs	r3, r2
 8007936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007946:	4b7b      	ldr	r3, [pc, #492]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007954:	4977      	ldr	r1, [pc, #476]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007956:	4313      	orrs	r3, r2
 8007958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007968:	4b72      	ldr	r3, [pc, #456]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800796a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800796e:	f023 0203 	bic.w	r2, r3, #3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	496f      	ldr	r1, [pc, #444]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007978:	4313      	orrs	r3, r2
 800797a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800798a:	4b6a      	ldr	r3, [pc, #424]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800798c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007990:	f023 020c 	bic.w	r2, r3, #12
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007998:	4966      	ldr	r1, [pc, #408]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800799a:	4313      	orrs	r3, r2
 800799c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079ac:	4b61      	ldr	r3, [pc, #388]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ba:	495e      	ldr	r1, [pc, #376]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80079ce:	4b59      	ldr	r3, [pc, #356]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079dc:	4955      	ldr	r1, [pc, #340]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00a      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80079f0:	4b50      	ldr	r3, [pc, #320]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079fe:	494d      	ldr	r1, [pc, #308]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00a      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007a12:	4b48      	ldr	r3, [pc, #288]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a20:	4944      	ldr	r1, [pc, #272]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00a      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007a34:	4b3f      	ldr	r3, [pc, #252]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a42:	493c      	ldr	r1, [pc, #240]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007a56:	4b37      	ldr	r3, [pc, #220]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a64:	4933      	ldr	r1, [pc, #204]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007a78:	4b2e      	ldr	r3, [pc, #184]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a86:	492b      	ldr	r1, [pc, #172]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d011      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007a9a:	4b26      	ldr	r3, [pc, #152]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa8:	4922      	ldr	r1, [pc, #136]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ab8:	d101      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007aba:	2301      	movs	r3, #1
 8007abc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ada:	4b16      	ldr	r3, [pc, #88]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae8:	4912      	ldr	r1, [pc, #72]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007afc:	4b0d      	ldr	r3, [pc, #52]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b0c:	4909      	ldr	r1, [pc, #36]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d006      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 80d9 	beq.w	8007cda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b28:	4b02      	ldr	r3, [pc, #8]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a01      	ldr	r2, [pc, #4]	; (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b32:	e001      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007b34:	40023800 	.word	0x40023800
 8007b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b3a:	f7fb f93d 	bl	8002db8 <HAL_GetTick>
 8007b3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b40:	e008      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007b42:	f7fb f939 	bl	8002db8 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b64      	cmp	r3, #100	; 0x64
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e194      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b54:	4b6c      	ldr	r3, [pc, #432]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1f0      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d021      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d11d      	bne.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b74:	4b64      	ldr	r3, [pc, #400]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b7a:	0c1b      	lsrs	r3, r3, #16
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b82:	4b61      	ldr	r3, [pc, #388]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b88:	0e1b      	lsrs	r3, r3, #24
 8007b8a:	f003 030f 	and.w	r3, r3, #15
 8007b8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	019a      	lsls	r2, r3, #6
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	041b      	lsls	r3, r3, #16
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	061b      	lsls	r3, r3, #24
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	071b      	lsls	r3, r3, #28
 8007ba8:	4957      	ldr	r1, [pc, #348]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d004      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bc4:	d00a      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d02e      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bda:	d129      	bne.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007bdc:	4b4a      	ldr	r3, [pc, #296]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007be2:	0c1b      	lsrs	r3, r3, #16
 8007be4:	f003 0303 	and.w	r3, r3, #3
 8007be8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007bea:	4b47      	ldr	r3, [pc, #284]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bf0:	0f1b      	lsrs	r3, r3, #28
 8007bf2:	f003 0307 	and.w	r3, r3, #7
 8007bf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	019a      	lsls	r2, r3, #6
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	041b      	lsls	r3, r3, #16
 8007c02:	431a      	orrs	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	061b      	lsls	r3, r3, #24
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	071b      	lsls	r3, r3, #28
 8007c10:	493d      	ldr	r1, [pc, #244]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c12:	4313      	orrs	r3, r2
 8007c14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007c18:	4b3b      	ldr	r3, [pc, #236]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c1e:	f023 021f 	bic.w	r2, r3, #31
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	3b01      	subs	r3, #1
 8007c28:	4937      	ldr	r1, [pc, #220]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01d      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007c3c:	4b32      	ldr	r3, [pc, #200]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c42:	0e1b      	lsrs	r3, r3, #24
 8007c44:	f003 030f 	and.w	r3, r3, #15
 8007c48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c4a:	4b2f      	ldr	r3, [pc, #188]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c50:	0f1b      	lsrs	r3, r3, #28
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	019a      	lsls	r2, r3, #6
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	041b      	lsls	r3, r3, #16
 8007c64:	431a      	orrs	r2, r3
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	061b      	lsls	r3, r3, #24
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	071b      	lsls	r3, r3, #28
 8007c70:	4925      	ldr	r1, [pc, #148]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d011      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	019a      	lsls	r2, r3, #6
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	041b      	lsls	r3, r3, #16
 8007c90:	431a      	orrs	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	061b      	lsls	r3, r3, #24
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	071b      	lsls	r3, r3, #28
 8007ca0:	4919      	ldr	r1, [pc, #100]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ca8:	4b17      	ldr	r3, [pc, #92]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a16      	ldr	r2, [pc, #88]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cb4:	f7fb f880 	bl	8002db8 <HAL_GetTick>
 8007cb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cba:	e008      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007cbc:	f7fb f87c 	bl	8002db8 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b64      	cmp	r3, #100	; 0x64
 8007cc8:	d901      	bls.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e0d7      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cce:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0f0      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	f040 80cd 	bne.w	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007ce2:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a08      	ldr	r2, [pc, #32]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cee:	f7fb f863 	bl	8002db8 <HAL_GetTick>
 8007cf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007cf4:	e00a      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007cf6:	f7fb f85f 	bl	8002db8 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b64      	cmp	r3, #100	; 0x64
 8007d02:	d903      	bls.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e0ba      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007d08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d0c:	4b5e      	ldr	r3, [pc, #376]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d18:	d0ed      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d009      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d02e      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d12a      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d42:	4b51      	ldr	r3, [pc, #324]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d48:	0c1b      	lsrs	r3, r3, #16
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d50:	4b4d      	ldr	r3, [pc, #308]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d56:	0f1b      	lsrs	r3, r3, #28
 8007d58:	f003 0307 	and.w	r3, r3, #7
 8007d5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	019a      	lsls	r2, r3, #6
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	041b      	lsls	r3, r3, #16
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	061b      	lsls	r3, r3, #24
 8007d70:	431a      	orrs	r2, r3
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	071b      	lsls	r3, r3, #28
 8007d76:	4944      	ldr	r1, [pc, #272]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d7e:	4b42      	ldr	r3, [pc, #264]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	021b      	lsls	r3, r3, #8
 8007d90:	493d      	ldr	r1, [pc, #244]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d022      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dac:	d11d      	bne.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007dae:	4b36      	ldr	r3, [pc, #216]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db4:	0e1b      	lsrs	r3, r3, #24
 8007db6:	f003 030f 	and.w	r3, r3, #15
 8007dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007dbc:	4b32      	ldr	r3, [pc, #200]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc2:	0f1b      	lsrs	r3, r3, #28
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	019a      	lsls	r2, r3, #6
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a1b      	ldr	r3, [r3, #32]
 8007dd4:	041b      	lsls	r3, r3, #16
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	061b      	lsls	r3, r3, #24
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	071b      	lsls	r3, r3, #28
 8007de2:	4929      	ldr	r1, [pc, #164]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007de4:	4313      	orrs	r3, r2
 8007de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0308 	and.w	r3, r3, #8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d028      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007df6:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfc:	0e1b      	lsrs	r3, r3, #24
 8007dfe:	f003 030f 	and.w	r3, r3, #15
 8007e02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007e04:	4b20      	ldr	r3, [pc, #128]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e0a:	0c1b      	lsrs	r3, r3, #16
 8007e0c:	f003 0303 	and.w	r3, r3, #3
 8007e10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	019a      	lsls	r2, r3, #6
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	041b      	lsls	r3, r3, #16
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	061b      	lsls	r3, r3, #24
 8007e22:	431a      	orrs	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	071b      	lsls	r3, r3, #28
 8007e2a:	4917      	ldr	r1, [pc, #92]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007e32:	4b15      	ldr	r3, [pc, #84]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e40:	4911      	ldr	r1, [pc, #68]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007e48:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a0e      	ldr	r2, [pc, #56]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e54:	f7fa ffb0 	bl	8002db8 <HAL_GetTick>
 8007e58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e5a:	e008      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e5c:	f7fa ffac 	bl	8002db8 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b64      	cmp	r3, #100	; 0x64
 8007e68:	d901      	bls.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e007      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e6e:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e7a:	d1ef      	bne.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3720      	adds	r7, #32
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	40023800 	.word	0x40023800

08007e8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b087      	sub	sp, #28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007e94:	2300      	movs	r3, #0
 8007e96:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007eaa:	f040 808c 	bne.w	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007eae:	4b95      	ldr	r3, [pc, #596]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eb4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007ebc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ec4:	d07c      	beq.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ecc:	d87d      	bhi.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d004      	beq.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eda:	d039      	beq.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007edc:	e075      	b.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007ede:	4b89      	ldr	r3, [pc, #548]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d108      	bne.n	8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007eea:	4b86      	ldr	r3, [pc, #536]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ef2:	4a85      	ldr	r2, [pc, #532]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef8:	613b      	str	r3, [r7, #16]
 8007efa:	e007      	b.n	8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007efc:	4b81      	ldr	r3, [pc, #516]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f04:	4a81      	ldr	r2, [pc, #516]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007f0c:	4b7d      	ldr	r3, [pc, #500]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f12:	0e1b      	lsrs	r3, r3, #24
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007f1a:	4b7a      	ldr	r3, [pc, #488]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f20:	099b      	lsrs	r3, r3, #6
 8007f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	fb03 f202 	mul.w	r2, r3, r2
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f32:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007f34:	4b73      	ldr	r3, [pc, #460]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f3a:	0a1b      	lsrs	r3, r3, #8
 8007f3c:	f003 031f 	and.w	r3, r3, #31
 8007f40:	3301      	adds	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4c:	617b      	str	r3, [r7, #20]
        break;
 8007f4e:	e03d      	b.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007f50:	4b6c      	ldr	r3, [pc, #432]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d108      	bne.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f5c:	4b69      	ldr	r3, [pc, #420]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f64:	4a68      	ldr	r2, [pc, #416]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6a:	613b      	str	r3, [r7, #16]
 8007f6c:	e007      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f6e:	4b65      	ldr	r3, [pc, #404]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f76:	4a65      	ldr	r2, [pc, #404]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f7c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007f7e:	4b61      	ldr	r3, [pc, #388]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f84:	0e1b      	lsrs	r3, r3, #24
 8007f86:	f003 030f 	and.w	r3, r3, #15
 8007f8a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007f8c:	4b5d      	ldr	r3, [pc, #372]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f92:	099b      	lsrs	r3, r3, #6
 8007f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	fb03 f202 	mul.w	r2, r3, r2
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007fa6:	4b57      	ldr	r3, [pc, #348]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fac:	f003 031f 	and.w	r3, r3, #31
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbc:	617b      	str	r3, [r7, #20]
        break;
 8007fbe:	e005      	b.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fc0:	4b53      	ldr	r3, [pc, #332]	; (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007fc2:	617b      	str	r3, [r7, #20]
        break;
 8007fc4:	e002      	b.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8007fc6:	bf00      	nop
 8007fc8:	e000      	b.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8007fca:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fd2:	f040 808c 	bne.w	80080ee <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007fd6:	4b4b      	ldr	r3, [pc, #300]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fdc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007fe4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fec:	d07c      	beq.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ff4:	d87d      	bhi.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d004      	beq.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008002:	d039      	beq.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008004:	e075      	b.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008006:	4b3f      	ldr	r3, [pc, #252]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d108      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008012:	4b3c      	ldr	r3, [pc, #240]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800801a:	4a3b      	ldr	r2, [pc, #236]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800801c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008020:	613b      	str	r3, [r7, #16]
 8008022:	e007      	b.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008024:	4b37      	ldr	r3, [pc, #220]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800802c:	4a37      	ldr	r2, [pc, #220]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800802e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008032:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008034:	4b33      	ldr	r3, [pc, #204]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800803a:	0e1b      	lsrs	r3, r3, #24
 800803c:	f003 030f 	and.w	r3, r3, #15
 8008040:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8008042:	4b30      	ldr	r3, [pc, #192]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008048:	099b      	lsrs	r3, r3, #6
 800804a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	fb03 f202 	mul.w	r2, r3, r2
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	fbb2 f3f3 	udiv	r3, r2, r3
 800805a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800805c:	4b29      	ldr	r3, [pc, #164]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800805e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008062:	0a1b      	lsrs	r3, r3, #8
 8008064:	f003 031f 	and.w	r3, r3, #31
 8008068:	3301      	adds	r3, #1
 800806a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	fbb2 f3f3 	udiv	r3, r2, r3
 8008074:	617b      	str	r3, [r7, #20]
        break;
 8008076:	e03d      	b.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008078:	4b22      	ldr	r3, [pc, #136]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d108      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008084:	4b1f      	ldr	r3, [pc, #124]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800808c:	4a1e      	ldr	r2, [pc, #120]	; (8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800808e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008092:	613b      	str	r3, [r7, #16]
 8008094:	e007      	b.n	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008096:	4b1b      	ldr	r3, [pc, #108]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800809e:	4a1b      	ldr	r2, [pc, #108]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80080a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80080a6:	4b17      	ldr	r3, [pc, #92]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ac:	0e1b      	lsrs	r3, r3, #24
 80080ae:	f003 030f 	and.w	r3, r3, #15
 80080b2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80080b4:	4b13      	ldr	r3, [pc, #76]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ba:	099b      	lsrs	r3, r3, #6
 80080bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	fb03 f202 	mul.w	r2, r3, r2
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080cc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80080ce:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80080d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d4:	f003 031f 	and.w	r3, r3, #31
 80080d8:	3301      	adds	r3, #1
 80080da:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80080dc:	697a      	ldr	r2, [r7, #20]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e4:	617b      	str	r3, [r7, #20]
        break;
 80080e6:	e005      	b.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 80080e8:	4b09      	ldr	r3, [pc, #36]	; (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80080ea:	617b      	str	r3, [r7, #20]
        break;
 80080ec:	e002      	b.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 80080ee:	bf00      	nop
 80080f0:	e000      	b.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 80080f2:	bf00      	nop

  return frequency;
 80080f4:	697b      	ldr	r3, [r7, #20]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	40023800 	.word	0x40023800
 8008108:	00f42400 	.word	0x00f42400
 800810c:	017d7840 	.word	0x017d7840
 8008110:	00bb8000 	.word	0x00bb8000

08008114 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e081      	b.n	800822a <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	7f5b      	ldrb	r3, [r3, #29]
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d105      	bne.n	800813c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7fa f898 	bl	800226c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	22ca      	movs	r2, #202	; 0xca
 8008148:	625a      	str	r2, [r3, #36]	; 0x24
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2253      	movs	r2, #83	; 0x53
 8008150:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fb16 	bl	8008784 <RTC_EnterInitMode>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d008      	beq.n	8008170 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	22ff      	movs	r2, #255	; 0xff
 8008164:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2204      	movs	r2, #4
 800816a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e05c      	b.n	800822a <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	6899      	ldr	r1, [r3, #8]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	4b2e      	ldr	r3, [pc, #184]	; (8008234 <HAL_RTC_Init+0x120>)
 800817c:	400b      	ands	r3, r1
 800817e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6899      	ldr	r1, [r3, #8]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	431a      	orrs	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	68d2      	ldr	r2, [r2, #12]
 80081a6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6919      	ldr	r1, [r3, #16]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	041a      	lsls	r2, r3, #16
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081ca:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f003 0320 	and.w	r3, r3, #32
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10e      	bne.n	80081f8 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 faaa 	bl	8008734 <HAL_RTC_WaitForSynchro>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d008      	beq.n	80081f8 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	22ff      	movs	r2, #255	; 0xff
 80081ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2204      	movs	r2, #4
 80081f2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e018      	b.n	800822a <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f022 0208 	bic.w	r2, r2, #8
 8008206:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	430a      	orrs	r2, r1
 8008218:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	22ff      	movs	r2, #255	; 0xff
 8008220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008228:	2300      	movs	r3, #0
  }
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	ff8fffbf 	.word	0xff8fffbf

08008238 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008238:	b590      	push	{r4, r7, lr}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	7f1b      	ldrb	r3, [r3, #28]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d101      	bne.n	8008254 <HAL_RTC_SetTime+0x1c>
 8008250:	2302      	movs	r3, #2
 8008252:	e0a8      	b.n	80083a6 <HAL_RTC_SetTime+0x16e>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2201      	movs	r2, #1
 8008258:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2202      	movs	r2, #2
 800825e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d126      	bne.n	80082b4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d102      	bne.n	800827a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2200      	movs	r2, #0
 8008278:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f000 faac 	bl	80087dc <RTC_ByteToBcd2>
 8008284:	4603      	mov	r3, r0
 8008286:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	785b      	ldrb	r3, [r3, #1]
 800828c:	4618      	mov	r0, r3
 800828e:	f000 faa5 	bl	80087dc <RTC_ByteToBcd2>
 8008292:	4603      	mov	r3, r0
 8008294:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008296:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	789b      	ldrb	r3, [r3, #2]
 800829c:	4618      	mov	r0, r3
 800829e:	f000 fa9d 	bl	80087dc <RTC_ByteToBcd2>
 80082a2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80082a4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	7b1b      	ldrb	r3, [r3, #12]
 80082ac:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80082ae:	4313      	orrs	r3, r2
 80082b0:	617b      	str	r3, [r7, #20]
 80082b2:	e018      	b.n	80082e6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d102      	bne.n	80082c8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2200      	movs	r2, #0
 80082c6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	785b      	ldrb	r3, [r3, #1]
 80082d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082d4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80082da:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	7b1b      	ldrb	r3, [r3, #12]
 80082e0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082e2:	4313      	orrs	r3, r2
 80082e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	22ca      	movs	r2, #202	; 0xca
 80082ec:	625a      	str	r2, [r3, #36]	; 0x24
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2253      	movs	r2, #83	; 0x53
 80082f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 fa44 	bl	8008784 <RTC_EnterInitMode>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	22ff      	movs	r2, #255	; 0xff
 8008308:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2204      	movs	r2, #4
 800830e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e045      	b.n	80083a6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	6979      	ldr	r1, [r7, #20]
 8008320:	4b23      	ldr	r3, [pc, #140]	; (80083b0 <HAL_RTC_SetTime+0x178>)
 8008322:	400b      	ands	r3, r1
 8008324:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008334:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6899      	ldr	r1, [r3, #8]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	691a      	ldr	r2, [r3, #16]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	695b      	ldr	r3, [r3, #20]
 8008344:	431a      	orrs	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	430a      	orrs	r2, r1
 800834c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68da      	ldr	r2, [r3, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800835c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f003 0320 	and.w	r3, r3, #32
 8008368:	2b00      	cmp	r3, #0
 800836a:	d111      	bne.n	8008390 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 f9e1 	bl	8008734 <HAL_RTC_WaitForSynchro>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00b      	beq.n	8008390 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	22ff      	movs	r2, #255	; 0xff
 800837e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2204      	movs	r2, #4
 8008384:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e00a      	b.n	80083a6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	22ff      	movs	r2, #255	; 0xff
 8008396:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80083a4:	2300      	movs	r3, #0
  }
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd90      	pop	{r4, r7, pc}
 80083ae:	bf00      	nop
 80083b0:	007f7f7f 	.word	0x007f7f7f

080083b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80083b4:	b590      	push	{r4, r7, lr}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	7f1b      	ldrb	r3, [r3, #28]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d101      	bne.n	80083d0 <HAL_RTC_SetDate+0x1c>
 80083cc:	2302      	movs	r3, #2
 80083ce:	e092      	b.n	80084f6 <HAL_RTC_SetDate+0x142>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2202      	movs	r2, #2
 80083da:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10e      	bne.n	8008400 <HAL_RTC_SetDate+0x4c>
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	785b      	ldrb	r3, [r3, #1]
 80083e6:	f003 0310 	and.w	r3, r3, #16
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d008      	beq.n	8008400 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	f023 0310 	bic.w	r3, r3, #16
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	330a      	adds	r3, #10
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d11c      	bne.n	8008440 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	78db      	ldrb	r3, [r3, #3]
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f9e6 	bl	80087dc <RTC_ByteToBcd2>
 8008410:	4603      	mov	r3, r0
 8008412:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	785b      	ldrb	r3, [r3, #1]
 8008418:	4618      	mov	r0, r3
 800841a:	f000 f9df 	bl	80087dc <RTC_ByteToBcd2>
 800841e:	4603      	mov	r3, r0
 8008420:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008422:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	789b      	ldrb	r3, [r3, #2]
 8008428:	4618      	mov	r0, r3
 800842a:	f000 f9d7 	bl	80087dc <RTC_ByteToBcd2>
 800842e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008430:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800843a:	4313      	orrs	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	e00e      	b.n	800845e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	78db      	ldrb	r3, [r3, #3]
 8008444:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800844c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008452:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800845a:	4313      	orrs	r3, r2
 800845c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	22ca      	movs	r2, #202	; 0xca
 8008464:	625a      	str	r2, [r3, #36]	; 0x24
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2253      	movs	r2, #83	; 0x53
 800846c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 f988 	bl	8008784 <RTC_EnterInitMode>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00b      	beq.n	8008492 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	22ff      	movs	r2, #255	; 0xff
 8008480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2204      	movs	r2, #4
 8008486:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e031      	b.n	80084f6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	6979      	ldr	r1, [r7, #20]
 8008498:	4b19      	ldr	r3, [pc, #100]	; (8008500 <HAL_RTC_SetDate+0x14c>)
 800849a:	400b      	ands	r3, r1
 800849c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d111      	bne.n	80084e0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 f939 	bl	8008734 <HAL_RTC_WaitForSynchro>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	22ff      	movs	r2, #255	; 0xff
 80084ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2204      	movs	r2, #4
 80084d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e00a      	b.n	80084f6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	22ff      	movs	r2, #255	; 0xff
 80084e6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2201      	movs	r2, #1
 80084ec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80084f4:	2300      	movs	r3, #0
  }
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd90      	pop	{r4, r7, pc}
 80084fe:	bf00      	nop
 8008500:	00ffff3f 	.word	0x00ffff3f

08008504 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008504:	b590      	push	{r4, r7, lr}
 8008506:	b089      	sub	sp, #36	; 0x24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	61fb      	str	r3, [r7, #28]
 8008518:	2300      	movs	r3, #0
 800851a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	7f1b      	ldrb	r3, [r3, #28]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_RTC_SetAlarm+0x24>
 8008524:	2302      	movs	r3, #2
 8008526:	e101      	b.n	800872c <HAL_RTC_SetAlarm+0x228>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2201      	movs	r2, #1
 800852c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2202      	movs	r2, #2
 8008532:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d137      	bne.n	80085aa <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008544:	2b00      	cmp	r3, #0
 8008546:	d102      	bne.n	800854e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2200      	movs	r2, #0
 800854c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	4618      	mov	r0, r3
 8008554:	f000 f942 	bl	80087dc <RTC_ByteToBcd2>
 8008558:	4603      	mov	r3, r0
 800855a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	785b      	ldrb	r3, [r3, #1]
 8008560:	4618      	mov	r0, r3
 8008562:	f000 f93b 	bl	80087dc <RTC_ByteToBcd2>
 8008566:	4603      	mov	r3, r0
 8008568:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800856a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	789b      	ldrb	r3, [r3, #2]
 8008570:	4618      	mov	r0, r3
 8008572:	f000 f933 	bl	80087dc <RTC_ByteToBcd2>
 8008576:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008578:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	7b1b      	ldrb	r3, [r3, #12]
 8008580:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008582:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800858c:	4618      	mov	r0, r3
 800858e:	f000 f925 	bl	80087dc <RTC_ByteToBcd2>
 8008592:	4603      	mov	r3, r0
 8008594:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008596:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800859e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80085a4:	4313      	orrs	r3, r2
 80085a6:	61fb      	str	r3, [r7, #28]
 80085a8:	e023      	b.n	80085f2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d102      	bne.n	80085be <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	2200      	movs	r2, #0
 80085bc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80085ca:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80085d0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	7b1b      	ldrb	r3, [r3, #12]
 80085d6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80085d8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80085e2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80085e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80085ee:	4313      	orrs	r3, r2
 80085f0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	22ca      	movs	r2, #202	; 0xca
 8008604:	625a      	str	r2, [r3, #36]	; 0x24
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2253      	movs	r2, #83	; 0x53
 800860c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008616:	d13f      	bne.n	8008698 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008626:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689a      	ldr	r2, [r3, #8]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008636:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008638:	f7fa fbbe 	bl	8002db8 <HAL_GetTick>
 800863c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800863e:	e013      	b.n	8008668 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008640:	f7fa fbba 	bl	8002db8 <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800864e:	d90b      	bls.n	8008668 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	22ff      	movs	r2, #255	; 0xff
 8008656:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2203      	movs	r2, #3
 800865c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e061      	b.n	800872c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d0e4      	beq.n	8008640 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008694:	609a      	str	r2, [r3, #8]
 8008696:	e03e      	b.n	8008716 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689a      	ldr	r2, [r3, #8]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80086a6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689a      	ldr	r2, [r3, #8]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086b6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086b8:	f7fa fb7e 	bl	8002db8 <HAL_GetTick>
 80086bc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80086be:	e013      	b.n	80086e8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80086c0:	f7fa fb7a 	bl	8002db8 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086ce:	d90b      	bls.n	80086e8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	22ff      	movs	r2, #255	; 0xff
 80086d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2203      	movs	r2, #3
 80086dc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e021      	b.n	800872c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d0e4      	beq.n	80086c0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69fa      	ldr	r2, [r7, #28]
 80086fc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	697a      	ldr	r2, [r7, #20]
 8008704:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008714:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	22ff      	movs	r2, #255	; 0xff
 800871c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2201      	movs	r2, #1
 8008722:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3724      	adds	r7, #36	; 0x24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd90      	pop	{r4, r7, pc}

08008734 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800874e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008750:	f7fa fb32 	bl	8002db8 <HAL_GetTick>
 8008754:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008756:	e009      	b.n	800876c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008758:	f7fa fb2e 	bl	8002db8 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008766:	d901      	bls.n	800876c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e007      	b.n	800877c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f003 0320 	and.w	r3, r3, #32
 8008776:	2b00      	cmp	r3, #0
 8008778:	d0ee      	beq.n	8008758 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879a:	2b00      	cmp	r3, #0
 800879c:	d119      	bne.n	80087d2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f04f 32ff 	mov.w	r2, #4294967295
 80087a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087a8:	f7fa fb06 	bl	8002db8 <HAL_GetTick>
 80087ac:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80087ae:	e009      	b.n	80087c4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80087b0:	f7fa fb02 	bl	8002db8 <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087be:	d901      	bls.n	80087c4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e007      	b.n	80087d4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0ee      	beq.n	80087b0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80087ea:	e005      	b.n	80087f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	3b0a      	subs	r3, #10
 80087f6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	2b09      	cmp	r3, #9
 80087fc:	d8f6      	bhi.n	80087ec <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	b2db      	uxtb	r3, r3
 8008802:	011b      	lsls	r3, r3, #4
 8008804:	b2da      	uxtb	r2, r3
 8008806:	79fb      	ldrb	r3, [r7, #7]
 8008808:	4313      	orrs	r3, r2
 800880a:	b2db      	uxtb	r3, r3
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008824:	2300      	movs	r3, #0
 8008826:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	7f1b      	ldrb	r3, [r3, #28]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d101      	bne.n	8008834 <HAL_RTCEx_SetTimeStamp+0x1c>
 8008830:	2302      	movs	r3, #2
 8008832:	e03e      	b.n	80088b2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2202      	movs	r2, #2
 800883e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689a      	ldr	r2, [r3, #8]
 8008846:	4b1e      	ldr	r3, [pc, #120]	; (80088c0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008848:	4013      	ands	r3, r2
 800884a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	4313      	orrs	r3, r2
 8008852:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	22ca      	movs	r2, #202	; 0xca
 800885a:	625a      	str	r2, [r3, #36]	; 0x24
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2253      	movs	r2, #83	; 0x53
 8008862:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0206 	bic.w	r2, r2, #6
 8008872:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	430a      	orrs	r2, r1
 8008882:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	689a      	ldr	r2, [r3, #8]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800889a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	22ff      	movs	r2, #255	; 0xff
 80088a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2201      	movs	r2, #1
 80088a8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	fffff7f7 	.word	0xfffff7f7

080088c4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e156      	b.n	8008b90 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d106      	bne.n	80088fc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7fa f8cc 	bl	8002a94 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2202      	movs	r2, #2
 8008900:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f95b 	bl	8008bc0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	2b02      	cmp	r3, #2
 8008910:	d00c      	beq.n	800892c <HAL_SAI_Init+0x68>
 8008912:	2b02      	cmp	r3, #2
 8008914:	d80d      	bhi.n	8008932 <HAL_SAI_Init+0x6e>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <HAL_SAI_Init+0x5c>
 800891a:	2b01      	cmp	r3, #1
 800891c:	d003      	beq.n	8008926 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800891e:	e008      	b.n	8008932 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	61fb      	str	r3, [r7, #28]
      break;
 8008924:	e006      	b.n	8008934 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008926:	2310      	movs	r3, #16
 8008928:	61fb      	str	r3, [r7, #28]
      break;
 800892a:	e003      	b.n	8008934 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800892c:	2320      	movs	r3, #32
 800892e:	61fb      	str	r3, [r7, #28]
      break;
 8008930:	e000      	b.n	8008934 <HAL_SAI_Init+0x70>
      break;
 8008932:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	2b03      	cmp	r3, #3
 800893a:	d81e      	bhi.n	800897a <HAL_SAI_Init+0xb6>
 800893c:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <HAL_SAI_Init+0x80>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	08008955 	.word	0x08008955
 8008948:	0800895b 	.word	0x0800895b
 800894c:	08008963 	.word	0x08008963
 8008950:	0800896b 	.word	0x0800896b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	617b      	str	r3, [r7, #20]
    }
    break;
 8008958:	e010      	b.n	800897c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800895a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800895e:	617b      	str	r3, [r7, #20]
    }
    break;
 8008960:	e00c      	b.n	800897c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008966:	617b      	str	r3, [r7, #20]
    }
    break;
 8008968:	e008      	b.n	800897c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800896a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800896e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	f043 0301 	orr.w	r3, r3, #1
 8008976:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008978:	e000      	b.n	800897c <HAL_SAI_Init+0xb8>
    default:
      break;
 800897a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a85      	ldr	r2, [pc, #532]	; (8008b98 <HAL_SAI_Init+0x2d4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d004      	beq.n	8008990 <HAL_SAI_Init+0xcc>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a84      	ldr	r2, [pc, #528]	; (8008b9c <HAL_SAI_Init+0x2d8>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d103      	bne.n	8008998 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8008990:	4a83      	ldr	r2, [pc, #524]	; (8008ba0 <HAL_SAI_Init+0x2dc>)
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	e002      	b.n	800899e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008998:	4a82      	ldr	r2, [pc, #520]	; (8008ba4 <HAL_SAI_Init+0x2e0>)
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d04c      	beq.n	8008a40 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a7a      	ldr	r2, [pc, #488]	; (8008b98 <HAL_SAI_Init+0x2d4>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d004      	beq.n	80089be <HAL_SAI_Init+0xfa>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a78      	ldr	r2, [pc, #480]	; (8008b9c <HAL_SAI_Init+0x2d8>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d104      	bne.n	80089c8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80089be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80089c2:	f7ff fa63 	bl	8007e8c <HAL_RCCEx_GetPeriphCLKFreq>
 80089c6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a76      	ldr	r2, [pc, #472]	; (8008ba8 <HAL_SAI_Init+0x2e4>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d004      	beq.n	80089dc <HAL_SAI_Init+0x118>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a75      	ldr	r2, [pc, #468]	; (8008bac <HAL_SAI_Init+0x2e8>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d104      	bne.n	80089e6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80089dc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80089e0:	f7ff fa54 	bl	8007e8c <HAL_RCCEx_GetPeriphCLKFreq>
 80089e4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4613      	mov	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	461a      	mov	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	025b      	lsls	r3, r3, #9
 80089f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089fc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4a6b      	ldr	r2, [pc, #428]	; (8008bb0 <HAL_SAI_Init+0x2ec>)
 8008a02:	fba2 2303 	umull	r2, r3, r2, r3
 8008a06:	08da      	lsrs	r2, r3, #3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008a0c:	68f9      	ldr	r1, [r7, #12]
 8008a0e:	4b68      	ldr	r3, [pc, #416]	; (8008bb0 <HAL_SAI_Init+0x2ec>)
 8008a10:	fba3 2301 	umull	r2, r3, r3, r1
 8008a14:	08da      	lsrs	r2, r3, #3
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	005b      	lsls	r3, r3, #1
 8008a1e:	1aca      	subs	r2, r1, r3
 8008a20:	2a08      	cmp	r2, #8
 8008a22:	d904      	bls.n	8008a2e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	1c5a      	adds	r2, r3, #1
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a32:	2b04      	cmp	r3, #4
 8008a34:	d104      	bne.n	8008a40 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	085a      	lsrs	r2, r3, #1
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_SAI_Init+0x18c>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d109      	bne.n	8008a64 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d101      	bne.n	8008a5c <HAL_SAI_Init+0x198>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	e001      	b.n	8008a60 <HAL_SAI_Init+0x19c>
 8008a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a60:	61bb      	str	r3, [r7, #24]
 8008a62:	e008      	b.n	8008a76 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d102      	bne.n	8008a72 <HAL_SAI_Init+0x1ae>
 8008a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a70:	e000      	b.n	8008a74 <HAL_SAI_Init+0x1b0>
 8008a72:	2300      	movs	r3, #0
 8008a74:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6819      	ldr	r1, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	4b4c      	ldr	r3, [pc, #304]	; (8008bb4 <HAL_SAI_Init+0x2f0>)
 8008a82:	400b      	ands	r3, r1
 8008a84:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6819      	ldr	r1, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685a      	ldr	r2, [r3, #4]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a94:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008a9a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8008aae:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008aba:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	051b      	lsls	r3, r3, #20
 8008ac2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6859      	ldr	r1, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	4b38      	ldr	r3, [pc, #224]	; (8008bb8 <HAL_SAI_Init+0x2f4>)
 8008ad8:	400b      	ands	r3, r1
 8008ada:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6859      	ldr	r1, [r3, #4]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	699a      	ldr	r2, [r3, #24]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aea:	431a      	orrs	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af0:	431a      	orrs	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	430a      	orrs	r2, r1
 8008af8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6899      	ldr	r1, [r3, #8]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	4b2d      	ldr	r3, [pc, #180]	; (8008bbc <HAL_SAI_Init+0x2f8>)
 8008b06:	400b      	ands	r3, r1
 8008b08:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6899      	ldr	r1, [r3, #8]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008b1a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008b20:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8008b26:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008b30:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68d9      	ldr	r1, [r3, #12]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008b48:	400b      	ands	r3, r1
 8008b4a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68d9      	ldr	r1, [r3, #12]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b60:	041b      	lsls	r3, r3, #16
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	021b      	lsls	r3, r3, #8
 8008b6c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3720      	adds	r7, #32
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	40015804 	.word	0x40015804
 8008b9c:	40015824 	.word	0x40015824
 8008ba0:	40015800 	.word	0x40015800
 8008ba4:	40015c00 	.word	0x40015c00
 8008ba8:	40015c04 	.word	0x40015c04
 8008bac:	40015c24 	.word	0x40015c24
 8008bb0:	cccccccd 	.word	0xcccccccd
 8008bb4:	ff05c010 	.word	0xff05c010
 8008bb8:	ffff1ff0 	.word	0xffff1ff0
 8008bbc:	fff88000 	.word	0xfff88000

08008bc0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008bc8:	4b17      	ldr	r3, [pc, #92]	; (8008c28 <SAI_Disable+0x68>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a17      	ldr	r2, [pc, #92]	; (8008c2c <SAI_Disable+0x6c>)
 8008bce:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd2:	0b1b      	lsrs	r3, r3, #12
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008bea:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	1e5a      	subs	r2, r3, #1
 8008bf0:	60fa      	str	r2, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10a      	bne.n	8008c0c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	72fb      	strb	r3, [r7, #11]
      break;
 8008c0a:	e006      	b.n	8008c1a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1e8      	bne.n	8008bec <SAI_Disable+0x2c>

  return status;
 8008c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	20000000 	.word	0x20000000
 8008c2c:	95cbec1b 	.word	0x95cbec1b

08008c30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d101      	bne.n	8008c42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e022      	b.n	8008c88 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d105      	bne.n	8008c5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7f9 fb37 	bl	80022c8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2203      	movs	r2, #3
 8008c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f814 	bl	8008c90 <HAL_SD_InitCard>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e00a      	b.n	8008c88 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c90:	b5b0      	push	{r4, r5, r7, lr}
 8008c92:	b08e      	sub	sp, #56	; 0x38
 8008c94:	af04      	add	r7, sp, #16
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008cac:	2376      	movs	r3, #118	; 0x76
 8008cae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681d      	ldr	r5, [r3, #0]
 8008cb4:	466c      	mov	r4, sp
 8008cb6:	f107 0314 	add.w	r3, r7, #20
 8008cba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008cbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008cc2:	f107 0308 	add.w	r3, r7, #8
 8008cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f002 ffad 	bl	800bc28 <SDMMC_Init>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e059      	b.n	8008d94 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cee:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f002 ffd0 	bl	800bc9a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d08:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008d0a:	2002      	movs	r0, #2
 8008d0c:	f7fa f860 	bl	8002dd0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 fe0f 	bl	8009934 <SD_PowerON>
 8008d16:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00b      	beq.n	8008d36 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d2a:	6a3b      	ldr	r3, [r7, #32]
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e02e      	b.n	8008d94 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fd2e 	bl	8009798 <SD_InitCard>
 8008d3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00b      	beq.n	8008d5c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	431a      	orrs	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e01b      	b.n	8008d94 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d64:	4618      	mov	r0, r3
 8008d66:	f003 f82b 	bl	800bdc0 <SDMMC_CmdBlockLength>
 8008d6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00f      	beq.n	8008d92 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a09      	ldr	r2, [pc, #36]	; (8008d9c <HAL_SD_InitCard+0x10c>)
 8008d78:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	431a      	orrs	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e000      	b.n	8008d94 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3728      	adds	r7, #40	; 0x28
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8008d9c:	004005ff 	.word	0x004005ff

08008da0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08c      	sub	sp, #48	; 0x30
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d107      	bne.n	8008dc8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e0c3      	b.n	8008f50 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	f040 80bc 	bne.w	8008f4e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	441a      	add	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d907      	bls.n	8008dfa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e0aa      	b.n	8008f50 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2203      	movs	r2, #3
 8008dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2200      	movs	r2, #0
 8008e08:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008e18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1e:	4a4e      	ldr	r2, [pc, #312]	; (8008f58 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008e20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e26:	4a4d      	ldr	r2, [pc, #308]	; (8008f5c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008e28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	2200      	movs	r2, #0
 8008e30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e36:	2200      	movs	r2, #0
 8008e38:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	3380      	adds	r3, #128	; 0x80
 8008e60:	4619      	mov	r1, r3
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	025b      	lsls	r3, r3, #9
 8008e68:	089b      	lsrs	r3, r3, #2
 8008e6a:	f7fa fcaf 	bl	80037cc <HAL_DMA_Start_IT>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d017      	beq.n	8008ea4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008e82:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a35      	ldr	r2, [pc, #212]	; (8008f60 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e055      	b.n	8008f50 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f042 0208 	orr.w	r2, r2, #8
 8008eb2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d002      	beq.n	8008ec2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	025b      	lsls	r3, r3, #9
 8008ec0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	025b      	lsls	r3, r3, #9
 8008ecc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008ece:	2390      	movs	r3, #144	; 0x90
 8008ed0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008eda:	2301      	movs	r3, #1
 8008edc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f107 0210 	add.w	r2, r7, #16
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f002 ff3d 	bl	800bd68 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d90a      	bls.n	8008f0a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2282      	movs	r2, #130	; 0x82
 8008ef8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f00:	4618      	mov	r0, r3
 8008f02:	f002 ffa1 	bl	800be48 <SDMMC_CmdReadMultiBlock>
 8008f06:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008f08:	e009      	b.n	8008f1e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2281      	movs	r2, #129	; 0x81
 8008f0e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f16:	4618      	mov	r0, r3
 8008f18:	f002 ff74 	bl	800be04 <SDMMC_CmdReadSingleBlock>
 8008f1c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d012      	beq.n	8008f4a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a0d      	ldr	r2, [pc, #52]	; (8008f60 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f32:	431a      	orrs	r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e002      	b.n	8008f50 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	e000      	b.n	8008f50 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008f4e:	2302      	movs	r3, #2
  }
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3730      	adds	r7, #48	; 0x30
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	08009683 	.word	0x08009683
 8008f5c:	080096f5 	.word	0x080096f5
 8008f60:	004005ff 	.word	0x004005ff

08008f64 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b08c      	sub	sp, #48	; 0x30
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d107      	bne.n	8008f8c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f80:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e0c6      	b.n	800911a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	f040 80bf 	bne.w	8009118 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	441a      	add	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d907      	bls.n	8008fbe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e0ad      	b.n	800911a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2203      	movs	r2, #3
 8008fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f042 021a 	orr.w	r2, r2, #26
 8008fdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe2:	4a50      	ldr	r2, [pc, #320]	; (8009124 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fea:	4a4f      	ldr	r2, [pc, #316]	; (8009128 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008fec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d002      	beq.n	8009004 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009000:	025b      	lsls	r3, r3, #9
 8009002:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d90a      	bls.n	8009020 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	22a0      	movs	r2, #160	; 0xa0
 800900e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009016:	4618      	mov	r0, r3
 8009018:	f002 ff5a 	bl	800bed0 <SDMMC_CmdWriteMultiBlock>
 800901c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800901e:	e009      	b.n	8009034 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2290      	movs	r2, #144	; 0x90
 8009024:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800902c:	4618      	mov	r0, r3
 800902e:	f002 ff2d 	bl	800be8c <SDMMC_CmdWriteSingleBlock>
 8009032:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d012      	beq.n	8009060 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a3b      	ldr	r2, [pc, #236]	; (800912c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009040:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	431a      	orrs	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e05c      	b.n	800911a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0208 	orr.w	r2, r2, #8
 800906e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009074:	2240      	movs	r2, #64	; 0x40
 8009076:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	430a      	orrs	r2, r1
 8009092:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009098:	68b9      	ldr	r1, [r7, #8]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3380      	adds	r3, #128	; 0x80
 80090a0:	461a      	mov	r2, r3
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	025b      	lsls	r3, r3, #9
 80090a6:	089b      	lsrs	r3, r3, #2
 80090a8:	f7fa fb90 	bl	80037cc <HAL_DMA_Start_IT>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d01a      	beq.n	80090e8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 021a 	bic.w	r2, r2, #26
 80090c0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a19      	ldr	r2, [pc, #100]	; (800912c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80090c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e018      	b.n	800911a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090e8:	f04f 33ff 	mov.w	r3, #4294967295
 80090ec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	025b      	lsls	r3, r3, #9
 80090f2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80090f4:	2390      	movs	r3, #144	; 0x90
 80090f6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80090f8:	2300      	movs	r3, #0
 80090fa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009100:	2301      	movs	r3, #1
 8009102:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f107 0210 	add.w	r2, r7, #16
 800910c:	4611      	mov	r1, r2
 800910e:	4618      	mov	r0, r3
 8009110:	f002 fe2a 	bl	800bd68 <SDMMC_ConfigData>

      return HAL_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	e000      	b.n	800911a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009118:	2302      	movs	r3, #2
  }
}
 800911a:	4618      	mov	r0, r3
 800911c:	3730      	adds	r7, #48	; 0x30
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	08009659 	.word	0x08009659
 8009128:	080096f5 	.word	0x080096f5
 800912c:	004005ff 	.word	0x004005ff

08009130 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009152:	0f9b      	lsrs	r3, r3, #30
 8009154:	b2da      	uxtb	r2, r3
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800915e:	0e9b      	lsrs	r3, r3, #26
 8009160:	b2db      	uxtb	r3, r3
 8009162:	f003 030f 	and.w	r3, r3, #15
 8009166:	b2da      	uxtb	r2, r3
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009170:	0e1b      	lsrs	r3, r3, #24
 8009172:	b2db      	uxtb	r3, r3
 8009174:	f003 0303 	and.w	r3, r3, #3
 8009178:	b2da      	uxtb	r2, r3
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009182:	0c1b      	lsrs	r3, r3, #16
 8009184:	b2da      	uxtb	r2, r3
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800918e:	0a1b      	lsrs	r3, r3, #8
 8009190:	b2da      	uxtb	r2, r3
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800919a:	b2da      	uxtb	r2, r3
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091a4:	0d1b      	lsrs	r3, r3, #20
 80091a6:	b29a      	uxth	r2, r3
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091b0:	0c1b      	lsrs	r3, r3, #16
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 030f 	and.w	r3, r3, #15
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091c2:	0bdb      	lsrs	r3, r3, #15
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091d4:	0b9b      	lsrs	r3, r3, #14
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091e6:	0b5b      	lsrs	r3, r3, #13
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091f8:	0b1b      	lsrs	r3, r3, #12
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	b2da      	uxtb	r2, r3
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	2200      	movs	r2, #0
 800920a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009210:	2b00      	cmp	r3, #0
 8009212:	d163      	bne.n	80092dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009218:	009a      	lsls	r2, r3, #2
 800921a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800921e:	4013      	ands	r3, r2
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009224:	0f92      	lsrs	r2, r2, #30
 8009226:	431a      	orrs	r2, r3
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009230:	0edb      	lsrs	r3, r3, #27
 8009232:	b2db      	uxtb	r3, r3
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	b2da      	uxtb	r2, r3
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009242:	0e1b      	lsrs	r3, r3, #24
 8009244:	b2db      	uxtb	r3, r3
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	b2da      	uxtb	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009254:	0d5b      	lsrs	r3, r3, #21
 8009256:	b2db      	uxtb	r3, r3
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	b2da      	uxtb	r2, r3
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009266:	0c9b      	lsrs	r3, r3, #18
 8009268:	b2db      	uxtb	r3, r3
 800926a:	f003 0307 	and.w	r3, r3, #7
 800926e:	b2da      	uxtb	r2, r3
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009278:	0bdb      	lsrs	r3, r3, #15
 800927a:	b2db      	uxtb	r3, r3
 800927c:	f003 0307 	and.w	r3, r3, #7
 8009280:	b2da      	uxtb	r2, r3
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	1c5a      	adds	r2, r3, #1
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	7e1b      	ldrb	r3, [r3, #24]
 8009294:	b2db      	uxtb	r3, r3
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	3302      	adds	r3, #2
 800929c:	2201      	movs	r2, #1
 800929e:	fa02 f303 	lsl.w	r3, r2, r3
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80092a6:	fb03 f202 	mul.w	r2, r3, r2
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	7a1b      	ldrb	r3, [r3, #8]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f003 030f 	and.w	r3, r3, #15
 80092b8:	2201      	movs	r2, #1
 80092ba:	409a      	lsls	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80092c8:	0a52      	lsrs	r2, r2, #9
 80092ca:	fb03 f202 	mul.w	r2, r3, r2
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092d8:	661a      	str	r2, [r3, #96]	; 0x60
 80092da:	e031      	b.n	8009340 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d11d      	bne.n	8009320 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092e8:	041b      	lsls	r3, r3, #16
 80092ea:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092f2:	0c1b      	lsrs	r3, r3, #16
 80092f4:	431a      	orrs	r2, r3
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	3301      	adds	r3, #1
 8009300:	029a      	lsls	r2, r3, #10
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009314:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	661a      	str	r2, [r3, #96]	; 0x60
 800931e:	e00f      	b.n	8009340 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a58      	ldr	r2, [pc, #352]	; (8009488 <HAL_SD_GetCardCSD+0x344>)
 8009326:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e09d      	b.n	800947c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009344:	0b9b      	lsrs	r3, r3, #14
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	b2da      	uxtb	r2, r3
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009356:	09db      	lsrs	r3, r3, #7
 8009358:	b2db      	uxtb	r3, r3
 800935a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800935e:	b2da      	uxtb	r2, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800936e:	b2da      	uxtb	r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009378:	0fdb      	lsrs	r3, r3, #31
 800937a:	b2da      	uxtb	r2, r3
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009384:	0f5b      	lsrs	r3, r3, #29
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f003 0303 	and.w	r3, r3, #3
 800938c:	b2da      	uxtb	r2, r3
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009396:	0e9b      	lsrs	r3, r3, #26
 8009398:	b2db      	uxtb	r3, r3
 800939a:	f003 0307 	and.w	r3, r3, #7
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a8:	0d9b      	lsrs	r3, r3, #22
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	f003 030f 	and.w	r3, r3, #15
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ba:	0d5b      	lsrs	r3, r3, #21
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	b2da      	uxtb	r2, r3
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d6:	0c1b      	lsrs	r3, r3, #16
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ea:	0bdb      	lsrs	r3, r3, #15
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fe:	0b9b      	lsrs	r3, r3, #14
 8009400:	b2db      	uxtb	r3, r3
 8009402:	f003 0301 	and.w	r3, r3, #1
 8009406:	b2da      	uxtb	r2, r3
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009412:	0b5b      	lsrs	r3, r3, #13
 8009414:	b2db      	uxtb	r3, r3
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	b2da      	uxtb	r2, r3
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009426:	0b1b      	lsrs	r3, r3, #12
 8009428:	b2db      	uxtb	r3, r3
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	b2da      	uxtb	r2, r3
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800943a:	0a9b      	lsrs	r3, r3, #10
 800943c:	b2db      	uxtb	r3, r3
 800943e:	f003 0303 	and.w	r3, r3, #3
 8009442:	b2da      	uxtb	r2, r3
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944e:	0a1b      	lsrs	r3, r3, #8
 8009450:	b2db      	uxtb	r3, r3
 8009452:	f003 0303 	and.w	r3, r3, #3
 8009456:	b2da      	uxtb	r2, r3
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009462:	085b      	lsrs	r3, r3, #1
 8009464:	b2db      	uxtb	r3, r3
 8009466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800946a:	b2da      	uxtb	r2, r3
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	004005ff 	.word	0x004005ff

0800948c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80094e4:	b5b0      	push	{r4, r5, r7, lr}
 80094e6:	b08e      	sub	sp, #56	; 0x38
 80094e8:	af04      	add	r7, sp, #16
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2203      	movs	r2, #3
 80094f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009500:	2b03      	cmp	r3, #3
 8009502:	d02e      	beq.n	8009562 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800950a:	d106      	bne.n	800951a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009510:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	639a      	str	r2, [r3, #56]	; 0x38
 8009518:	e029      	b.n	800956e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009520:	d10a      	bne.n	8009538 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fabc 	bl	8009aa0 <SD_WideBus_Enable>
 8009528:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	431a      	orrs	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	639a      	str	r2, [r3, #56]	; 0x38
 8009536:	e01a      	b.n	800956e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d10a      	bne.n	8009554 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 faf9 	bl	8009b36 <SD_WideBus_Disable>
 8009544:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	431a      	orrs	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	639a      	str	r2, [r3, #56]	; 0x38
 8009552:	e00c      	b.n	800956e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009558:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	639a      	str	r2, [r3, #56]	; 0x38
 8009560:	e005      	b.n	800956e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009566:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a26      	ldr	r2, [pc, #152]	; (8009614 <HAL_SD_ConfigWideBusOperation+0x130>)
 800957c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800958c:	e01f      	b.n	80095ce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681d      	ldr	r5, [r3, #0]
 80095b4:	466c      	mov	r4, sp
 80095b6:	f107 0314 	add.w	r3, r7, #20
 80095ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80095be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80095c2:	f107 0308 	add.w	r3, r7, #8
 80095c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095c8:	4628      	mov	r0, r5
 80095ca:	f002 fb2d 	bl	800bc28 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80095d6:	4618      	mov	r0, r3
 80095d8:	f002 fbf2 	bl	800bdc0 <SDMMC_CmdBlockLength>
 80095dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00c      	beq.n	80095fe <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a0a      	ldr	r2, [pc, #40]	; (8009614 <HAL_SD_ConfigWideBusOperation+0x130>)
 80095ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800960a:	4618      	mov	r0, r3
 800960c:	3728      	adds	r7, #40	; 0x28
 800960e:	46bd      	mov	sp, r7
 8009610:	bdb0      	pop	{r4, r5, r7, pc}
 8009612:	bf00      	nop
 8009614:	004005ff 	.word	0x004005ff

08009618 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009620:	2300      	movs	r3, #0
 8009622:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009624:	f107 030c 	add.w	r3, r7, #12
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fa10 	bl	8009a50 <SD_SendStatus>
 8009630:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	431a      	orrs	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	0a5b      	lsrs	r3, r3, #9
 8009648:	f003 030f 	and.w	r3, r3, #15
 800964c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800964e:	693b      	ldr	r3, [r7, #16]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3718      	adds	r7, #24
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009674:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009676:	bf00      	nop
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009694:	2b82      	cmp	r3, #130	; 0x82
 8009696:	d111      	bne.n	80096bc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f002 fc39 	bl	800bf14 <SDMMC_CmdStopTransfer>
 80096a2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d008      	beq.n	80096bc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	431a      	orrs	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f7ff fd3a 	bl	8009130 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0208 	bic.w	r2, r2, #8
 80096ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80096d4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2201      	movs	r2, #1
 80096da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f004 f853 	bl	800d790 <HAL_SD_RxCpltCallback>
#endif
}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009700:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7fa f8c2 	bl	800388c <HAL_DMA_GetError>
 8009708:	4603      	mov	r3, r0
 800970a:	2b02      	cmp	r3, #2
 800970c:	d03e      	beq.n	800978c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009714:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d002      	beq.n	800972a <SD_DMAError+0x36>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d12d      	bne.n	8009786 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a19      	ldr	r2, [pc, #100]	; (8009794 <SD_DMAError+0xa0>)
 8009730:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009740:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009746:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800974e:	6978      	ldr	r0, [r7, #20]
 8009750:	f7ff ff62 	bl	8009618 <HAL_SD_GetCardState>
 8009754:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b06      	cmp	r3, #6
 800975a:	d002      	beq.n	8009762 <SD_DMAError+0x6e>
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2b05      	cmp	r3, #5
 8009760:	d10a      	bne.n	8009778 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4618      	mov	r0, r3
 8009768:	f002 fbd4 	bl	800bf14 <SDMMC_CmdStopTransfer>
 800976c:	4602      	mov	r2, r0
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009772:	431a      	orrs	r2, r3
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2200      	movs	r2, #0
 8009784:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009786:	6978      	ldr	r0, [r7, #20]
 8009788:	f7ff fcd2 	bl	8009130 <HAL_SD_ErrorCallback>
#endif
  }
}
 800978c:	bf00      	nop
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	004005ff 	.word	0x004005ff

08009798 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009798:	b5b0      	push	{r4, r5, r7, lr}
 800979a:	b094      	sub	sp, #80	; 0x50
 800979c:	af04      	add	r7, sp, #16
 800979e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80097a0:	2301      	movs	r3, #1
 80097a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f002 fa84 	bl	800bcb6 <SDMMC_GetPowerState>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d102      	bne.n	80097ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80097b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80097b8:	e0b8      	b.n	800992c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d02f      	beq.n	8009822 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f002 fcaf 	bl	800c12a <SDMMC_CmdSendCID>
 80097cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80097ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d001      	beq.n	80097d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80097d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d6:	e0a9      	b.n	800992c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2100      	movs	r1, #0
 80097de:	4618      	mov	r0, r3
 80097e0:	f002 faaf 	bl	800bd42 <SDMMC_GetResponse>
 80097e4:	4602      	mov	r2, r0
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2104      	movs	r1, #4
 80097f0:	4618      	mov	r0, r3
 80097f2:	f002 faa6 	bl	800bd42 <SDMMC_GetResponse>
 80097f6:	4602      	mov	r2, r0
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2108      	movs	r1, #8
 8009802:	4618      	mov	r0, r3
 8009804:	f002 fa9d 	bl	800bd42 <SDMMC_GetResponse>
 8009808:	4602      	mov	r2, r0
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	210c      	movs	r1, #12
 8009814:	4618      	mov	r0, r3
 8009816:	f002 fa94 	bl	800bd42 <SDMMC_GetResponse>
 800981a:	4602      	mov	r2, r0
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009826:	2b03      	cmp	r3, #3
 8009828:	d00d      	beq.n	8009846 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f107 020e 	add.w	r2, r7, #14
 8009832:	4611      	mov	r1, r2
 8009834:	4618      	mov	r0, r3
 8009836:	f002 fcb5 	bl	800c1a4 <SDMMC_CmdSetRelAdd>
 800983a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800983c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <SD_InitCard+0xae>
    {
      return errorstate;
 8009842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009844:	e072      	b.n	800992c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800984a:	2b03      	cmp	r3, #3
 800984c:	d036      	beq.n	80098bc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800984e:	89fb      	ldrh	r3, [r7, #14]
 8009850:	461a      	mov	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800985e:	041b      	lsls	r3, r3, #16
 8009860:	4619      	mov	r1, r3
 8009862:	4610      	mov	r0, r2
 8009864:	f002 fc7f 	bl	800c166 <SDMMC_CmdSendCSD>
 8009868:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800986a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009872:	e05b      	b.n	800992c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2100      	movs	r1, #0
 800987a:	4618      	mov	r0, r3
 800987c:	f002 fa61 	bl	800bd42 <SDMMC_GetResponse>
 8009880:	4602      	mov	r2, r0
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2104      	movs	r1, #4
 800988c:	4618      	mov	r0, r3
 800988e:	f002 fa58 	bl	800bd42 <SDMMC_GetResponse>
 8009892:	4602      	mov	r2, r0
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2108      	movs	r1, #8
 800989e:	4618      	mov	r0, r3
 80098a0:	f002 fa4f 	bl	800bd42 <SDMMC_GetResponse>
 80098a4:	4602      	mov	r2, r0
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	210c      	movs	r1, #12
 80098b0:	4618      	mov	r0, r3
 80098b2:	f002 fa46 	bl	800bd42 <SDMMC_GetResponse>
 80098b6:	4602      	mov	r2, r0
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2104      	movs	r1, #4
 80098c2:	4618      	mov	r0, r3
 80098c4:	f002 fa3d 	bl	800bd42 <SDMMC_GetResponse>
 80098c8:	4603      	mov	r3, r0
 80098ca:	0d1a      	lsrs	r2, r3, #20
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80098d0:	f107 0310 	add.w	r3, r7, #16
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7ff fc34 	bl	8009144 <HAL_SD_GetCardCSD>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d002      	beq.n	80098e8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80098e6:	e021      	b.n	800992c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6819      	ldr	r1, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f0:	041b      	lsls	r3, r3, #16
 80098f2:	2200      	movs	r2, #0
 80098f4:	461c      	mov	r4, r3
 80098f6:	4615      	mov	r5, r2
 80098f8:	4622      	mov	r2, r4
 80098fa:	462b      	mov	r3, r5
 80098fc:	4608      	mov	r0, r1
 80098fe:	f002 fb2b 	bl	800bf58 <SDMMC_CmdSelDesel>
 8009902:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <SD_InitCard+0x176>
  {
    return errorstate;
 800990a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800990c:	e00e      	b.n	800992c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681d      	ldr	r5, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	466c      	mov	r4, sp
 8009916:	f103 0210 	add.w	r2, r3, #16
 800991a:	ca07      	ldmia	r2, {r0, r1, r2}
 800991c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009920:	3304      	adds	r3, #4
 8009922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009924:	4628      	mov	r0, r5
 8009926:	f002 f97f 	bl	800bc28 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3740      	adds	r7, #64	; 0x40
 8009930:	46bd      	mov	sp, r7
 8009932:	bdb0      	pop	{r4, r5, r7, pc}

08009934 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b086      	sub	sp, #24
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009940:	2300      	movs	r3, #0
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	2300      	movs	r3, #0
 8009946:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4618      	mov	r0, r3
 800994e:	f002 fb26 	bl	800bf9e <SDMMC_CmdGoIdleState>
 8009952:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <SD_PowerON+0x2a>
  {
    return errorstate;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	e072      	b.n	8009a44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4618      	mov	r0, r3
 8009964:	f002 fb39 	bl	800bfda <SDMMC_CmdOperCond>
 8009968:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00d      	beq.n	800998c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4618      	mov	r0, r3
 800997c:	f002 fb0f 	bl	800bf9e <SDMMC_CmdGoIdleState>
 8009980:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d004      	beq.n	8009992 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	e05b      	b.n	8009a44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009996:	2b01      	cmp	r3, #1
 8009998:	d137      	bne.n	8009a0a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2100      	movs	r1, #0
 80099a0:	4618      	mov	r0, r3
 80099a2:	f002 fb39 	bl	800c018 <SDMMC_CmdAppCommand>
 80099a6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d02d      	beq.n	8009a0a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80099b2:	e047      	b.n	8009a44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2100      	movs	r1, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f002 fb2c 	bl	800c018 <SDMMC_CmdAppCommand>
 80099c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <SD_PowerON+0x98>
    {
      return errorstate;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	e03b      	b.n	8009a44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	491e      	ldr	r1, [pc, #120]	; (8009a4c <SD_PowerON+0x118>)
 80099d2:	4618      	mov	r0, r3
 80099d4:	f002 fb42 	bl	800c05c <SDMMC_CmdAppOperCommand>
 80099d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80099e4:	e02e      	b.n	8009a44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2100      	movs	r1, #0
 80099ec:	4618      	mov	r0, r3
 80099ee:	f002 f9a8 	bl	800bd42 <SDMMC_GetResponse>
 80099f2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	0fdb      	lsrs	r3, r3, #31
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d101      	bne.n	8009a00 <SD_PowerON+0xcc>
 80099fc:	2301      	movs	r3, #1
 80099fe:	e000      	b.n	8009a02 <SD_PowerON+0xce>
 8009a00:	2300      	movs	r3, #0
 8009a02:	613b      	str	r3, [r7, #16]

    count++;
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	3301      	adds	r3, #1
 8009a08:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d802      	bhi.n	8009a1a <SD_PowerON+0xe6>
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d0cc      	beq.n	80099b4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d902      	bls.n	8009a2a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a28:	e00c      	b.n	8009a44 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d003      	beq.n	8009a3c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	645a      	str	r2, [r3, #68]	; 0x44
 8009a3a:	e002      	b.n	8009a42 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3718      	adds	r7, #24
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	c1100000 	.word	0xc1100000

08009a50 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d102      	bne.n	8009a66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009a60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a64:	e018      	b.n	8009a98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a6e:	041b      	lsls	r3, r3, #16
 8009a70:	4619      	mov	r1, r3
 8009a72:	4610      	mov	r0, r2
 8009a74:	f002 fbb7 	bl	800c1e6 <SDMMC_CmdSendStatus>
 8009a78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	e009      	b.n	8009a98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f002 f959 	bl	800bd42 <SDMMC_GetResponse>
 8009a90:	4602      	mov	r2, r0
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3710      	adds	r7, #16
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]
 8009aac:	2300      	movs	r3, #0
 8009aae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f002 f943 	bl	800bd42 <SDMMC_GetResponse>
 8009abc:	4603      	mov	r3, r0
 8009abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ac6:	d102      	bne.n	8009ace <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ac8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009acc:	e02f      	b.n	8009b2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ace:	f107 030c 	add.w	r3, r7, #12
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f879 	bl	8009bcc <SD_FindSCR>
 8009ada:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	e023      	b.n	8009b2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d01c      	beq.n	8009b2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af8:	041b      	lsls	r3, r3, #16
 8009afa:	4619      	mov	r1, r3
 8009afc:	4610      	mov	r0, r2
 8009afe:	f002 fa8b 	bl	800c018 <SDMMC_CmdAppCommand>
 8009b02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	e00f      	b.n	8009b2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2102      	movs	r1, #2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f002 fac5 	bl	800c0a4 <SDMMC_CmdBusWidth>
 8009b1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d001      	beq.n	8009b26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	e003      	b.n	8009b2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	e001      	b.n	8009b2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b086      	sub	sp, #24
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009b3e:	2300      	movs	r3, #0
 8009b40:	60fb      	str	r3, [r7, #12]
 8009b42:	2300      	movs	r3, #0
 8009b44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f002 f8f8 	bl	800bd42 <SDMMC_GetResponse>
 8009b52:	4603      	mov	r3, r0
 8009b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b5c:	d102      	bne.n	8009b64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b62:	e02f      	b.n	8009bc4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b64:	f107 030c 	add.w	r3, r7, #12
 8009b68:	4619      	mov	r1, r3
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f82e 	bl	8009bcc <SD_FindSCR>
 8009b70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	e023      	b.n	8009bc4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d01c      	beq.n	8009bc0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b8e:	041b      	lsls	r3, r3, #16
 8009b90:	4619      	mov	r1, r3
 8009b92:	4610      	mov	r0, r2
 8009b94:	f002 fa40 	bl	800c018 <SDMMC_CmdAppCommand>
 8009b98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d001      	beq.n	8009ba4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	e00f      	b.n	8009bc4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4618      	mov	r0, r3
 8009bac:	f002 fa7a 	bl	800c0a4 <SDMMC_CmdBusWidth>
 8009bb0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	e003      	b.n	8009bc4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	e001      	b.n	8009bc4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3718      	adds	r7, #24
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009bcc:	b590      	push	{r4, r7, lr}
 8009bce:	b08f      	sub	sp, #60	; 0x3c
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009bd6:	f7f9 f8ef 	bl	8002db8 <HAL_GetTick>
 8009bda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009be0:	2300      	movs	r3, #0
 8009be2:	60bb      	str	r3, [r7, #8]
 8009be4:	2300      	movs	r3, #0
 8009be6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2108      	movs	r1, #8
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f002 f8e4 	bl	800bdc0 <SDMMC_CmdBlockLength>
 8009bf8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c02:	e0b2      	b.n	8009d6a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c0c:	041b      	lsls	r3, r3, #16
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4610      	mov	r0, r2
 8009c12:	f002 fa01 	bl	800c018 <SDMMC_CmdAppCommand>
 8009c16:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d001      	beq.n	8009c22 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	e0a3      	b.n	8009d6a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c22:	f04f 33ff 	mov.w	r3, #4294967295
 8009c26:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009c28:	2308      	movs	r3, #8
 8009c2a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009c2c:	2330      	movs	r3, #48	; 0x30
 8009c2e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c30:	2302      	movs	r3, #2
 8009c32:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f107 0210 	add.w	r2, r7, #16
 8009c44:	4611      	mov	r1, r2
 8009c46:	4618      	mov	r0, r3
 8009c48:	f002 f88e 	bl	800bd68 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4618      	mov	r0, r3
 8009c52:	f002 fa49 	bl	800c0e8 <SDMMC_CmdSendSCR>
 8009c56:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d02a      	beq.n	8009cb4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c60:	e083      	b.n	8009d6a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00f      	beq.n	8009c90 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6819      	ldr	r1, [r3, #0]
 8009c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	f107 0208 	add.w	r2, r7, #8
 8009c7c:	18d4      	adds	r4, r2, r3
 8009c7e:	4608      	mov	r0, r1
 8009c80:	f001 fffe 	bl	800bc80 <SDMMC_ReadFIFO>
 8009c84:	4603      	mov	r3, r0
 8009c86:	6023      	str	r3, [r4, #0]
      index++;
 8009c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c8e:	e006      	b.n	8009c9e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d012      	beq.n	8009cc4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c9e:	f7f9 f88b 	bl	8002db8 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cac:	d102      	bne.n	8009cb4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009cae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cb2:	e05a      	b.n	8009d6a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cba:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d0cf      	beq.n	8009c62 <SD_FindSCR+0x96>
 8009cc2:	e000      	b.n	8009cc6 <SD_FindSCR+0xfa>
      break;
 8009cc4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ccc:	f003 0308 	and.w	r3, r3, #8
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d005      	beq.n	8009ce0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2208      	movs	r2, #8
 8009cda:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009cdc:	2308      	movs	r3, #8
 8009cde:	e044      	b.n	8009d6a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d005      	beq.n	8009cfa <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	e037      	b.n	8009d6a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d00:	f003 0320 	and.w	r3, r3, #32
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2220      	movs	r2, #32
 8009d0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009d10:	2320      	movs	r3, #32
 8009d12:	e02a      	b.n	8009d6a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d1c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	061a      	lsls	r2, r3, #24
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	021b      	lsls	r3, r3, #8
 8009d26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d2a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	0a1b      	lsrs	r3, r3, #8
 8009d30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d34:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	0e1b      	lsrs	r3, r3, #24
 8009d3a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3e:	601a      	str	r2, [r3, #0]
    scr++;
 8009d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d42:	3304      	adds	r3, #4
 8009d44:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	061a      	lsls	r2, r3, #24
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	021b      	lsls	r3, r3, #8
 8009d4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d52:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	0a1b      	lsrs	r3, r3, #8
 8009d58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d5c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	0e1b      	lsrs	r3, r3, #24
 8009d62:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d66:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	373c      	adds	r7, #60	; 0x3c
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd90      	pop	{r4, r7, pc}

08009d72 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b082      	sub	sp, #8
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e025      	b.n	8009dd2 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d106      	bne.n	8009da0 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7f8 fe70 	bl	8002a80 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2202      	movs	r2, #2
 8009da4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	3304      	adds	r3, #4
 8009db0:	4619      	mov	r1, r3
 8009db2:	4610      	mov	r0, r2
 8009db4:	f001 fe72 	bl	800ba9c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	f001 fec6 	bl	800bb54 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
	...

08009ddc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e04c      	b.n	8009e88 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d106      	bne.n	8009e08 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7f8 fac2 	bl	800238c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f022 0203 	bic.w	r2, r2, #3
 8009e1e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	4b19      	ldr	r3, [pc, #100]	; (8009e90 <HAL_SPDIFRX_Init+0xb4>)
 8009e2c:	4013      	ands	r3, r2
 8009e2e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009e38:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009e3e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009e44:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009e4a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009e50:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009e56:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009e5c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009e62:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009e68:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	fff88407 	.word	0xfff88407

08009e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e09d      	b.n	8009fe2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d108      	bne.n	8009ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009eb6:	d009      	beq.n	8009ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	61da      	str	r2, [r3, #28]
 8009ebe:	e005      	b.n	8009ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d106      	bne.n	8009eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7f8 fab4 	bl	8002454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f02:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f0c:	d902      	bls.n	8009f14 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	e002      	b.n	8009f1a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f18:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009f22:	d007      	beq.n	8009f34 <HAL_SPI_Init+0xa0>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f2c:	d002      	beq.n	8009f34 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009f44:	431a      	orrs	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	f003 0302 	and.w	r3, r3, #2
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	f003 0301 	and.w	r3, r3, #1
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f62:	431a      	orrs	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a1b      	ldr	r3, [r3, #32]
 8009f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f76:	ea42 0103 	orr.w	r1, r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f7e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	430a      	orrs	r2, r1
 8009f88:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	0c1b      	lsrs	r3, r3, #16
 8009f90:	f003 0204 	and.w	r2, r3, #4
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f98:	f003 0310 	and.w	r3, r3, #16
 8009f9c:	431a      	orrs	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa2:	f003 0308 	and.w	r3, r3, #8
 8009fa6:	431a      	orrs	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009fb0:	ea42 0103 	orr.w	r1, r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69da      	ldr	r2, [r3, #28]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b082      	sub	sp, #8
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d101      	bne.n	8009ffc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e049      	b.n	800a090 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a002:	b2db      	uxtb	r3, r3
 800a004:	2b00      	cmp	r3, #0
 800a006:	d106      	bne.n	800a016 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7f8 fa81 	bl	8002518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2202      	movs	r2, #2
 800a01a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	3304      	adds	r3, #4
 800a026:	4619      	mov	r1, r3
 800a028:	4610      	mov	r0, r2
 800a02a:	f000 fc29 	bl	800a880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d001      	beq.n	800a0b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e054      	b.n	800a15a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68da      	ldr	r2, [r3, #12]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f042 0201 	orr.w	r2, r2, #1
 800a0c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4a26      	ldr	r2, [pc, #152]	; (800a168 <HAL_TIM_Base_Start_IT+0xd0>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d022      	beq.n	800a118 <HAL_TIM_Base_Start_IT+0x80>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0da:	d01d      	beq.n	800a118 <HAL_TIM_Base_Start_IT+0x80>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a22      	ldr	r2, [pc, #136]	; (800a16c <HAL_TIM_Base_Start_IT+0xd4>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d018      	beq.n	800a118 <HAL_TIM_Base_Start_IT+0x80>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a21      	ldr	r2, [pc, #132]	; (800a170 <HAL_TIM_Base_Start_IT+0xd8>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d013      	beq.n	800a118 <HAL_TIM_Base_Start_IT+0x80>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a1f      	ldr	r2, [pc, #124]	; (800a174 <HAL_TIM_Base_Start_IT+0xdc>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d00e      	beq.n	800a118 <HAL_TIM_Base_Start_IT+0x80>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a1e      	ldr	r2, [pc, #120]	; (800a178 <HAL_TIM_Base_Start_IT+0xe0>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d009      	beq.n	800a118 <HAL_TIM_Base_Start_IT+0x80>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a1c      	ldr	r2, [pc, #112]	; (800a17c <HAL_TIM_Base_Start_IT+0xe4>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d004      	beq.n	800a118 <HAL_TIM_Base_Start_IT+0x80>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a1b      	ldr	r2, [pc, #108]	; (800a180 <HAL_TIM_Base_Start_IT+0xe8>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d115      	bne.n	800a144 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	689a      	ldr	r2, [r3, #8]
 800a11e:	4b19      	ldr	r3, [pc, #100]	; (800a184 <HAL_TIM_Base_Start_IT+0xec>)
 800a120:	4013      	ands	r3, r2
 800a122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b06      	cmp	r3, #6
 800a128:	d015      	beq.n	800a156 <HAL_TIM_Base_Start_IT+0xbe>
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a130:	d011      	beq.n	800a156 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f042 0201 	orr.w	r2, r2, #1
 800a140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a142:	e008      	b.n	800a156 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f042 0201 	orr.w	r2, r2, #1
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	e000      	b.n	800a158 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a156:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	40010000 	.word	0x40010000
 800a16c:	40000400 	.word	0x40000400
 800a170:	40000800 	.word	0x40000800
 800a174:	40000c00 	.word	0x40000c00
 800a178:	40010400 	.word	0x40010400
 800a17c:	40014000 	.word	0x40014000
 800a180:	40001800 	.word	0x40001800
 800a184:	00010007 	.word	0x00010007

0800a188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e049      	b.n	800a22e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d106      	bne.n	800a1b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7f8 fa20 	bl	80025f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	f000 fb5a 	bl	800a880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b082      	sub	sp, #8
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d122      	bne.n	800a292 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b02      	cmp	r3, #2
 800a258:	d11b      	bne.n	800a292 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f06f 0202 	mvn.w	r2, #2
 800a262:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	f003 0303 	and.w	r3, r3, #3
 800a274:	2b00      	cmp	r3, #0
 800a276:	d003      	beq.n	800a280 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fae3 	bl	800a844 <HAL_TIM_IC_CaptureCallback>
 800a27e:	e005      	b.n	800a28c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fad5 	bl	800a830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fae6 	bl	800a858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	d122      	bne.n	800a2e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	f003 0304 	and.w	r3, r3, #4
 800a2aa:	2b04      	cmp	r3, #4
 800a2ac:	d11b      	bne.n	800a2e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f06f 0204 	mvn.w	r2, #4
 800a2b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fab9 	bl	800a844 <HAL_TIM_IC_CaptureCallback>
 800a2d2:	e005      	b.n	800a2e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 faab 	bl	800a830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fabc 	bl	800a858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	f003 0308 	and.w	r3, r3, #8
 800a2f0:	2b08      	cmp	r3, #8
 800a2f2:	d122      	bne.n	800a33a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	f003 0308 	and.w	r3, r3, #8
 800a2fe:	2b08      	cmp	r3, #8
 800a300:	d11b      	bne.n	800a33a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f06f 0208 	mvn.w	r2, #8
 800a30a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2204      	movs	r2, #4
 800a310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	f003 0303 	and.w	r3, r3, #3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d003      	beq.n	800a328 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 fa8f 	bl	800a844 <HAL_TIM_IC_CaptureCallback>
 800a326:	e005      	b.n	800a334 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fa81 	bl	800a830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 fa92 	bl	800a858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	f003 0310 	and.w	r3, r3, #16
 800a344:	2b10      	cmp	r3, #16
 800a346:	d122      	bne.n	800a38e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	f003 0310 	and.w	r3, r3, #16
 800a352:	2b10      	cmp	r3, #16
 800a354:	d11b      	bne.n	800a38e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f06f 0210 	mvn.w	r2, #16
 800a35e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2208      	movs	r2, #8
 800a364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a370:	2b00      	cmp	r3, #0
 800a372:	d003      	beq.n	800a37c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fa65 	bl	800a844 <HAL_TIM_IC_CaptureCallback>
 800a37a:	e005      	b.n	800a388 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fa57 	bl	800a830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fa68 	bl	800a858 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	691b      	ldr	r3, [r3, #16]
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d10e      	bne.n	800a3ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	f003 0301 	and.w	r3, r3, #1
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d107      	bne.n	800a3ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f06f 0201 	mvn.w	r2, #1
 800a3b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7f7 fb23 	bl	8001a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	691b      	ldr	r3, [r3, #16]
 800a3c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c4:	2b80      	cmp	r3, #128	; 0x80
 800a3c6:	d10e      	bne.n	800a3e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3d2:	2b80      	cmp	r3, #128	; 0x80
 800a3d4:	d107      	bne.n	800a3e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a3de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 fefb 	bl	800b1dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3f4:	d10e      	bne.n	800a414 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a400:	2b80      	cmp	r3, #128	; 0x80
 800a402:	d107      	bne.n	800a414 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a40c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 feee 	bl	800b1f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41e:	2b40      	cmp	r3, #64	; 0x40
 800a420:	d10e      	bne.n	800a440 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a42c:	2b40      	cmp	r3, #64	; 0x40
 800a42e:	d107      	bne.n	800a440 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fa16 	bl	800a86c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	691b      	ldr	r3, [r3, #16]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b20      	cmp	r3, #32
 800a44c:	d10e      	bne.n	800a46c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f003 0320 	and.w	r3, r3, #32
 800a458:	2b20      	cmp	r3, #32
 800a45a:	d107      	bne.n	800a46c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f06f 0220 	mvn.w	r2, #32
 800a464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 feae 	bl	800b1c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a46c:	bf00      	nop
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d101      	bne.n	800a492 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a48e:	2302      	movs	r3, #2
 800a490:	e0ff      	b.n	800a692 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b14      	cmp	r3, #20
 800a49e:	f200 80f0 	bhi.w	800a682 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a4a2:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a4fd 	.word	0x0800a4fd
 800a4ac:	0800a683 	.word	0x0800a683
 800a4b0:	0800a683 	.word	0x0800a683
 800a4b4:	0800a683 	.word	0x0800a683
 800a4b8:	0800a53d 	.word	0x0800a53d
 800a4bc:	0800a683 	.word	0x0800a683
 800a4c0:	0800a683 	.word	0x0800a683
 800a4c4:	0800a683 	.word	0x0800a683
 800a4c8:	0800a57f 	.word	0x0800a57f
 800a4cc:	0800a683 	.word	0x0800a683
 800a4d0:	0800a683 	.word	0x0800a683
 800a4d4:	0800a683 	.word	0x0800a683
 800a4d8:	0800a5bf 	.word	0x0800a5bf
 800a4dc:	0800a683 	.word	0x0800a683
 800a4e0:	0800a683 	.word	0x0800a683
 800a4e4:	0800a683 	.word	0x0800a683
 800a4e8:	0800a601 	.word	0x0800a601
 800a4ec:	0800a683 	.word	0x0800a683
 800a4f0:	0800a683 	.word	0x0800a683
 800a4f4:	0800a683 	.word	0x0800a683
 800a4f8:	0800a641 	.word	0x0800a641
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68b9      	ldr	r1, [r7, #8]
 800a502:	4618      	mov	r0, r3
 800a504:	f000 fa5c 	bl	800a9c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	699a      	ldr	r2, [r3, #24]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 0208 	orr.w	r2, r2, #8
 800a516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	699a      	ldr	r2, [r3, #24]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f022 0204 	bic.w	r2, r2, #4
 800a526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6999      	ldr	r1, [r3, #24]
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	691a      	ldr	r2, [r3, #16]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	619a      	str	r2, [r3, #24]
      break;
 800a53a:	e0a5      	b.n	800a688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68b9      	ldr	r1, [r7, #8]
 800a542:	4618      	mov	r0, r3
 800a544:	f000 faae 	bl	800aaa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	699a      	ldr	r2, [r3, #24]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	699a      	ldr	r2, [r3, #24]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6999      	ldr	r1, [r3, #24]
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	021a      	lsls	r2, r3, #8
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	430a      	orrs	r2, r1
 800a57a:	619a      	str	r2, [r3, #24]
      break;
 800a57c:	e084      	b.n	800a688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	68b9      	ldr	r1, [r7, #8]
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fb05 	bl	800ab94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	69da      	ldr	r2, [r3, #28]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f042 0208 	orr.w	r2, r2, #8
 800a598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	69da      	ldr	r2, [r3, #28]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f022 0204 	bic.w	r2, r2, #4
 800a5a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	69d9      	ldr	r1, [r3, #28]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	691a      	ldr	r2, [r3, #16]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	430a      	orrs	r2, r1
 800a5ba:	61da      	str	r2, [r3, #28]
      break;
 800a5bc:	e064      	b.n	800a688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68b9      	ldr	r1, [r7, #8]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 fb5b 	bl	800ac80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	69da      	ldr	r2, [r3, #28]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	69da      	ldr	r2, [r3, #28]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	69d9      	ldr	r1, [r3, #28]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	691b      	ldr	r3, [r3, #16]
 800a5f4:	021a      	lsls	r2, r3, #8
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	61da      	str	r2, [r3, #28]
      break;
 800a5fe:	e043      	b.n	800a688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68b9      	ldr	r1, [r7, #8]
 800a606:	4618      	mov	r0, r3
 800a608:	f000 fb92 	bl	800ad30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f042 0208 	orr.w	r2, r2, #8
 800a61a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f022 0204 	bic.w	r2, r2, #4
 800a62a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	691a      	ldr	r2, [r3, #16]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	430a      	orrs	r2, r1
 800a63c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a63e:	e023      	b.n	800a688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	68b9      	ldr	r1, [r7, #8]
 800a646:	4618      	mov	r0, r3
 800a648:	f000 fbc4 	bl	800add4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a65a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a66a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	021a      	lsls	r2, r3, #8
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	430a      	orrs	r2, r1
 800a67e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a680:	e002      	b.n	800a688 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	75fb      	strb	r3, [r7, #23]
      break;
 800a686:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a690:	7dfb      	ldrb	r3, [r7, #23]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3718      	adds	r7, #24
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop

0800a69c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d101      	bne.n	800a6b8 <HAL_TIM_ConfigClockSource+0x1c>
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	e0b4      	b.n	800a822 <HAL_TIM_ConfigClockSource+0x186>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	4b56      	ldr	r3, [pc, #344]	; (800a82c <HAL_TIM_ConfigClockSource+0x190>)
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6f0:	d03e      	beq.n	800a770 <HAL_TIM_ConfigClockSource+0xd4>
 800a6f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6f6:	f200 8087 	bhi.w	800a808 <HAL_TIM_ConfigClockSource+0x16c>
 800a6fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6fe:	f000 8086 	beq.w	800a80e <HAL_TIM_ConfigClockSource+0x172>
 800a702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a706:	d87f      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x16c>
 800a708:	2b70      	cmp	r3, #112	; 0x70
 800a70a:	d01a      	beq.n	800a742 <HAL_TIM_ConfigClockSource+0xa6>
 800a70c:	2b70      	cmp	r3, #112	; 0x70
 800a70e:	d87b      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x16c>
 800a710:	2b60      	cmp	r3, #96	; 0x60
 800a712:	d050      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0x11a>
 800a714:	2b60      	cmp	r3, #96	; 0x60
 800a716:	d877      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x16c>
 800a718:	2b50      	cmp	r3, #80	; 0x50
 800a71a:	d03c      	beq.n	800a796 <HAL_TIM_ConfigClockSource+0xfa>
 800a71c:	2b50      	cmp	r3, #80	; 0x50
 800a71e:	d873      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x16c>
 800a720:	2b40      	cmp	r3, #64	; 0x40
 800a722:	d058      	beq.n	800a7d6 <HAL_TIM_ConfigClockSource+0x13a>
 800a724:	2b40      	cmp	r3, #64	; 0x40
 800a726:	d86f      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x16c>
 800a728:	2b30      	cmp	r3, #48	; 0x30
 800a72a:	d064      	beq.n	800a7f6 <HAL_TIM_ConfigClockSource+0x15a>
 800a72c:	2b30      	cmp	r3, #48	; 0x30
 800a72e:	d86b      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x16c>
 800a730:	2b20      	cmp	r3, #32
 800a732:	d060      	beq.n	800a7f6 <HAL_TIM_ConfigClockSource+0x15a>
 800a734:	2b20      	cmp	r3, #32
 800a736:	d867      	bhi.n	800a808 <HAL_TIM_ConfigClockSource+0x16c>
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d05c      	beq.n	800a7f6 <HAL_TIM_ConfigClockSource+0x15a>
 800a73c:	2b10      	cmp	r3, #16
 800a73e:	d05a      	beq.n	800a7f6 <HAL_TIM_ConfigClockSource+0x15a>
 800a740:	e062      	b.n	800a808 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6818      	ldr	r0, [r3, #0]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	6899      	ldr	r1, [r3, #8]
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	f000 fc0d 	bl	800af70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a764:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	609a      	str	r2, [r3, #8]
      break;
 800a76e:	e04f      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6818      	ldr	r0, [r3, #0]
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	6899      	ldr	r1, [r3, #8]
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	f000 fbf6 	bl	800af70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	689a      	ldr	r2, [r3, #8]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a792:	609a      	str	r2, [r3, #8]
      break;
 800a794:	e03c      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	6859      	ldr	r1, [r3, #4]
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	f000 fb6a 	bl	800ae7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2150      	movs	r1, #80	; 0x50
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f000 fbc3 	bl	800af3a <TIM_ITRx_SetConfig>
      break;
 800a7b4:	e02c      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6818      	ldr	r0, [r3, #0]
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	6859      	ldr	r1, [r3, #4]
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f000 fb89 	bl	800aeda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2160      	movs	r1, #96	; 0x60
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 fbb3 	bl	800af3a <TIM_ITRx_SetConfig>
      break;
 800a7d4:	e01c      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6818      	ldr	r0, [r3, #0]
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	6859      	ldr	r1, [r3, #4]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f000 fb4a 	bl	800ae7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2140      	movs	r1, #64	; 0x40
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 fba3 	bl	800af3a <TIM_ITRx_SetConfig>
      break;
 800a7f4:	e00c      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4619      	mov	r1, r3
 800a800:	4610      	mov	r0, r2
 800a802:	f000 fb9a 	bl	800af3a <TIM_ITRx_SetConfig>
      break;
 800a806:	e003      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a808:	2301      	movs	r3, #1
 800a80a:	73fb      	strb	r3, [r7, #15]
      break;
 800a80c:	e000      	b.n	800a810 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a80e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a820:	7bfb      	ldrb	r3, [r7, #15]
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	fffeff88 	.word	0xfffeff88

0800a830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a84c:	bf00      	nop
 800a84e:	370c      	adds	r7, #12
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a40      	ldr	r2, [pc, #256]	; (800a994 <TIM_Base_SetConfig+0x114>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d013      	beq.n	800a8c0 <TIM_Base_SetConfig+0x40>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a89e:	d00f      	beq.n	800a8c0 <TIM_Base_SetConfig+0x40>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a3d      	ldr	r2, [pc, #244]	; (800a998 <TIM_Base_SetConfig+0x118>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d00b      	beq.n	800a8c0 <TIM_Base_SetConfig+0x40>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a3c      	ldr	r2, [pc, #240]	; (800a99c <TIM_Base_SetConfig+0x11c>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d007      	beq.n	800a8c0 <TIM_Base_SetConfig+0x40>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a3b      	ldr	r2, [pc, #236]	; (800a9a0 <TIM_Base_SetConfig+0x120>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d003      	beq.n	800a8c0 <TIM_Base_SetConfig+0x40>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a3a      	ldr	r2, [pc, #232]	; (800a9a4 <TIM_Base_SetConfig+0x124>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d108      	bne.n	800a8d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a2f      	ldr	r2, [pc, #188]	; (800a994 <TIM_Base_SetConfig+0x114>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d02b      	beq.n	800a932 <TIM_Base_SetConfig+0xb2>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e0:	d027      	beq.n	800a932 <TIM_Base_SetConfig+0xb2>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a2c      	ldr	r2, [pc, #176]	; (800a998 <TIM_Base_SetConfig+0x118>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d023      	beq.n	800a932 <TIM_Base_SetConfig+0xb2>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4a2b      	ldr	r2, [pc, #172]	; (800a99c <TIM_Base_SetConfig+0x11c>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d01f      	beq.n	800a932 <TIM_Base_SetConfig+0xb2>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a2a      	ldr	r2, [pc, #168]	; (800a9a0 <TIM_Base_SetConfig+0x120>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d01b      	beq.n	800a932 <TIM_Base_SetConfig+0xb2>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a29      	ldr	r2, [pc, #164]	; (800a9a4 <TIM_Base_SetConfig+0x124>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d017      	beq.n	800a932 <TIM_Base_SetConfig+0xb2>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a28      	ldr	r2, [pc, #160]	; (800a9a8 <TIM_Base_SetConfig+0x128>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d013      	beq.n	800a932 <TIM_Base_SetConfig+0xb2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a27      	ldr	r2, [pc, #156]	; (800a9ac <TIM_Base_SetConfig+0x12c>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d00f      	beq.n	800a932 <TIM_Base_SetConfig+0xb2>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a26      	ldr	r2, [pc, #152]	; (800a9b0 <TIM_Base_SetConfig+0x130>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d00b      	beq.n	800a932 <TIM_Base_SetConfig+0xb2>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a25      	ldr	r2, [pc, #148]	; (800a9b4 <TIM_Base_SetConfig+0x134>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d007      	beq.n	800a932 <TIM_Base_SetConfig+0xb2>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a24      	ldr	r2, [pc, #144]	; (800a9b8 <TIM_Base_SetConfig+0x138>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d003      	beq.n	800a932 <TIM_Base_SetConfig+0xb2>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a23      	ldr	r2, [pc, #140]	; (800a9bc <TIM_Base_SetConfig+0x13c>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d108      	bne.n	800a944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	4313      	orrs	r3, r2
 800a942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	695b      	ldr	r3, [r3, #20]
 800a94e:	4313      	orrs	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	689a      	ldr	r2, [r3, #8]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a0a      	ldr	r2, [pc, #40]	; (800a994 <TIM_Base_SetConfig+0x114>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d003      	beq.n	800a978 <TIM_Base_SetConfig+0xf8>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a0c      	ldr	r2, [pc, #48]	; (800a9a4 <TIM_Base_SetConfig+0x124>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d103      	bne.n	800a980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	691a      	ldr	r2, [r3, #16]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	615a      	str	r2, [r3, #20]
}
 800a986:	bf00      	nop
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	40010000 	.word	0x40010000
 800a998:	40000400 	.word	0x40000400
 800a99c:	40000800 	.word	0x40000800
 800a9a0:	40000c00 	.word	0x40000c00
 800a9a4:	40010400 	.word	0x40010400
 800a9a8:	40014000 	.word	0x40014000
 800a9ac:	40014400 	.word	0x40014400
 800a9b0:	40014800 	.word	0x40014800
 800a9b4:	40001800 	.word	0x40001800
 800a9b8:	40001c00 	.word	0x40001c00
 800a9bc:	40002000 	.word	0x40002000

0800a9c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	f023 0201 	bic.w	r2, r3, #1
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	685b      	ldr	r3, [r3, #4]
 800a9e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	699b      	ldr	r3, [r3, #24]
 800a9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4b2b      	ldr	r3, [pc, #172]	; (800aa98 <TIM_OC1_SetConfig+0xd8>)
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f023 0303 	bic.w	r3, r3, #3
 800a9f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f023 0302 	bic.w	r3, r3, #2
 800aa08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	4a21      	ldr	r2, [pc, #132]	; (800aa9c <TIM_OC1_SetConfig+0xdc>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d003      	beq.n	800aa24 <TIM_OC1_SetConfig+0x64>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	4a20      	ldr	r2, [pc, #128]	; (800aaa0 <TIM_OC1_SetConfig+0xe0>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d10c      	bne.n	800aa3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	f023 0308 	bic.w	r3, r3, #8
 800aa2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	4313      	orrs	r3, r2
 800aa34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f023 0304 	bic.w	r3, r3, #4
 800aa3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a16      	ldr	r2, [pc, #88]	; (800aa9c <TIM_OC1_SetConfig+0xdc>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d003      	beq.n	800aa4e <TIM_OC1_SetConfig+0x8e>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a15      	ldr	r2, [pc, #84]	; (800aaa0 <TIM_OC1_SetConfig+0xe0>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d111      	bne.n	800aa72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	699b      	ldr	r3, [r3, #24]
 800aa6c:	693a      	ldr	r2, [r7, #16]
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	685a      	ldr	r2, [r3, #4]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	621a      	str	r2, [r3, #32]
}
 800aa8c:	bf00      	nop
 800aa8e:	371c      	adds	r7, #28
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr
 800aa98:	fffeff8f 	.word	0xfffeff8f
 800aa9c:	40010000 	.word	0x40010000
 800aaa0:	40010400 	.word	0x40010400

0800aaa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b087      	sub	sp, #28
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a1b      	ldr	r3, [r3, #32]
 800aab2:	f023 0210 	bic.w	r2, r3, #16
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4b2e      	ldr	r3, [pc, #184]	; (800ab88 <TIM_OC2_SetConfig+0xe4>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	021b      	lsls	r3, r3, #8
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f023 0320 	bic.w	r3, r3, #32
 800aaee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	011b      	lsls	r3, r3, #4
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a23      	ldr	r2, [pc, #140]	; (800ab8c <TIM_OC2_SetConfig+0xe8>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d003      	beq.n	800ab0c <TIM_OC2_SetConfig+0x68>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a22      	ldr	r2, [pc, #136]	; (800ab90 <TIM_OC2_SetConfig+0xec>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d10d      	bne.n	800ab28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	011b      	lsls	r3, r3, #4
 800ab1a:	697a      	ldr	r2, [r7, #20]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a18      	ldr	r2, [pc, #96]	; (800ab8c <TIM_OC2_SetConfig+0xe8>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d003      	beq.n	800ab38 <TIM_OC2_SetConfig+0x94>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a17      	ldr	r2, [pc, #92]	; (800ab90 <TIM_OC2_SetConfig+0xec>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d113      	bne.n	800ab60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	693a      	ldr	r2, [r7, #16]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	693a      	ldr	r2, [r7, #16]
 800ab64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	685a      	ldr	r2, [r3, #4]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	621a      	str	r2, [r3, #32]
}
 800ab7a:	bf00      	nop
 800ab7c:	371c      	adds	r7, #28
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	feff8fff 	.word	0xfeff8fff
 800ab8c:	40010000 	.word	0x40010000
 800ab90:	40010400 	.word	0x40010400

0800ab94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a1b      	ldr	r3, [r3, #32]
 800aba2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	4b2d      	ldr	r3, [pc, #180]	; (800ac74 <TIM_OC3_SetConfig+0xe0>)
 800abc0:	4013      	ands	r3, r2
 800abc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f023 0303 	bic.w	r3, r3, #3
 800abca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	021b      	lsls	r3, r3, #8
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a22      	ldr	r2, [pc, #136]	; (800ac78 <TIM_OC3_SetConfig+0xe4>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d003      	beq.n	800abfa <TIM_OC3_SetConfig+0x66>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a21      	ldr	r2, [pc, #132]	; (800ac7c <TIM_OC3_SetConfig+0xe8>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d10d      	bne.n	800ac16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	021b      	lsls	r3, r3, #8
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a17      	ldr	r2, [pc, #92]	; (800ac78 <TIM_OC3_SetConfig+0xe4>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d003      	beq.n	800ac26 <TIM_OC3_SetConfig+0x92>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a16      	ldr	r2, [pc, #88]	; (800ac7c <TIM_OC3_SetConfig+0xe8>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d113      	bne.n	800ac4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	011b      	lsls	r3, r3, #4
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	685a      	ldr	r2, [r3, #4]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	621a      	str	r2, [r3, #32]
}
 800ac68:	bf00      	nop
 800ac6a:	371c      	adds	r7, #28
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr
 800ac74:	fffeff8f 	.word	0xfffeff8f
 800ac78:	40010000 	.word	0x40010000
 800ac7c:	40010400 	.word	0x40010400

0800ac80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	69db      	ldr	r3, [r3, #28]
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	4b1e      	ldr	r3, [pc, #120]	; (800ad24 <TIM_OC4_SetConfig+0xa4>)
 800acac:	4013      	ands	r3, r2
 800acae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	021b      	lsls	r3, r3, #8
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	031b      	lsls	r3, r3, #12
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a13      	ldr	r2, [pc, #76]	; (800ad28 <TIM_OC4_SetConfig+0xa8>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d003      	beq.n	800ace8 <TIM_OC4_SetConfig+0x68>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	4a12      	ldr	r2, [pc, #72]	; (800ad2c <TIM_OC4_SetConfig+0xac>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d109      	bne.n	800acfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	019b      	lsls	r3, r3, #6
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	697a      	ldr	r2, [r7, #20]
 800ad00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	685a      	ldr	r2, [r3, #4]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	621a      	str	r2, [r3, #32]
}
 800ad16:	bf00      	nop
 800ad18:	371c      	adds	r7, #28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	feff8fff 	.word	0xfeff8fff
 800ad28:	40010000 	.word	0x40010000
 800ad2c:	40010400 	.word	0x40010400

0800ad30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b087      	sub	sp, #28
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a1b      	ldr	r3, [r3, #32]
 800ad3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	4b1b      	ldr	r3, [pc, #108]	; (800adc8 <TIM_OC5_SetConfig+0x98>)
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	041b      	lsls	r3, r3, #16
 800ad78:	693a      	ldr	r2, [r7, #16]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a12      	ldr	r2, [pc, #72]	; (800adcc <TIM_OC5_SetConfig+0x9c>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d003      	beq.n	800ad8e <TIM_OC5_SetConfig+0x5e>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a11      	ldr	r2, [pc, #68]	; (800add0 <TIM_OC5_SetConfig+0xa0>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d109      	bne.n	800ada2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	695b      	ldr	r3, [r3, #20]
 800ad9a:	021b      	lsls	r3, r3, #8
 800ad9c:	697a      	ldr	r2, [r7, #20]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	697a      	ldr	r2, [r7, #20]
 800ada6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	621a      	str	r2, [r3, #32]
}
 800adbc:	bf00      	nop
 800adbe:	371c      	adds	r7, #28
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	fffeff8f 	.word	0xfffeff8f
 800adcc:	40010000 	.word	0x40010000
 800add0:	40010400 	.word	0x40010400

0800add4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800add4:	b480      	push	{r7}
 800add6:	b087      	sub	sp, #28
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6a1b      	ldr	r3, [r3, #32]
 800ade2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a1b      	ldr	r3, [r3, #32]
 800adee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	4b1c      	ldr	r3, [pc, #112]	; (800ae70 <TIM_OC6_SetConfig+0x9c>)
 800ae00:	4013      	ands	r3, r2
 800ae02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	021b      	lsls	r3, r3, #8
 800ae0a:	68fa      	ldr	r2, [r7, #12]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	051b      	lsls	r3, r3, #20
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a13      	ldr	r2, [pc, #76]	; (800ae74 <TIM_OC6_SetConfig+0xa0>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d003      	beq.n	800ae34 <TIM_OC6_SetConfig+0x60>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a12      	ldr	r2, [pc, #72]	; (800ae78 <TIM_OC6_SetConfig+0xa4>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d109      	bne.n	800ae48 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	695b      	ldr	r3, [r3, #20]
 800ae40:	029b      	lsls	r3, r3, #10
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	697a      	ldr	r2, [r7, #20]
 800ae4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	621a      	str	r2, [r3, #32]
}
 800ae62:	bf00      	nop
 800ae64:	371c      	adds	r7, #28
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
 800ae6e:	bf00      	nop
 800ae70:	feff8fff 	.word	0xfeff8fff
 800ae74:	40010000 	.word	0x40010000
 800ae78:	40010400 	.word	0x40010400

0800ae7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b087      	sub	sp, #28
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6a1b      	ldr	r3, [r3, #32]
 800ae8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6a1b      	ldr	r3, [r3, #32]
 800ae92:	f023 0201 	bic.w	r2, r3, #1
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	f023 030a 	bic.w	r3, r3, #10
 800aeb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	621a      	str	r2, [r3, #32]
}
 800aece:	bf00      	nop
 800aed0:	371c      	adds	r7, #28
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr

0800aeda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b087      	sub	sp, #28
 800aede:	af00      	add	r7, sp, #0
 800aee0:	60f8      	str	r0, [r7, #12]
 800aee2:	60b9      	str	r1, [r7, #8]
 800aee4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	f023 0210 	bic.w	r2, r3, #16
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	031b      	lsls	r3, r3, #12
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	4313      	orrs	r3, r2
 800af20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	621a      	str	r2, [r3, #32]
}
 800af2e:	bf00      	nop
 800af30:	371c      	adds	r7, #28
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af3a:	b480      	push	{r7}
 800af3c:	b085      	sub	sp, #20
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	4313      	orrs	r3, r2
 800af58:	f043 0307 	orr.w	r3, r3, #7
 800af5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	609a      	str	r2, [r3, #8]
}
 800af64:	bf00      	nop
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af70:	b480      	push	{r7}
 800af72:	b087      	sub	sp, #28
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
 800af7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	021a      	lsls	r2, r3, #8
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	431a      	orrs	r2, r3
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	4313      	orrs	r3, r2
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	697a      	ldr	r2, [r7, #20]
 800afa2:	609a      	str	r2, [r3, #8]
}
 800afa4:	bf00      	nop
 800afa6:	371c      	adds	r7, #28
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d101      	bne.n	800afc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afc4:	2302      	movs	r3, #2
 800afc6:	e06d      	b.n	800b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2201      	movs	r2, #1
 800afcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2202      	movs	r2, #2
 800afd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a30      	ldr	r2, [pc, #192]	; (800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d004      	beq.n	800affc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a2f      	ldr	r2, [pc, #188]	; (800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d108      	bne.n	800b00e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b002:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b014:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a20      	ldr	r2, [pc, #128]	; (800b0b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d022      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b03a:	d01d      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4a1d      	ldr	r2, [pc, #116]	; (800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d018      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a1c      	ldr	r2, [pc, #112]	; (800b0bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d013      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a1a      	ldr	r2, [pc, #104]	; (800b0c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d00e      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a15      	ldr	r2, [pc, #84]	; (800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d009      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a16      	ldr	r2, [pc, #88]	; (800b0c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d004      	beq.n	800b078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4a15      	ldr	r2, [pc, #84]	; (800b0c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d10c      	bne.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b07e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	4313      	orrs	r3, r2
 800b088:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	40010000 	.word	0x40010000
 800b0b4:	40010400 	.word	0x40010400
 800b0b8:	40000400 	.word	0x40000400
 800b0bc:	40000800 	.word	0x40000800
 800b0c0:	40000c00 	.word	0x40000c00
 800b0c4:	40014000 	.word	0x40014000
 800b0c8:	40001800 	.word	0x40001800

0800b0cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d101      	bne.n	800b0e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	e065      	b.n	800b1b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	4313      	orrs	r3, r2
 800b0fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	4313      	orrs	r3, r2
 800b10a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	4313      	orrs	r3, r2
 800b118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4313      	orrs	r3, r2
 800b126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	4313      	orrs	r3, r2
 800b134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	4313      	orrs	r3, r2
 800b142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14e:	4313      	orrs	r3, r2
 800b150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	041b      	lsls	r3, r3, #16
 800b15e:	4313      	orrs	r3, r2
 800b160:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a16      	ldr	r2, [pc, #88]	; (800b1c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d004      	beq.n	800b176 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a14      	ldr	r2, [pc, #80]	; (800b1c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d115      	bne.n	800b1a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b180:	051b      	lsls	r3, r3, #20
 800b182:	4313      	orrs	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	69db      	ldr	r3, [r3, #28]
 800b190:	4313      	orrs	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	6a1b      	ldr	r3, [r3, #32]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	40010000 	.word	0x40010000
 800b1c4:	40010400 	.word	0x40010400

0800b1c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1d0:	bf00      	nop
 800b1d2:	370c      	adds	r7, #12
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1e4:	bf00      	nop
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e040      	b.n	800b298 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d106      	bne.n	800b22c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7f7 fad2 	bl	80027d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2224      	movs	r2, #36	; 0x24
 800b230:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f022 0201 	bic.w	r2, r2, #1
 800b240:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f82c 	bl	800b2a0 <UART_SetConfig>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d101      	bne.n	800b252 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	e022      	b.n	800b298 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b256:	2b00      	cmp	r3, #0
 800b258:	d002      	beq.n	800b260 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fa84 	bl	800b768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	685a      	ldr	r2, [r3, #4]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b26e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	689a      	ldr	r2, [r3, #8]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b27e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f042 0201 	orr.w	r2, r2, #1
 800b28e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fb0b 	bl	800b8ac <UART_CheckIdleState>
 800b296:	4603      	mov	r3, r0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b088      	sub	sp, #32
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	689a      	ldr	r2, [r3, #8]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	431a      	orrs	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	431a      	orrs	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	4ba6      	ldr	r3, [pc, #664]	; (800b564 <UART_SetConfig+0x2c4>)
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	6812      	ldr	r2, [r2, #0]
 800b2d2:	6979      	ldr	r1, [r7, #20]
 800b2d4:	430b      	orrs	r3, r1
 800b2d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	430a      	orrs	r2, r1
 800b2ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6a1b      	ldr	r3, [r3, #32]
 800b2f8:	697a      	ldr	r2, [r7, #20]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	697a      	ldr	r2, [r7, #20]
 800b30e:	430a      	orrs	r2, r1
 800b310:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a94      	ldr	r2, [pc, #592]	; (800b568 <UART_SetConfig+0x2c8>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d120      	bne.n	800b35e <UART_SetConfig+0xbe>
 800b31c:	4b93      	ldr	r3, [pc, #588]	; (800b56c <UART_SetConfig+0x2cc>)
 800b31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b322:	f003 0303 	and.w	r3, r3, #3
 800b326:	2b03      	cmp	r3, #3
 800b328:	d816      	bhi.n	800b358 <UART_SetConfig+0xb8>
 800b32a:	a201      	add	r2, pc, #4	; (adr r2, 800b330 <UART_SetConfig+0x90>)
 800b32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b330:	0800b341 	.word	0x0800b341
 800b334:	0800b34d 	.word	0x0800b34d
 800b338:	0800b347 	.word	0x0800b347
 800b33c:	0800b353 	.word	0x0800b353
 800b340:	2301      	movs	r3, #1
 800b342:	77fb      	strb	r3, [r7, #31]
 800b344:	e150      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b346:	2302      	movs	r3, #2
 800b348:	77fb      	strb	r3, [r7, #31]
 800b34a:	e14d      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b34c:	2304      	movs	r3, #4
 800b34e:	77fb      	strb	r3, [r7, #31]
 800b350:	e14a      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b352:	2308      	movs	r3, #8
 800b354:	77fb      	strb	r3, [r7, #31]
 800b356:	e147      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b358:	2310      	movs	r3, #16
 800b35a:	77fb      	strb	r3, [r7, #31]
 800b35c:	e144      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a83      	ldr	r2, [pc, #524]	; (800b570 <UART_SetConfig+0x2d0>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d132      	bne.n	800b3ce <UART_SetConfig+0x12e>
 800b368:	4b80      	ldr	r3, [pc, #512]	; (800b56c <UART_SetConfig+0x2cc>)
 800b36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b36e:	f003 030c 	and.w	r3, r3, #12
 800b372:	2b0c      	cmp	r3, #12
 800b374:	d828      	bhi.n	800b3c8 <UART_SetConfig+0x128>
 800b376:	a201      	add	r2, pc, #4	; (adr r2, 800b37c <UART_SetConfig+0xdc>)
 800b378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37c:	0800b3b1 	.word	0x0800b3b1
 800b380:	0800b3c9 	.word	0x0800b3c9
 800b384:	0800b3c9 	.word	0x0800b3c9
 800b388:	0800b3c9 	.word	0x0800b3c9
 800b38c:	0800b3bd 	.word	0x0800b3bd
 800b390:	0800b3c9 	.word	0x0800b3c9
 800b394:	0800b3c9 	.word	0x0800b3c9
 800b398:	0800b3c9 	.word	0x0800b3c9
 800b39c:	0800b3b7 	.word	0x0800b3b7
 800b3a0:	0800b3c9 	.word	0x0800b3c9
 800b3a4:	0800b3c9 	.word	0x0800b3c9
 800b3a8:	0800b3c9 	.word	0x0800b3c9
 800b3ac:	0800b3c3 	.word	0x0800b3c3
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	77fb      	strb	r3, [r7, #31]
 800b3b4:	e118      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	77fb      	strb	r3, [r7, #31]
 800b3ba:	e115      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b3bc:	2304      	movs	r3, #4
 800b3be:	77fb      	strb	r3, [r7, #31]
 800b3c0:	e112      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b3c2:	2308      	movs	r3, #8
 800b3c4:	77fb      	strb	r3, [r7, #31]
 800b3c6:	e10f      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b3c8:	2310      	movs	r3, #16
 800b3ca:	77fb      	strb	r3, [r7, #31]
 800b3cc:	e10c      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a68      	ldr	r2, [pc, #416]	; (800b574 <UART_SetConfig+0x2d4>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d120      	bne.n	800b41a <UART_SetConfig+0x17a>
 800b3d8:	4b64      	ldr	r3, [pc, #400]	; (800b56c <UART_SetConfig+0x2cc>)
 800b3da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b3e2:	2b30      	cmp	r3, #48	; 0x30
 800b3e4:	d013      	beq.n	800b40e <UART_SetConfig+0x16e>
 800b3e6:	2b30      	cmp	r3, #48	; 0x30
 800b3e8:	d814      	bhi.n	800b414 <UART_SetConfig+0x174>
 800b3ea:	2b20      	cmp	r3, #32
 800b3ec:	d009      	beq.n	800b402 <UART_SetConfig+0x162>
 800b3ee:	2b20      	cmp	r3, #32
 800b3f0:	d810      	bhi.n	800b414 <UART_SetConfig+0x174>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d002      	beq.n	800b3fc <UART_SetConfig+0x15c>
 800b3f6:	2b10      	cmp	r3, #16
 800b3f8:	d006      	beq.n	800b408 <UART_SetConfig+0x168>
 800b3fa:	e00b      	b.n	800b414 <UART_SetConfig+0x174>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	77fb      	strb	r3, [r7, #31]
 800b400:	e0f2      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b402:	2302      	movs	r3, #2
 800b404:	77fb      	strb	r3, [r7, #31]
 800b406:	e0ef      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b408:	2304      	movs	r3, #4
 800b40a:	77fb      	strb	r3, [r7, #31]
 800b40c:	e0ec      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b40e:	2308      	movs	r3, #8
 800b410:	77fb      	strb	r3, [r7, #31]
 800b412:	e0e9      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b414:	2310      	movs	r3, #16
 800b416:	77fb      	strb	r3, [r7, #31]
 800b418:	e0e6      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a56      	ldr	r2, [pc, #344]	; (800b578 <UART_SetConfig+0x2d8>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d120      	bne.n	800b466 <UART_SetConfig+0x1c6>
 800b424:	4b51      	ldr	r3, [pc, #324]	; (800b56c <UART_SetConfig+0x2cc>)
 800b426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b42a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b42e:	2bc0      	cmp	r3, #192	; 0xc0
 800b430:	d013      	beq.n	800b45a <UART_SetConfig+0x1ba>
 800b432:	2bc0      	cmp	r3, #192	; 0xc0
 800b434:	d814      	bhi.n	800b460 <UART_SetConfig+0x1c0>
 800b436:	2b80      	cmp	r3, #128	; 0x80
 800b438:	d009      	beq.n	800b44e <UART_SetConfig+0x1ae>
 800b43a:	2b80      	cmp	r3, #128	; 0x80
 800b43c:	d810      	bhi.n	800b460 <UART_SetConfig+0x1c0>
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d002      	beq.n	800b448 <UART_SetConfig+0x1a8>
 800b442:	2b40      	cmp	r3, #64	; 0x40
 800b444:	d006      	beq.n	800b454 <UART_SetConfig+0x1b4>
 800b446:	e00b      	b.n	800b460 <UART_SetConfig+0x1c0>
 800b448:	2300      	movs	r3, #0
 800b44a:	77fb      	strb	r3, [r7, #31]
 800b44c:	e0cc      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b44e:	2302      	movs	r3, #2
 800b450:	77fb      	strb	r3, [r7, #31]
 800b452:	e0c9      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b454:	2304      	movs	r3, #4
 800b456:	77fb      	strb	r3, [r7, #31]
 800b458:	e0c6      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b45a:	2308      	movs	r3, #8
 800b45c:	77fb      	strb	r3, [r7, #31]
 800b45e:	e0c3      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b460:	2310      	movs	r3, #16
 800b462:	77fb      	strb	r3, [r7, #31]
 800b464:	e0c0      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a44      	ldr	r2, [pc, #272]	; (800b57c <UART_SetConfig+0x2dc>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d125      	bne.n	800b4bc <UART_SetConfig+0x21c>
 800b470:	4b3e      	ldr	r3, [pc, #248]	; (800b56c <UART_SetConfig+0x2cc>)
 800b472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b47a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b47e:	d017      	beq.n	800b4b0 <UART_SetConfig+0x210>
 800b480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b484:	d817      	bhi.n	800b4b6 <UART_SetConfig+0x216>
 800b486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b48a:	d00b      	beq.n	800b4a4 <UART_SetConfig+0x204>
 800b48c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b490:	d811      	bhi.n	800b4b6 <UART_SetConfig+0x216>
 800b492:	2b00      	cmp	r3, #0
 800b494:	d003      	beq.n	800b49e <UART_SetConfig+0x1fe>
 800b496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b49a:	d006      	beq.n	800b4aa <UART_SetConfig+0x20a>
 800b49c:	e00b      	b.n	800b4b6 <UART_SetConfig+0x216>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	77fb      	strb	r3, [r7, #31]
 800b4a2:	e0a1      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b4a4:	2302      	movs	r3, #2
 800b4a6:	77fb      	strb	r3, [r7, #31]
 800b4a8:	e09e      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b4aa:	2304      	movs	r3, #4
 800b4ac:	77fb      	strb	r3, [r7, #31]
 800b4ae:	e09b      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b4b0:	2308      	movs	r3, #8
 800b4b2:	77fb      	strb	r3, [r7, #31]
 800b4b4:	e098      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b4b6:	2310      	movs	r3, #16
 800b4b8:	77fb      	strb	r3, [r7, #31]
 800b4ba:	e095      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a2f      	ldr	r2, [pc, #188]	; (800b580 <UART_SetConfig+0x2e0>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d125      	bne.n	800b512 <UART_SetConfig+0x272>
 800b4c6:	4b29      	ldr	r3, [pc, #164]	; (800b56c <UART_SetConfig+0x2cc>)
 800b4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b4d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4d4:	d017      	beq.n	800b506 <UART_SetConfig+0x266>
 800b4d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4da:	d817      	bhi.n	800b50c <UART_SetConfig+0x26c>
 800b4dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4e0:	d00b      	beq.n	800b4fa <UART_SetConfig+0x25a>
 800b4e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4e6:	d811      	bhi.n	800b50c <UART_SetConfig+0x26c>
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d003      	beq.n	800b4f4 <UART_SetConfig+0x254>
 800b4ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4f0:	d006      	beq.n	800b500 <UART_SetConfig+0x260>
 800b4f2:	e00b      	b.n	800b50c <UART_SetConfig+0x26c>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	77fb      	strb	r3, [r7, #31]
 800b4f8:	e076      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	77fb      	strb	r3, [r7, #31]
 800b4fe:	e073      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b500:	2304      	movs	r3, #4
 800b502:	77fb      	strb	r3, [r7, #31]
 800b504:	e070      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b506:	2308      	movs	r3, #8
 800b508:	77fb      	strb	r3, [r7, #31]
 800b50a:	e06d      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b50c:	2310      	movs	r3, #16
 800b50e:	77fb      	strb	r3, [r7, #31]
 800b510:	e06a      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a1b      	ldr	r2, [pc, #108]	; (800b584 <UART_SetConfig+0x2e4>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d138      	bne.n	800b58e <UART_SetConfig+0x2ee>
 800b51c:	4b13      	ldr	r3, [pc, #76]	; (800b56c <UART_SetConfig+0x2cc>)
 800b51e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b522:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b526:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b52a:	d017      	beq.n	800b55c <UART_SetConfig+0x2bc>
 800b52c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b530:	d82a      	bhi.n	800b588 <UART_SetConfig+0x2e8>
 800b532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b536:	d00b      	beq.n	800b550 <UART_SetConfig+0x2b0>
 800b538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b53c:	d824      	bhi.n	800b588 <UART_SetConfig+0x2e8>
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d003      	beq.n	800b54a <UART_SetConfig+0x2aa>
 800b542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b546:	d006      	beq.n	800b556 <UART_SetConfig+0x2b6>
 800b548:	e01e      	b.n	800b588 <UART_SetConfig+0x2e8>
 800b54a:	2300      	movs	r3, #0
 800b54c:	77fb      	strb	r3, [r7, #31]
 800b54e:	e04b      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b550:	2302      	movs	r3, #2
 800b552:	77fb      	strb	r3, [r7, #31]
 800b554:	e048      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b556:	2304      	movs	r3, #4
 800b558:	77fb      	strb	r3, [r7, #31]
 800b55a:	e045      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b55c:	2308      	movs	r3, #8
 800b55e:	77fb      	strb	r3, [r7, #31]
 800b560:	e042      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b562:	bf00      	nop
 800b564:	efff69f3 	.word	0xefff69f3
 800b568:	40011000 	.word	0x40011000
 800b56c:	40023800 	.word	0x40023800
 800b570:	40004400 	.word	0x40004400
 800b574:	40004800 	.word	0x40004800
 800b578:	40004c00 	.word	0x40004c00
 800b57c:	40005000 	.word	0x40005000
 800b580:	40011400 	.word	0x40011400
 800b584:	40007800 	.word	0x40007800
 800b588:	2310      	movs	r3, #16
 800b58a:	77fb      	strb	r3, [r7, #31]
 800b58c:	e02c      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a72      	ldr	r2, [pc, #456]	; (800b75c <UART_SetConfig+0x4bc>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d125      	bne.n	800b5e4 <UART_SetConfig+0x344>
 800b598:	4b71      	ldr	r3, [pc, #452]	; (800b760 <UART_SetConfig+0x4c0>)
 800b59a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b59e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b5a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5a6:	d017      	beq.n	800b5d8 <UART_SetConfig+0x338>
 800b5a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b5ac:	d817      	bhi.n	800b5de <UART_SetConfig+0x33e>
 800b5ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5b2:	d00b      	beq.n	800b5cc <UART_SetConfig+0x32c>
 800b5b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5b8:	d811      	bhi.n	800b5de <UART_SetConfig+0x33e>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d003      	beq.n	800b5c6 <UART_SetConfig+0x326>
 800b5be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5c2:	d006      	beq.n	800b5d2 <UART_SetConfig+0x332>
 800b5c4:	e00b      	b.n	800b5de <UART_SetConfig+0x33e>
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	77fb      	strb	r3, [r7, #31]
 800b5ca:	e00d      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	77fb      	strb	r3, [r7, #31]
 800b5d0:	e00a      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b5d2:	2304      	movs	r3, #4
 800b5d4:	77fb      	strb	r3, [r7, #31]
 800b5d6:	e007      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b5d8:	2308      	movs	r3, #8
 800b5da:	77fb      	strb	r3, [r7, #31]
 800b5dc:	e004      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b5de:	2310      	movs	r3, #16
 800b5e0:	77fb      	strb	r3, [r7, #31]
 800b5e2:	e001      	b.n	800b5e8 <UART_SetConfig+0x348>
 800b5e4:	2310      	movs	r3, #16
 800b5e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	69db      	ldr	r3, [r3, #28]
 800b5ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5f0:	d15b      	bne.n	800b6aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b5f2:	7ffb      	ldrb	r3, [r7, #31]
 800b5f4:	2b08      	cmp	r3, #8
 800b5f6:	d828      	bhi.n	800b64a <UART_SetConfig+0x3aa>
 800b5f8:	a201      	add	r2, pc, #4	; (adr r2, 800b600 <UART_SetConfig+0x360>)
 800b5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fe:	bf00      	nop
 800b600:	0800b625 	.word	0x0800b625
 800b604:	0800b62d 	.word	0x0800b62d
 800b608:	0800b635 	.word	0x0800b635
 800b60c:	0800b64b 	.word	0x0800b64b
 800b610:	0800b63b 	.word	0x0800b63b
 800b614:	0800b64b 	.word	0x0800b64b
 800b618:	0800b64b 	.word	0x0800b64b
 800b61c:	0800b64b 	.word	0x0800b64b
 800b620:	0800b643 	.word	0x0800b643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b624:	f7fb ffe8 	bl	80075f8 <HAL_RCC_GetPCLK1Freq>
 800b628:	61b8      	str	r0, [r7, #24]
        break;
 800b62a:	e013      	b.n	800b654 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b62c:	f7fb fff8 	bl	8007620 <HAL_RCC_GetPCLK2Freq>
 800b630:	61b8      	str	r0, [r7, #24]
        break;
 800b632:	e00f      	b.n	800b654 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b634:	4b4b      	ldr	r3, [pc, #300]	; (800b764 <UART_SetConfig+0x4c4>)
 800b636:	61bb      	str	r3, [r7, #24]
        break;
 800b638:	e00c      	b.n	800b654 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b63a:	f7fb ff0b 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 800b63e:	61b8      	str	r0, [r7, #24]
        break;
 800b640:	e008      	b.n	800b654 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b646:	61bb      	str	r3, [r7, #24]
        break;
 800b648:	e004      	b.n	800b654 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b64a:	2300      	movs	r3, #0
 800b64c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	77bb      	strb	r3, [r7, #30]
        break;
 800b652:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b654:	69bb      	ldr	r3, [r7, #24]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d074      	beq.n	800b744 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	005a      	lsls	r2, r3, #1
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	085b      	lsrs	r3, r3, #1
 800b664:	441a      	add	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b66e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	2b0f      	cmp	r3, #15
 800b674:	d916      	bls.n	800b6a4 <UART_SetConfig+0x404>
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b67c:	d212      	bcs.n	800b6a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	b29b      	uxth	r3, r3
 800b682:	f023 030f 	bic.w	r3, r3, #15
 800b686:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	085b      	lsrs	r3, r3, #1
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	f003 0307 	and.w	r3, r3, #7
 800b692:	b29a      	uxth	r2, r3
 800b694:	89fb      	ldrh	r3, [r7, #14]
 800b696:	4313      	orrs	r3, r2
 800b698:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	89fa      	ldrh	r2, [r7, #14]
 800b6a0:	60da      	str	r2, [r3, #12]
 800b6a2:	e04f      	b.n	800b744 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	77bb      	strb	r3, [r7, #30]
 800b6a8:	e04c      	b.n	800b744 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6aa:	7ffb      	ldrb	r3, [r7, #31]
 800b6ac:	2b08      	cmp	r3, #8
 800b6ae:	d828      	bhi.n	800b702 <UART_SetConfig+0x462>
 800b6b0:	a201      	add	r2, pc, #4	; (adr r2, 800b6b8 <UART_SetConfig+0x418>)
 800b6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6b6:	bf00      	nop
 800b6b8:	0800b6dd 	.word	0x0800b6dd
 800b6bc:	0800b6e5 	.word	0x0800b6e5
 800b6c0:	0800b6ed 	.word	0x0800b6ed
 800b6c4:	0800b703 	.word	0x0800b703
 800b6c8:	0800b6f3 	.word	0x0800b6f3
 800b6cc:	0800b703 	.word	0x0800b703
 800b6d0:	0800b703 	.word	0x0800b703
 800b6d4:	0800b703 	.word	0x0800b703
 800b6d8:	0800b6fb 	.word	0x0800b6fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6dc:	f7fb ff8c 	bl	80075f8 <HAL_RCC_GetPCLK1Freq>
 800b6e0:	61b8      	str	r0, [r7, #24]
        break;
 800b6e2:	e013      	b.n	800b70c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b6e4:	f7fb ff9c 	bl	8007620 <HAL_RCC_GetPCLK2Freq>
 800b6e8:	61b8      	str	r0, [r7, #24]
        break;
 800b6ea:	e00f      	b.n	800b70c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b6ec:	4b1d      	ldr	r3, [pc, #116]	; (800b764 <UART_SetConfig+0x4c4>)
 800b6ee:	61bb      	str	r3, [r7, #24]
        break;
 800b6f0:	e00c      	b.n	800b70c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b6f2:	f7fb feaf 	bl	8007454 <HAL_RCC_GetSysClockFreq>
 800b6f6:	61b8      	str	r0, [r7, #24]
        break;
 800b6f8:	e008      	b.n	800b70c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6fe:	61bb      	str	r3, [r7, #24]
        break;
 800b700:	e004      	b.n	800b70c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b702:	2300      	movs	r3, #0
 800b704:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	77bb      	strb	r3, [r7, #30]
        break;
 800b70a:	bf00      	nop
    }

    if (pclk != 0U)
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d018      	beq.n	800b744 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	085a      	lsrs	r2, r3, #1
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	441a      	add	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	fbb2 f3f3 	udiv	r3, r2, r3
 800b724:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	2b0f      	cmp	r3, #15
 800b72a:	d909      	bls.n	800b740 <UART_SetConfig+0x4a0>
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b732:	d205      	bcs.n	800b740 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	b29a      	uxth	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	60da      	str	r2, [r3, #12]
 800b73e:	e001      	b.n	800b744 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b740:	2301      	movs	r3, #1
 800b742:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b750:	7fbb      	ldrb	r3, [r7, #30]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3720      	adds	r7, #32
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	40007c00 	.word	0x40007c00
 800b760:	40023800 	.word	0x40023800
 800b764:	00f42400 	.word	0x00f42400

0800b768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b768:	b480      	push	{r7}
 800b76a:	b083      	sub	sp, #12
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b774:	f003 0301 	and.w	r3, r3, #1
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00a      	beq.n	800b792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	430a      	orrs	r2, r1
 800b790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b796:	f003 0302 	and.w	r3, r3, #2
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00a      	beq.n	800b7b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	430a      	orrs	r2, r1
 800b7b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b8:	f003 0304 	and.w	r3, r3, #4
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00a      	beq.n	800b7d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	430a      	orrs	r2, r1
 800b7d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7da:	f003 0308 	and.w	r3, r3, #8
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00a      	beq.n	800b7f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	430a      	orrs	r2, r1
 800b7f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fc:	f003 0310 	and.w	r3, r3, #16
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00a      	beq.n	800b81a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	430a      	orrs	r2, r1
 800b818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81e:	f003 0320 	and.w	r3, r3, #32
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00a      	beq.n	800b83c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	430a      	orrs	r2, r1
 800b83a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b844:	2b00      	cmp	r3, #0
 800b846:	d01a      	beq.n	800b87e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	430a      	orrs	r2, r1
 800b85c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b866:	d10a      	bne.n	800b87e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	430a      	orrs	r2, r1
 800b87c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00a      	beq.n	800b8a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	430a      	orrs	r2, r1
 800b89e:	605a      	str	r2, [r3, #4]
  }
}
 800b8a0:	bf00      	nop
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af02      	add	r7, sp, #8
 800b8b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b8bc:	f7f7 fa7c 	bl	8002db8 <HAL_GetTick>
 800b8c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f003 0308 	and.w	r3, r3, #8
 800b8cc:	2b08      	cmp	r3, #8
 800b8ce:	d10e      	bne.n	800b8ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f817 	bl	800b912 <UART_WaitOnFlagUntilTimeout>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e00d      	b.n	800b90a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2220      	movs	r2, #32
 800b8f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2220      	movs	r2, #32
 800b8f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b09c      	sub	sp, #112	; 0x70
 800b916:	af00      	add	r7, sp, #0
 800b918:	60f8      	str	r0, [r7, #12]
 800b91a:	60b9      	str	r1, [r7, #8]
 800b91c:	603b      	str	r3, [r7, #0]
 800b91e:	4613      	mov	r3, r2
 800b920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b922:	e0a5      	b.n	800ba70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92a:	f000 80a1 	beq.w	800ba70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b92e:	f7f7 fa43 	bl	8002db8 <HAL_GetTick>
 800b932:	4602      	mov	r2, r0
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	1ad3      	subs	r3, r2, r3
 800b938:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d302      	bcc.n	800b944 <UART_WaitOnFlagUntilTimeout+0x32>
 800b93e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b940:	2b00      	cmp	r3, #0
 800b942:	d13e      	bne.n	800b9c2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b94c:	e853 3f00 	ldrex	r3, [r3]
 800b950:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b958:	667b      	str	r3, [r7, #100]	; 0x64
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	461a      	mov	r2, r3
 800b960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b962:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b964:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b966:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b968:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b96a:	e841 2300 	strex	r3, r2, [r1]
 800b96e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1e6      	bne.n	800b944 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	3308      	adds	r3, #8
 800b97c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b980:	e853 3f00 	ldrex	r3, [r3]
 800b984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b988:	f023 0301 	bic.w	r3, r3, #1
 800b98c:	663b      	str	r3, [r7, #96]	; 0x60
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	3308      	adds	r3, #8
 800b994:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b996:	64ba      	str	r2, [r7, #72]	; 0x48
 800b998:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b99c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b99e:	e841 2300 	strex	r3, r2, [r1]
 800b9a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1e5      	bne.n	800b976 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2220      	movs	r2, #32
 800b9ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2220      	movs	r2, #32
 800b9b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b9be:	2303      	movs	r3, #3
 800b9c0:	e067      	b.n	800ba92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 0304 	and.w	r3, r3, #4
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d04f      	beq.n	800ba70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b9da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9de:	d147      	bne.n	800ba70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	e853 3f00 	ldrex	r3, [r3]
 800b9f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b9fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	461a      	mov	r2, r3
 800ba06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba08:	637b      	str	r3, [r7, #52]	; 0x34
 800ba0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba10:	e841 2300 	strex	r3, r2, [r1]
 800ba14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1e6      	bne.n	800b9ea <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	3308      	adds	r3, #8
 800ba22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	e853 3f00 	ldrex	r3, [r3]
 800ba2a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	f023 0301 	bic.w	r3, r3, #1
 800ba32:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	3308      	adds	r3, #8
 800ba3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ba3c:	623a      	str	r2, [r7, #32]
 800ba3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba40:	69f9      	ldr	r1, [r7, #28]
 800ba42:	6a3a      	ldr	r2, [r7, #32]
 800ba44:	e841 2300 	strex	r3, r2, [r1]
 800ba48:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1e5      	bne.n	800ba1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2220      	movs	r2, #32
 800ba54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2220      	movs	r2, #32
 800ba5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2220      	movs	r2, #32
 800ba60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e010      	b.n	800ba92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	69da      	ldr	r2, [r3, #28]
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	4013      	ands	r3, r2
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	bf0c      	ite	eq
 800ba80:	2301      	moveq	r3, #1
 800ba82:	2300      	movne	r3, #0
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	461a      	mov	r2, r3
 800ba88:	79fb      	ldrb	r3, [r7, #7]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	f43f af4a 	beq.w	800b924 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3770      	adds	r7, #112	; 0x70
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
	...

0800ba9c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d121      	bne.n	800baf2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	4b27      	ldr	r3, [pc, #156]	; (800bb50 <FMC_SDRAM_Init+0xb4>)
 800bab4:	4013      	ands	r3, r2
 800bab6:	683a      	ldr	r2, [r7, #0]
 800bab8:	6851      	ldr	r1, [r2, #4]
 800baba:	683a      	ldr	r2, [r7, #0]
 800babc:	6892      	ldr	r2, [r2, #8]
 800babe:	4311      	orrs	r1, r2
 800bac0:	683a      	ldr	r2, [r7, #0]
 800bac2:	68d2      	ldr	r2, [r2, #12]
 800bac4:	4311      	orrs	r1, r2
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	6912      	ldr	r2, [r2, #16]
 800baca:	4311      	orrs	r1, r2
 800bacc:	683a      	ldr	r2, [r7, #0]
 800bace:	6952      	ldr	r2, [r2, #20]
 800bad0:	4311      	orrs	r1, r2
 800bad2:	683a      	ldr	r2, [r7, #0]
 800bad4:	6992      	ldr	r2, [r2, #24]
 800bad6:	4311      	orrs	r1, r2
 800bad8:	683a      	ldr	r2, [r7, #0]
 800bada:	69d2      	ldr	r2, [r2, #28]
 800badc:	4311      	orrs	r1, r2
 800bade:	683a      	ldr	r2, [r7, #0]
 800bae0:	6a12      	ldr	r2, [r2, #32]
 800bae2:	4311      	orrs	r1, r2
 800bae4:	683a      	ldr	r2, [r7, #0]
 800bae6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bae8:	430a      	orrs	r2, r1
 800baea:	431a      	orrs	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	601a      	str	r2, [r3, #0]
 800baf0:	e026      	b.n	800bb40 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	69d9      	ldr	r1, [r3, #28]
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	6a1b      	ldr	r3, [r3, #32]
 800bb02:	4319      	orrs	r1, r3
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb08:	430b      	orrs	r3, r1
 800bb0a:	431a      	orrs	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	685a      	ldr	r2, [r3, #4]
 800bb14:	4b0e      	ldr	r3, [pc, #56]	; (800bb50 <FMC_SDRAM_Init+0xb4>)
 800bb16:	4013      	ands	r3, r2
 800bb18:	683a      	ldr	r2, [r7, #0]
 800bb1a:	6851      	ldr	r1, [r2, #4]
 800bb1c:	683a      	ldr	r2, [r7, #0]
 800bb1e:	6892      	ldr	r2, [r2, #8]
 800bb20:	4311      	orrs	r1, r2
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	68d2      	ldr	r2, [r2, #12]
 800bb26:	4311      	orrs	r1, r2
 800bb28:	683a      	ldr	r2, [r7, #0]
 800bb2a:	6912      	ldr	r2, [r2, #16]
 800bb2c:	4311      	orrs	r1, r2
 800bb2e:	683a      	ldr	r2, [r7, #0]
 800bb30:	6952      	ldr	r2, [r2, #20]
 800bb32:	4311      	orrs	r1, r2
 800bb34:	683a      	ldr	r2, [r7, #0]
 800bb36:	6992      	ldr	r2, [r2, #24]
 800bb38:	430a      	orrs	r2, r1
 800bb3a:	431a      	orrs	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	370c      	adds	r7, #12
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	ffff8000 	.word	0xffff8000

0800bb54 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d128      	bne.n	800bbb8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	1e59      	subs	r1, r3, #1
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	011b      	lsls	r3, r3, #4
 800bb7c:	4319      	orrs	r1, r3
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	689b      	ldr	r3, [r3, #8]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	021b      	lsls	r3, r3, #8
 800bb86:	4319      	orrs	r1, r3
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	031b      	lsls	r3, r3, #12
 800bb90:	4319      	orrs	r1, r3
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	041b      	lsls	r3, r3, #16
 800bb9a:	4319      	orrs	r1, r3
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	3b01      	subs	r3, #1
 800bba2:	051b      	lsls	r3, r3, #20
 800bba4:	4319      	orrs	r1, r3
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	061b      	lsls	r3, r3, #24
 800bbae:	430b      	orrs	r3, r1
 800bbb0:	431a      	orrs	r2, r3
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	609a      	str	r2, [r3, #8]
 800bbb6:	e02d      	b.n	800bc14 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	689a      	ldr	r2, [r3, #8]
 800bbbc:	4b19      	ldr	r3, [pc, #100]	; (800bc24 <FMC_SDRAM_Timing_Init+0xd0>)
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	68ba      	ldr	r2, [r7, #8]
 800bbc2:	68d2      	ldr	r2, [r2, #12]
 800bbc4:	3a01      	subs	r2, #1
 800bbc6:	0311      	lsls	r1, r2, #12
 800bbc8:	68ba      	ldr	r2, [r7, #8]
 800bbca:	6952      	ldr	r2, [r2, #20]
 800bbcc:	3a01      	subs	r2, #1
 800bbce:	0512      	lsls	r2, r2, #20
 800bbd0:	430a      	orrs	r2, r1
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	1e59      	subs	r1, r3, #1
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	3b01      	subs	r3, #1
 800bbec:	011b      	lsls	r3, r3, #4
 800bbee:	4319      	orrs	r1, r3
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	021b      	lsls	r3, r3, #8
 800bbf8:	4319      	orrs	r1, r3
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	041b      	lsls	r3, r3, #16
 800bc02:	4319      	orrs	r1, r3
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	699b      	ldr	r3, [r3, #24]
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	061b      	lsls	r3, r3, #24
 800bc0c:	430b      	orrs	r3, r1
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800bc14:	2300      	movs	r3, #0
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3714      	adds	r7, #20
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	ff0f0fff 	.word	0xff0f0fff

0800bc28 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bc28:	b084      	sub	sp, #16
 800bc2a:	b480      	push	{r7}
 800bc2c:	b085      	sub	sp, #20
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
 800bc32:	f107 001c 	add.w	r0, r7, #28
 800bc36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bc3e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bc40:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bc42:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800bc46:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800bc4a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800bc4e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800bc52:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	685a      	ldr	r2, [r3, #4]
 800bc5e:	4b07      	ldr	r3, [pc, #28]	; (800bc7c <SDMMC_Init+0x54>)
 800bc60:	4013      	ands	r3, r2
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	431a      	orrs	r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3714      	adds	r7, #20
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	b004      	add	sp, #16
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	ffff8100 	.word	0xffff8100

0800bc80 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	370c      	adds	r7, #12
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr

0800bc9a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bc9a:	b480      	push	{r7}
 800bc9c:	b083      	sub	sp, #12
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2203      	movs	r2, #3
 800bca6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	370c      	adds	r7, #12
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr

0800bcb6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bcb6:	b480      	push	{r7}
 800bcb8:	b083      	sub	sp, #12
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f003 0303 	and.w	r3, r3, #3
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	370c      	adds	r7, #12
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
	...

0800bcd4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bcf2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bcf8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bcfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	68da      	ldr	r2, [r3, #12]
 800bd0a:	4b06      	ldr	r3, [pc, #24]	; (800bd24 <SDMMC_SendCommand+0x50>)
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	431a      	orrs	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3714      	adds	r7, #20
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	fffff000 	.word	0xfffff000

0800bd28 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	b2db      	uxtb	r3, r3
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	370c      	adds	r7, #12
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr

0800bd42 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b085      	sub	sp, #20
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	3314      	adds	r3, #20
 800bd50:	461a      	mov	r2, r3
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	4413      	add	r3, r2
 800bd56:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
}  
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3714      	adds	r7, #20
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bd72:	2300      	movs	r3, #0
 800bd74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd8e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800bd94:	431a      	orrs	r2, r3
                       Data->DPSM);
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800bd9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	431a      	orrs	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800bdb2:	2300      	movs	r3, #0

}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3714      	adds	r7, #20
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800bdce:	2310      	movs	r3, #16
 800bdd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdd2:	2340      	movs	r3, #64	; 0x40
 800bdd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bde0:	f107 0308 	add.w	r3, r7, #8
 800bde4:	4619      	mov	r1, r3
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7ff ff74 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bdec:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdf0:	2110      	movs	r1, #16
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 fa1a 	bl	800c22c <SDMMC_GetCmdResp1>
 800bdf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdfa:	69fb      	ldr	r3, [r7, #28]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3720      	adds	r7, #32
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b088      	sub	sp, #32
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800be12:	2311      	movs	r3, #17
 800be14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be16:	2340      	movs	r3, #64	; 0x40
 800be18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be1a:	2300      	movs	r3, #0
 800be1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be24:	f107 0308 	add.w	r3, r7, #8
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f7ff ff52 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800be30:	f241 3288 	movw	r2, #5000	; 0x1388
 800be34:	2111      	movs	r1, #17
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f9f8 	bl	800c22c <SDMMC_GetCmdResp1>
 800be3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be3e:	69fb      	ldr	r3, [r7, #28]
}
 800be40:	4618      	mov	r0, r3
 800be42:	3720      	adds	r7, #32
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b088      	sub	sp, #32
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800be56:	2312      	movs	r3, #18
 800be58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be5a:	2340      	movs	r3, #64	; 0x40
 800be5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be5e:	2300      	movs	r3, #0
 800be60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be68:	f107 0308 	add.w	r3, r7, #8
 800be6c:	4619      	mov	r1, r3
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f7ff ff30 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800be74:	f241 3288 	movw	r2, #5000	; 0x1388
 800be78:	2112      	movs	r1, #18
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f9d6 	bl	800c22c <SDMMC_GetCmdResp1>
 800be80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be82:	69fb      	ldr	r3, [r7, #28]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3720      	adds	r7, #32
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800be9a:	2318      	movs	r3, #24
 800be9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be9e:	2340      	movs	r3, #64	; 0x40
 800bea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bea2:	2300      	movs	r3, #0
 800bea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beac:	f107 0308 	add.w	r3, r7, #8
 800beb0:	4619      	mov	r1, r3
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7ff ff0e 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800beb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bebc:	2118      	movs	r1, #24
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f9b4 	bl	800c22c <SDMMC_GetCmdResp1>
 800bec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bec6:	69fb      	ldr	r3, [r7, #28]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3720      	adds	r7, #32
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}

0800bed0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b088      	sub	sp, #32
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bede:	2319      	movs	r3, #25
 800bee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bee2:	2340      	movs	r3, #64	; 0x40
 800bee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bee6:	2300      	movs	r3, #0
 800bee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800beea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bef0:	f107 0308 	add.w	r3, r7, #8
 800bef4:	4619      	mov	r1, r3
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7ff feec 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800befc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf00:	2119      	movs	r1, #25
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 f992 	bl	800c22c <SDMMC_GetCmdResp1>
 800bf08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf0a:	69fb      	ldr	r3, [r7, #28]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3720      	adds	r7, #32
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bf20:	230c      	movs	r3, #12
 800bf22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf24:	2340      	movs	r3, #64	; 0x40
 800bf26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf32:	f107 0308 	add.w	r3, r7, #8
 800bf36:	4619      	mov	r1, r3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f7ff fecb 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bf3e:	4a05      	ldr	r2, [pc, #20]	; (800bf54 <SDMMC_CmdStopTransfer+0x40>)
 800bf40:	210c      	movs	r1, #12
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 f972 	bl	800c22c <SDMMC_GetCmdResp1>
 800bf48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bf4a:	69fb      	ldr	r3, [r7, #28]
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3720      	adds	r7, #32
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	05f5e100 	.word	0x05f5e100

0800bf58 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b08a      	sub	sp, #40	; 0x28
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bf68:	2307      	movs	r3, #7
 800bf6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bf6c:	2340      	movs	r3, #64	; 0x40
 800bf6e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bf74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf78:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bf7a:	f107 0310 	add.w	r3, r7, #16
 800bf7e:	4619      	mov	r1, r3
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f7ff fea7 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bf86:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf8a:	2107      	movs	r1, #7
 800bf8c:	68f8      	ldr	r0, [r7, #12]
 800bf8e:	f000 f94d 	bl	800c22c <SDMMC_GetCmdResp1>
 800bf92:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3728      	adds	r7, #40	; 0x28
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b088      	sub	sp, #32
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bfb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bfbc:	f107 0308 	add.w	r3, r7, #8
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7ff fe86 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 fb67 	bl	800c69c <SDMMC_GetCmdError>
 800bfce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bfd0:	69fb      	ldr	r3, [r7, #28]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3720      	adds	r7, #32
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b088      	sub	sp, #32
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bfe2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bfe6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bfe8:	2308      	movs	r3, #8
 800bfea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bfec:	2340      	movs	r3, #64	; 0x40
 800bfee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bff0:	2300      	movs	r3, #0
 800bff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bff8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bffa:	f107 0308 	add.w	r3, r7, #8
 800bffe:	4619      	mov	r1, r3
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f7ff fe67 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fafa 	bl	800c600 <SDMMC_GetCmdResp7>
 800c00c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c00e:	69fb      	ldr	r3, [r7, #28]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3720      	adds	r7, #32
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b088      	sub	sp, #32
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c026:	2337      	movs	r3, #55	; 0x37
 800c028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c02a:	2340      	movs	r3, #64	; 0x40
 800c02c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c02e:	2300      	movs	r3, #0
 800c030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c036:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c038:	f107 0308 	add.w	r3, r7, #8
 800c03c:	4619      	mov	r1, r3
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7ff fe48 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c044:	f241 3288 	movw	r2, #5000	; 0x1388
 800c048:	2137      	movs	r1, #55	; 0x37
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f8ee 	bl	800c22c <SDMMC_GetCmdResp1>
 800c050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c052:	69fb      	ldr	r3, [r7, #28]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3720      	adds	r7, #32
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b088      	sub	sp, #32
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	4b0d      	ldr	r3, [pc, #52]	; (800c0a0 <SDMMC_CmdAppOperCommand+0x44>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c06e:	2329      	movs	r3, #41	; 0x29
 800c070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c072:	2340      	movs	r3, #64	; 0x40
 800c074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c076:	2300      	movs	r3, #0
 800c078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c07a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c07e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c080:	f107 0308 	add.w	r3, r7, #8
 800c084:	4619      	mov	r1, r3
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f7ff fe24 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 fa03 	bl	800c498 <SDMMC_GetCmdResp3>
 800c092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c094:	69fb      	ldr	r3, [r7, #28]
}
 800c096:	4618      	mov	r0, r3
 800c098:	3720      	adds	r7, #32
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	80100000 	.word	0x80100000

0800c0a4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b088      	sub	sp, #32
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c0b2:	2306      	movs	r3, #6
 800c0b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0b6:	2340      	movs	r3, #64	; 0x40
 800c0b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0c4:	f107 0308 	add.w	r3, r7, #8
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff fe02 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c0d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0d4:	2106      	movs	r1, #6
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f8a8 	bl	800c22c <SDMMC_GetCmdResp1>
 800c0dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0de:	69fb      	ldr	r3, [r7, #28]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3720      	adds	r7, #32
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b088      	sub	sp, #32
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c0f4:	2333      	movs	r3, #51	; 0x33
 800c0f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0f8:	2340      	movs	r3, #64	; 0x40
 800c0fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c104:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c106:	f107 0308 	add.w	r3, r7, #8
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7ff fde1 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c112:	f241 3288 	movw	r2, #5000	; 0x1388
 800c116:	2133      	movs	r1, #51	; 0x33
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 f887 	bl	800c22c <SDMMC_GetCmdResp1>
 800c11e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c120:	69fb      	ldr	r3, [r7, #28]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3720      	adds	r7, #32
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c12a:	b580      	push	{r7, lr}
 800c12c:	b088      	sub	sp, #32
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c132:	2300      	movs	r3, #0
 800c134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c136:	2302      	movs	r3, #2
 800c138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c13a:	23c0      	movs	r3, #192	; 0xc0
 800c13c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c13e:	2300      	movs	r3, #0
 800c140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c146:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c148:	f107 0308 	add.w	r3, r7, #8
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f7ff fdc0 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 f957 	bl	800c408 <SDMMC_GetCmdResp2>
 800c15a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c15c:	69fb      	ldr	r3, [r7, #28]
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3720      	adds	r7, #32
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b088      	sub	sp, #32
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c174:	2309      	movs	r3, #9
 800c176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c178:	23c0      	movs	r3, #192	; 0xc0
 800c17a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c17c:	2300      	movs	r3, #0
 800c17e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c184:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c186:	f107 0308 	add.w	r3, r7, #8
 800c18a:	4619      	mov	r1, r3
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff fda1 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 f938 	bl	800c408 <SDMMC_GetCmdResp2>
 800c198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c19a:	69fb      	ldr	r3, [r7, #28]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3720      	adds	r7, #32
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b088      	sub	sp, #32
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1b6:	2340      	movs	r3, #64	; 0x40
 800c1b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1c4:	f107 0308 	add.w	r3, r7, #8
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff fd82 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	2103      	movs	r1, #3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 f99d 	bl	800c514 <SDMMC_GetCmdResp6>
 800c1da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1dc:	69fb      	ldr	r3, [r7, #28]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3720      	adds	r7, #32
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b088      	sub	sp, #32
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c1f4:	230d      	movs	r3, #13
 800c1f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1f8:	2340      	movs	r3, #64	; 0x40
 800c1fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c204:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c206:	f107 0308 	add.w	r3, r7, #8
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff fd61 	bl	800bcd4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c212:	f241 3288 	movw	r2, #5000	; 0x1388
 800c216:	210d      	movs	r1, #13
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 f807 	bl	800c22c <SDMMC_GetCmdResp1>
 800c21e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c220:	69fb      	ldr	r3, [r7, #28]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3720      	adds	r7, #32
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
	...

0800c22c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b088      	sub	sp, #32
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	460b      	mov	r3, r1
 800c236:	607a      	str	r2, [r7, #4]
 800c238:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c23a:	4b70      	ldr	r3, [pc, #448]	; (800c3fc <SDMMC_GetCmdResp1+0x1d0>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a70      	ldr	r2, [pc, #448]	; (800c400 <SDMMC_GetCmdResp1+0x1d4>)
 800c240:	fba2 2303 	umull	r2, r3, r2, r3
 800c244:	0a5a      	lsrs	r2, r3, #9
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	fb02 f303 	mul.w	r3, r2, r3
 800c24c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	1e5a      	subs	r2, r3, #1
 800c252:	61fa      	str	r2, [r7, #28]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d102      	bne.n	800c25e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c258:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c25c:	e0c9      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c262:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d0ef      	beq.n	800c24e <SDMMC_GetCmdResp1+0x22>
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1ea      	bne.n	800c24e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c27c:	f003 0304 	and.w	r3, r3, #4
 800c280:	2b00      	cmp	r3, #0
 800c282:	d004      	beq.n	800c28e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2204      	movs	r2, #4
 800c288:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c28a:	2304      	movs	r3, #4
 800c28c:	e0b1      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d004      	beq.n	800c2a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2201      	movs	r2, #1
 800c29e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e0a6      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	22c5      	movs	r2, #197	; 0xc5
 800c2a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f7ff fd3c 	bl	800bd28 <SDMMC_GetCommandResponse>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	7afb      	ldrb	r3, [r7, #11]
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d001      	beq.n	800c2be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e099      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c2be:	2100      	movs	r1, #0
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f7ff fd3e 	bl	800bd42 <SDMMC_GetResponse>
 800c2c6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	4b4e      	ldr	r3, [pc, #312]	; (800c404 <SDMMC_GetCmdResp1+0x1d8>)
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d101      	bne.n	800c2d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	e08d      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	da02      	bge.n	800c2e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c2dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2e0:	e087      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c2ec:	2340      	movs	r3, #64	; 0x40
 800c2ee:	e080      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c2fa:	2380      	movs	r3, #128	; 0x80
 800c2fc:	e079      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c304:	2b00      	cmp	r3, #0
 800c306:	d002      	beq.n	800c30e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c30c:	e071      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c314:	2b00      	cmp	r3, #0
 800c316:	d002      	beq.n	800c31e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c31c:	e069      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c324:	2b00      	cmp	r3, #0
 800c326:	d002      	beq.n	800c32e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c32c:	e061      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c334:	2b00      	cmp	r3, #0
 800c336:	d002      	beq.n	800c33e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c338:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c33c:	e059      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c344:	2b00      	cmp	r3, #0
 800c346:	d002      	beq.n	800c34e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c34c:	e051      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c354:	2b00      	cmp	r3, #0
 800c356:	d002      	beq.n	800c35e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c35c:	e049      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c36c:	e041      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c36e:	697b      	ldr	r3, [r7, #20]
 800c370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c37c:	e039      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c384:	2b00      	cmp	r3, #0
 800c386:	d002      	beq.n	800c38e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c388:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c38c:	e031      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c394:	2b00      	cmp	r3, #0
 800c396:	d002      	beq.n	800c39e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c398:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c39c:	e029      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d002      	beq.n	800c3ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c3a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c3ac:	e021      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c3b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c3bc:	e019      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c3c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c3cc:	e011      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d002      	beq.n	800c3de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c3d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c3dc:	e009      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f003 0308 	and.w	r3, r3, #8
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c3e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c3ec:	e001      	b.n	800c3f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c3ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3720      	adds	r7, #32
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
 800c3fa:	bf00      	nop
 800c3fc:	20000000 	.word	0x20000000
 800c400:	10624dd3 	.word	0x10624dd3
 800c404:	fdffe008 	.word	0xfdffe008

0800c408 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c410:	4b1f      	ldr	r3, [pc, #124]	; (800c490 <SDMMC_GetCmdResp2+0x88>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a1f      	ldr	r2, [pc, #124]	; (800c494 <SDMMC_GetCmdResp2+0x8c>)
 800c416:	fba2 2303 	umull	r2, r3, r2, r3
 800c41a:	0a5b      	lsrs	r3, r3, #9
 800c41c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c420:	fb02 f303 	mul.w	r3, r2, r3
 800c424:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	1e5a      	subs	r2, r3, #1
 800c42a:	60fa      	str	r2, [r7, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d102      	bne.n	800c436 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c430:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c434:	e026      	b.n	800c484 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c442:	2b00      	cmp	r3, #0
 800c444:	d0ef      	beq.n	800c426 <SDMMC_GetCmdResp2+0x1e>
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1ea      	bne.n	800c426 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c454:	f003 0304 	and.w	r3, r3, #4
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d004      	beq.n	800c466 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2204      	movs	r2, #4
 800c460:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c462:	2304      	movs	r3, #4
 800c464:	e00e      	b.n	800c484 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c46a:	f003 0301 	and.w	r3, r3, #1
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d004      	beq.n	800c47c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2201      	movs	r2, #1
 800c476:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c478:	2301      	movs	r3, #1
 800c47a:	e003      	b.n	800c484 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	22c5      	movs	r2, #197	; 0xc5
 800c480:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c482:	2300      	movs	r3, #0
}
 800c484:	4618      	mov	r0, r3
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr
 800c490:	20000000 	.word	0x20000000
 800c494:	10624dd3 	.word	0x10624dd3

0800c498 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c4a0:	4b1a      	ldr	r3, [pc, #104]	; (800c50c <SDMMC_GetCmdResp3+0x74>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a1a      	ldr	r2, [pc, #104]	; (800c510 <SDMMC_GetCmdResp3+0x78>)
 800c4a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c4aa:	0a5b      	lsrs	r3, r3, #9
 800c4ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4b0:	fb02 f303 	mul.w	r3, r2, r3
 800c4b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	1e5a      	subs	r2, r3, #1
 800c4ba:	60fa      	str	r2, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d102      	bne.n	800c4c6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4c4:	e01b      	b.n	800c4fe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d0ef      	beq.n	800c4b6 <SDMMC_GetCmdResp3+0x1e>
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d1ea      	bne.n	800c4b6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e4:	f003 0304 	and.w	r3, r3, #4
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d004      	beq.n	800c4f6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2204      	movs	r2, #4
 800c4f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4f2:	2304      	movs	r3, #4
 800c4f4:	e003      	b.n	800c4fe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	22c5      	movs	r2, #197	; 0xc5
 800c4fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3714      	adds	r7, #20
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr
 800c50a:	bf00      	nop
 800c50c:	20000000 	.word	0x20000000
 800c510:	10624dd3 	.word	0x10624dd3

0800c514 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b088      	sub	sp, #32
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	460b      	mov	r3, r1
 800c51e:	607a      	str	r2, [r7, #4]
 800c520:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c522:	4b35      	ldr	r3, [pc, #212]	; (800c5f8 <SDMMC_GetCmdResp6+0xe4>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a35      	ldr	r2, [pc, #212]	; (800c5fc <SDMMC_GetCmdResp6+0xe8>)
 800c528:	fba2 2303 	umull	r2, r3, r2, r3
 800c52c:	0a5b      	lsrs	r3, r3, #9
 800c52e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c532:	fb02 f303 	mul.w	r3, r2, r3
 800c536:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	1e5a      	subs	r2, r3, #1
 800c53c:	61fa      	str	r2, [r7, #28]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d102      	bne.n	800c548 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c542:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c546:	e052      	b.n	800c5ee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c54c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c554:	2b00      	cmp	r3, #0
 800c556:	d0ef      	beq.n	800c538 <SDMMC_GetCmdResp6+0x24>
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1ea      	bne.n	800c538 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c566:	f003 0304 	and.w	r3, r3, #4
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d004      	beq.n	800c578 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2204      	movs	r2, #4
 800c572:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c574:	2304      	movs	r3, #4
 800c576:	e03a      	b.n	800c5ee <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c57c:	f003 0301 	and.w	r3, r3, #1
 800c580:	2b00      	cmp	r3, #0
 800c582:	d004      	beq.n	800c58e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2201      	movs	r2, #1
 800c588:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c58a:	2301      	movs	r3, #1
 800c58c:	e02f      	b.n	800c5ee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f7ff fbca 	bl	800bd28 <SDMMC_GetCommandResponse>
 800c594:	4603      	mov	r3, r0
 800c596:	461a      	mov	r2, r3
 800c598:	7afb      	ldrb	r3, [r7, #11]
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d001      	beq.n	800c5a2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e025      	b.n	800c5ee <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	22c5      	movs	r2, #197	; 0xc5
 800c5a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f7ff fbc9 	bl	800bd42 <SDMMC_GetResponse>
 800c5b0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d106      	bne.n	800c5ca <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	0c1b      	lsrs	r3, r3, #16
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	e011      	b.n	800c5ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c5d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c5d8:	e009      	b.n	800c5ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d002      	beq.n	800c5ea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c5e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5e8:	e001      	b.n	800c5ee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c5ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3720      	adds	r7, #32
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20000000 	.word	0x20000000
 800c5fc:	10624dd3 	.word	0x10624dd3

0800c600 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c600:	b480      	push	{r7}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c608:	4b22      	ldr	r3, [pc, #136]	; (800c694 <SDMMC_GetCmdResp7+0x94>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a22      	ldr	r2, [pc, #136]	; (800c698 <SDMMC_GetCmdResp7+0x98>)
 800c60e:	fba2 2303 	umull	r2, r3, r2, r3
 800c612:	0a5b      	lsrs	r3, r3, #9
 800c614:	f241 3288 	movw	r2, #5000	; 0x1388
 800c618:	fb02 f303 	mul.w	r3, r2, r3
 800c61c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	1e5a      	subs	r2, r3, #1
 800c622:	60fa      	str	r2, [r7, #12]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c628:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c62c:	e02c      	b.n	800c688 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c632:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d0ef      	beq.n	800c61e <SDMMC_GetCmdResp7+0x1e>
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1ea      	bne.n	800c61e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c64c:	f003 0304 	and.w	r3, r3, #4
 800c650:	2b00      	cmp	r3, #0
 800c652:	d004      	beq.n	800c65e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2204      	movs	r2, #4
 800c658:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c65a:	2304      	movs	r3, #4
 800c65c:	e014      	b.n	800c688 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	2b00      	cmp	r3, #0
 800c668:	d004      	beq.n	800c674 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2201      	movs	r2, #1
 800c66e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c670:	2301      	movs	r3, #1
 800c672:	e009      	b.n	800c688 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2240      	movs	r2, #64	; 0x40
 800c684:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c686:	2300      	movs	r3, #0
  
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3714      	adds	r7, #20
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr
 800c694:	20000000 	.word	0x20000000
 800c698:	10624dd3 	.word	0x10624dd3

0800c69c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c6a4:	4b11      	ldr	r3, [pc, #68]	; (800c6ec <SDMMC_GetCmdError+0x50>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a11      	ldr	r2, [pc, #68]	; (800c6f0 <SDMMC_GetCmdError+0x54>)
 800c6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ae:	0a5b      	lsrs	r3, r3, #9
 800c6b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6b4:	fb02 f303 	mul.w	r3, r2, r3
 800c6b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	1e5a      	subs	r2, r3, #1
 800c6be:	60fa      	str	r2, [r7, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d102      	bne.n	800c6ca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c6c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6c8:	e009      	b.n	800c6de <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d0f1      	beq.n	800c6ba <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	22c5      	movs	r2, #197	; 0xc5
 800c6da:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	20000000 	.word	0x20000000
 800c6f0:	10624dd3 	.word	0x10624dd3

0800c6f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6f4:	b084      	sub	sp, #16
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b084      	sub	sp, #16
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	f107 001c 	add.w	r0, r7, #28
 800c702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d120      	bne.n	800c74e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c710:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68da      	ldr	r2, [r3, #12]
 800c71c:	4b20      	ldr	r3, [pc, #128]	; (800c7a0 <USB_CoreInit+0xac>)
 800c71e:	4013      	ands	r3, r2
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c732:	2b01      	cmp	r3, #1
 800c734:	d105      	bne.n	800c742 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 f9b4 	bl	800cab0 <USB_CoreReset>
 800c748:	4603      	mov	r3, r0
 800c74a:	73fb      	strb	r3, [r7, #15]
 800c74c:	e010      	b.n	800c770 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f9a8 	bl	800cab0 <USB_CoreReset>
 800c760:	4603      	mov	r3, r0
 800c762:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c768:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	2b01      	cmp	r3, #1
 800c774:	d10b      	bne.n	800c78e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	f043 0206 	orr.w	r2, r3, #6
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	f043 0220 	orr.w	r2, r3, #32
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c79a:	b004      	add	sp, #16
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	ffbdffbf 	.word	0xffbdffbf

0800c7a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	f043 0201 	orr.w	r2, r3, #1
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	370c      	adds	r7, #12
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b083      	sub	sp, #12
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	689b      	ldr	r3, [r3, #8]
 800c7d2:	f023 0201 	bic.w	r2, r3, #1
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	68db      	ldr	r3, [r3, #12]
 800c7fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c804:	78fb      	ldrb	r3, [r7, #3]
 800c806:	2b01      	cmp	r3, #1
 800c808:	d115      	bne.n	800c836 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c816:	2001      	movs	r0, #1
 800c818:	f7f6 fada 	bl	8002dd0 <HAL_Delay>
      ms++;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3301      	adds	r3, #1
 800c820:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f935 	bl	800ca92 <USB_GetMode>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d01e      	beq.n	800c86c <USB_SetCurrentMode+0x84>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2b31      	cmp	r3, #49	; 0x31
 800c832:	d9f0      	bls.n	800c816 <USB_SetCurrentMode+0x2e>
 800c834:	e01a      	b.n	800c86c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c836:	78fb      	ldrb	r3, [r7, #3]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d115      	bne.n	800c868 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c848:	2001      	movs	r0, #1
 800c84a:	f7f6 fac1 	bl	8002dd0 <HAL_Delay>
      ms++;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	3301      	adds	r3, #1
 800c852:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f91c 	bl	800ca92 <USB_GetMode>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d005      	beq.n	800c86c <USB_SetCurrentMode+0x84>
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	2b31      	cmp	r3, #49	; 0x31
 800c864:	d9f0      	bls.n	800c848 <USB_SetCurrentMode+0x60>
 800c866:	e001      	b.n	800c86c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	e005      	b.n	800c878 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2b32      	cmp	r3, #50	; 0x32
 800c870:	d101      	bne.n	800c876 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	e000      	b.n	800c878 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c88a:	2300      	movs	r3, #0
 800c88c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3301      	adds	r3, #1
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	4a12      	ldr	r2, [pc, #72]	; (800c8e0 <USB_FlushTxFifo+0x60>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d901      	bls.n	800c89e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	e01a      	b.n	800c8d4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	691b      	ldr	r3, [r3, #16]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	daf3      	bge.n	800c88e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	019b      	lsls	r3, r3, #6
 800c8ae:	f043 0220 	orr.w	r2, r3, #32
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	60fb      	str	r3, [r7, #12]
 800c8bc:	4a08      	ldr	r2, [pc, #32]	; (800c8e0 <USB_FlushTxFifo+0x60>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d901      	bls.n	800c8c6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	e006      	b.n	800c8d4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	691b      	ldr	r3, [r3, #16]
 800c8ca:	f003 0320 	and.w	r3, r3, #32
 800c8ce:	2b20      	cmp	r3, #32
 800c8d0:	d0f1      	beq.n	800c8b6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3714      	adds	r7, #20
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	00030d40 	.word	0x00030d40

0800c8e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	60fb      	str	r3, [r7, #12]
 800c8f6:	4a11      	ldr	r2, [pc, #68]	; (800c93c <USB_FlushRxFifo+0x58>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d901      	bls.n	800c900 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e017      	b.n	800c930 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	2b00      	cmp	r3, #0
 800c906:	daf3      	bge.n	800c8f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c908:	2300      	movs	r3, #0
 800c90a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2210      	movs	r2, #16
 800c910:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	3301      	adds	r3, #1
 800c916:	60fb      	str	r3, [r7, #12]
 800c918:	4a08      	ldr	r2, [pc, #32]	; (800c93c <USB_FlushRxFifo+0x58>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d901      	bls.n	800c922 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800c91e:	2303      	movs	r3, #3
 800c920:	e006      	b.n	800c930 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	f003 0310 	and.w	r3, r3, #16
 800c92a:	2b10      	cmp	r3, #16
 800c92c:	d0f1      	beq.n	800c912 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	00030d40 	.word	0x00030d40

0800c940 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c940:	b480      	push	{r7}
 800c942:	b089      	sub	sp, #36	; 0x24
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	4611      	mov	r1, r2
 800c94c:	461a      	mov	r2, r3
 800c94e:	460b      	mov	r3, r1
 800c950:	71fb      	strb	r3, [r7, #7]
 800c952:	4613      	mov	r3, r2
 800c954:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c95e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c962:	2b00      	cmp	r3, #0
 800c964:	d123      	bne.n	800c9ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c966:	88bb      	ldrh	r3, [r7, #4]
 800c968:	3303      	adds	r3, #3
 800c96a:	089b      	lsrs	r3, r3, #2
 800c96c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c96e:	2300      	movs	r3, #0
 800c970:	61bb      	str	r3, [r7, #24]
 800c972:	e018      	b.n	800c9a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c974:	79fb      	ldrb	r3, [r7, #7]
 800c976:	031a      	lsls	r2, r3, #12
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	4413      	add	r3, r2
 800c97c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c980:	461a      	mov	r2, r3
 800c982:	69fb      	ldr	r3, [r7, #28]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	3301      	adds	r3, #1
 800c98c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	3301      	adds	r3, #1
 800c992:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	3301      	adds	r3, #1
 800c998:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	3301      	adds	r3, #1
 800c99e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	61bb      	str	r3, [r7, #24]
 800c9a6:	69ba      	ldr	r2, [r7, #24]
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d3e2      	bcc.n	800c974 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c9ae:	2300      	movs	r3, #0
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3724      	adds	r7, #36	; 0x24
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b08b      	sub	sp, #44	; 0x2c
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c9d2:	88fb      	ldrh	r3, [r7, #6]
 800c9d4:	089b      	lsrs	r3, r3, #2
 800c9d6:	b29b      	uxth	r3, r3
 800c9d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c9da:	88fb      	ldrh	r3, [r7, #6]
 800c9dc:	f003 0303 	and.w	r3, r3, #3
 800c9e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	623b      	str	r3, [r7, #32]
 800c9e6:	e014      	b.n	800ca12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	601a      	str	r2, [r3, #0]
    pDest++;
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	3301      	adds	r3, #1
 800ca04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ca06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca08:	3301      	adds	r3, #1
 800ca0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ca0c:	6a3b      	ldr	r3, [r7, #32]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	623b      	str	r3, [r7, #32]
 800ca12:	6a3a      	ldr	r2, [r7, #32]
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d3e6      	bcc.n	800c9e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ca1a:	8bfb      	ldrh	r3, [r7, #30]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d01e      	beq.n	800ca5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ca20:	2300      	movs	r3, #0
 800ca22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	f107 0310 	add.w	r3, r7, #16
 800ca30:	6812      	ldr	r2, [r2, #0]
 800ca32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ca34:	693a      	ldr	r2, [r7, #16]
 800ca36:	6a3b      	ldr	r3, [r7, #32]
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca44:	701a      	strb	r2, [r3, #0]
      i++;
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	623b      	str	r3, [r7, #32]
      pDest++;
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4e:	3301      	adds	r3, #1
 800ca50:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ca52:	8bfb      	ldrh	r3, [r7, #30]
 800ca54:	3b01      	subs	r3, #1
 800ca56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ca58:	8bfb      	ldrh	r3, [r7, #30]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d1ea      	bne.n	800ca34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ca5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	372c      	adds	r7, #44	; 0x2c
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	695b      	ldr	r3, [r3, #20]
 800ca78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	699b      	ldr	r3, [r3, #24]
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	4013      	ands	r3, r2
 800ca82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ca84:	68fb      	ldr	r3, [r7, #12]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3714      	adds	r7, #20
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ca92:	b480      	push	{r7}
 800ca94:	b083      	sub	sp, #12
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	695b      	ldr	r3, [r3, #20]
 800ca9e:	f003 0301 	and.w	r3, r3, #1
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	370c      	adds	r7, #12
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
	...

0800cab0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b085      	sub	sp, #20
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cab8:	2300      	movs	r3, #0
 800caba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	3301      	adds	r3, #1
 800cac0:	60fb      	str	r3, [r7, #12]
 800cac2:	4a13      	ldr	r2, [pc, #76]	; (800cb10 <USB_CoreReset+0x60>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d901      	bls.n	800cacc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800cac8:	2303      	movs	r3, #3
 800caca:	e01a      	b.n	800cb02 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	daf3      	bge.n	800cabc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cad4:	2300      	movs	r3, #0
 800cad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	f043 0201 	orr.w	r2, r3, #1
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	3301      	adds	r3, #1
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	4a09      	ldr	r2, [pc, #36]	; (800cb10 <USB_CoreReset+0x60>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d901      	bls.n	800caf4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800caf0:	2303      	movs	r3, #3
 800caf2:	e006      	b.n	800cb02 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	f003 0301 	and.w	r3, r3, #1
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d0f1      	beq.n	800cae4 <USB_CoreReset+0x34>

  return HAL_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3714      	adds	r7, #20
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	00030d40 	.word	0x00030d40

0800cb14 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb14:	b084      	sub	sp, #16
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b086      	sub	sp, #24
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cb22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb34:	461a      	mov	r2, r3
 800cb36:	2300      	movs	r3, #0
 800cb38:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d018      	beq.n	800cb84 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d10a      	bne.n	800cb6e <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb66:	f043 0304 	orr.w	r3, r3, #4
 800cb6a:	6013      	str	r3, [r2, #0]
 800cb6c:	e014      	b.n	800cb98 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	68fa      	ldr	r2, [r7, #12]
 800cb78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb7c:	f023 0304 	bic.w	r3, r3, #4
 800cb80:	6013      	str	r3, [r2, #0]
 800cb82:	e009      	b.n	800cb98 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cb92:	f023 0304 	bic.w	r3, r3, #4
 800cb96:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb98:	2110      	movs	r1, #16
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f7ff fe70 	bl	800c880 <USB_FlushTxFifo>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7ff fe9a 	bl	800c8e4 <USB_FlushRxFifo>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d001      	beq.n	800cbba <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cbba:	2300      	movs	r3, #0
 800cbbc:	613b      	str	r3, [r7, #16]
 800cbbe:	e015      	b.n	800cbec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	015a      	lsls	r2, r3, #5
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbcc:	461a      	mov	r2, r3
 800cbce:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	015a      	lsls	r2, r3, #5
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	4413      	add	r3, r2
 800cbdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	613b      	str	r3, [r7, #16]
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d3e5      	bcc.n	800cbc0 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f04f 32ff 	mov.w	r2, #4294967295
 800cc00:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00b      	beq.n	800cc26 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc14:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4a13      	ldr	r2, [pc, #76]	; (800cc68 <USB_HostInit+0x154>)
 800cc1a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4a13      	ldr	r2, [pc, #76]	; (800cc6c <USB_HostInit+0x158>)
 800cc20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cc24:	e009      	b.n	800cc3a <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2280      	movs	r2, #128	; 0x80
 800cc2a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4a10      	ldr	r2, [pc, #64]	; (800cc70 <USB_HostInit+0x15c>)
 800cc30:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	4a0f      	ldr	r2, [pc, #60]	; (800cc74 <USB_HostInit+0x160>)
 800cc36:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d105      	bne.n	800cc4c <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	699b      	ldr	r3, [r3, #24]
 800cc44:	f043 0210 	orr.w	r2, r3, #16
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	699a      	ldr	r2, [r3, #24]
 800cc50:	4b09      	ldr	r3, [pc, #36]	; (800cc78 <USB_HostInit+0x164>)
 800cc52:	4313      	orrs	r3, r2
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800cc58:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3718      	adds	r7, #24
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cc64:	b004      	add	sp, #16
 800cc66:	4770      	bx	lr
 800cc68:	01000200 	.word	0x01000200
 800cc6c:	00e00300 	.word	0x00e00300
 800cc70:	00600080 	.word	0x00600080
 800cc74:	004000e0 	.word	0x004000e0
 800cc78:	a3200008 	.word	0xa3200008

0800cc7c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b085      	sub	sp, #20
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	460b      	mov	r3, r1
 800cc86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cc9a:	f023 0303 	bic.w	r3, r3, #3
 800cc9e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	78fb      	ldrb	r3, [r7, #3]
 800ccaa:	f003 0303 	and.w	r3, r3, #3
 800ccae:	68f9      	ldr	r1, [r7, #12]
 800ccb0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ccb8:	78fb      	ldrb	r3, [r7, #3]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d107      	bne.n	800ccce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ccca:	6053      	str	r3, [r2, #4]
 800cccc:	e009      	b.n	800cce2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ccce:	78fb      	ldrb	r3, [r7, #3]
 800ccd0:	2b02      	cmp	r3, #2
 800ccd2:	d106      	bne.n	800cce2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccda:	461a      	mov	r2, r3
 800ccdc:	f241 7370 	movw	r3, #6000	; 0x1770
 800cce0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cd10:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800cd20:	2064      	movs	r0, #100	; 0x64
 800cd22:	f7f6 f855 	bl	8002dd0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	68fa      	ldr	r2, [r7, #12]
 800cd2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd32:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800cd34:	200a      	movs	r0, #10
 800cd36:	f7f6 f84b 	bl	8002dd0 <HAL_Delay>

  return HAL_OK;
 800cd3a:	2300      	movs	r3, #0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cd54:	2300      	movs	r3, #0
 800cd56:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cd68:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d109      	bne.n	800cd88 <USB_DriveVbus+0x44>
 800cd74:	78fb      	ldrb	r3, [r7, #3]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d106      	bne.n	800cd88 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cd82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd86:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd92:	d109      	bne.n	800cda8 <USB_DriveVbus+0x64>
 800cd94:	78fb      	ldrb	r3, [r7, #3]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d106      	bne.n	800cda8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cda2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cda6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cda8:	2300      	movs	r3, #0
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb4:	4770      	bx	lr

0800cdb6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cdb6:	b480      	push	{r7}
 800cdb8:	b085      	sub	sp, #20
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	0c5b      	lsrs	r3, r3, #17
 800cdd4:	f003 0303 	and.w	r3, r3, #3
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3714      	adds	r7, #20
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	b29b      	uxth	r3, r3
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr
	...

0800ce08 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b088      	sub	sp, #32
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	4608      	mov	r0, r1
 800ce12:	4611      	mov	r1, r2
 800ce14:	461a      	mov	r2, r3
 800ce16:	4603      	mov	r3, r0
 800ce18:	70fb      	strb	r3, [r7, #3]
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	70bb      	strb	r3, [r7, #2]
 800ce1e:	4613      	mov	r3, r2
 800ce20:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ce2a:	78fb      	ldrb	r3, [r7, #3]
 800ce2c:	015a      	lsls	r2, r3, #5
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	4413      	add	r3, r2
 800ce32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce36:	461a      	mov	r2, r3
 800ce38:	f04f 33ff 	mov.w	r3, #4294967295
 800ce3c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ce3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ce42:	2b03      	cmp	r3, #3
 800ce44:	d87e      	bhi.n	800cf44 <USB_HC_Init+0x13c>
 800ce46:	a201      	add	r2, pc, #4	; (adr r2, 800ce4c <USB_HC_Init+0x44>)
 800ce48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce4c:	0800ce5d 	.word	0x0800ce5d
 800ce50:	0800cf07 	.word	0x0800cf07
 800ce54:	0800ce5d 	.word	0x0800ce5d
 800ce58:	0800cec9 	.word	0x0800cec9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ce5c:	78fb      	ldrb	r3, [r7, #3]
 800ce5e:	015a      	lsls	r2, r3, #5
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	4413      	add	r3, r2
 800ce64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce68:	461a      	mov	r2, r3
 800ce6a:	f240 439d 	movw	r3, #1181	; 0x49d
 800ce6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ce70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	da10      	bge.n	800ce9a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ce78:	78fb      	ldrb	r3, [r7, #3]
 800ce7a:	015a      	lsls	r2, r3, #5
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	4413      	add	r3, r2
 800ce80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	78fa      	ldrb	r2, [r7, #3]
 800ce88:	0151      	lsls	r1, r2, #5
 800ce8a:	693a      	ldr	r2, [r7, #16]
 800ce8c:	440a      	add	r2, r1
 800ce8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ce92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce96:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800ce98:	e057      	b.n	800cf4a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d051      	beq.n	800cf4a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800cea6:	78fb      	ldrb	r3, [r7, #3]
 800cea8:	015a      	lsls	r2, r3, #5
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	4413      	add	r3, r2
 800ceae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	78fa      	ldrb	r2, [r7, #3]
 800ceb6:	0151      	lsls	r1, r2, #5
 800ceb8:	693a      	ldr	r2, [r7, #16]
 800ceba:	440a      	add	r2, r1
 800cebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cec0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800cec4:	60d3      	str	r3, [r2, #12]
      break;
 800cec6:	e040      	b.n	800cf4a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cec8:	78fb      	ldrb	r3, [r7, #3]
 800ceca:	015a      	lsls	r2, r3, #5
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	4413      	add	r3, r2
 800ced0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ced4:	461a      	mov	r2, r3
 800ced6:	f240 639d 	movw	r3, #1693	; 0x69d
 800ceda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cedc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	da34      	bge.n	800cf4e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cee4:	78fb      	ldrb	r3, [r7, #3]
 800cee6:	015a      	lsls	r2, r3, #5
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	4413      	add	r3, r2
 800ceec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	78fa      	ldrb	r2, [r7, #3]
 800cef4:	0151      	lsls	r1, r2, #5
 800cef6:	693a      	ldr	r2, [r7, #16]
 800cef8:	440a      	add	r2, r1
 800cefa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cefe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf02:	60d3      	str	r3, [r2, #12]
      }

      break;
 800cf04:	e023      	b.n	800cf4e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cf06:	78fb      	ldrb	r3, [r7, #3]
 800cf08:	015a      	lsls	r2, r3, #5
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf12:	461a      	mov	r2, r3
 800cf14:	f240 2325 	movw	r3, #549	; 0x225
 800cf18:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cf1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	da17      	bge.n	800cf52 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800cf22:	78fb      	ldrb	r3, [r7, #3]
 800cf24:	015a      	lsls	r2, r3, #5
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	4413      	add	r3, r2
 800cf2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	78fa      	ldrb	r2, [r7, #3]
 800cf32:	0151      	lsls	r1, r2, #5
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	440a      	add	r2, r1
 800cf38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf3c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800cf40:	60d3      	str	r3, [r2, #12]
      }
      break;
 800cf42:	e006      	b.n	800cf52 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	77fb      	strb	r3, [r7, #31]
      break;
 800cf48:	e004      	b.n	800cf54 <USB_HC_Init+0x14c>
      break;
 800cf4a:	bf00      	nop
 800cf4c:	e002      	b.n	800cf54 <USB_HC_Init+0x14c>
      break;
 800cf4e:	bf00      	nop
 800cf50:	e000      	b.n	800cf54 <USB_HC_Init+0x14c>
      break;
 800cf52:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800cf54:	78fb      	ldrb	r3, [r7, #3]
 800cf56:	015a      	lsls	r2, r3, #5
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	78fa      	ldrb	r2, [r7, #3]
 800cf64:	0151      	lsls	r1, r2, #5
 800cf66:	693a      	ldr	r2, [r7, #16]
 800cf68:	440a      	add	r2, r1
 800cf6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf6e:	f043 0302 	orr.w	r3, r3, #2
 800cf72:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf7a:	699a      	ldr	r2, [r3, #24]
 800cf7c:	78fb      	ldrb	r3, [r7, #3]
 800cf7e:	f003 030f 	and.w	r3, r3, #15
 800cf82:	2101      	movs	r1, #1
 800cf84:	fa01 f303 	lsl.w	r3, r1, r3
 800cf88:	6939      	ldr	r1, [r7, #16]
 800cf8a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	699b      	ldr	r3, [r3, #24]
 800cf96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800cf9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	da03      	bge.n	800cfae <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800cfa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfaa:	61bb      	str	r3, [r7, #24]
 800cfac:	e001      	b.n	800cfb2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f7ff feff 	bl	800cdb6 <USB_GetHostSpeed>
 800cfb8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800cfba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cfbe:	2b02      	cmp	r3, #2
 800cfc0:	d106      	bne.n	800cfd0 <USB_HC_Init+0x1c8>
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d003      	beq.n	800cfd0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800cfc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cfcc:	617b      	str	r3, [r7, #20]
 800cfce:	e001      	b.n	800cfd4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cfd4:	787b      	ldrb	r3, [r7, #1]
 800cfd6:	059b      	lsls	r3, r3, #22
 800cfd8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cfdc:	78bb      	ldrb	r3, [r7, #2]
 800cfde:	02db      	lsls	r3, r3, #11
 800cfe0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cfe4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cfe6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cfea:	049b      	lsls	r3, r3, #18
 800cfec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cff0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cff2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cff4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cff8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cffa:	69bb      	ldr	r3, [r7, #24]
 800cffc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cffe:	78fb      	ldrb	r3, [r7, #3]
 800d000:	0159      	lsls	r1, r3, #5
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	440b      	add	r3, r1
 800d006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d00a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d010:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d012:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d016:	2b03      	cmp	r3, #3
 800d018:	d10f      	bne.n	800d03a <USB_HC_Init+0x232>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d01a:	78fb      	ldrb	r3, [r7, #3]
 800d01c:	015a      	lsls	r2, r3, #5
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	4413      	add	r3, r2
 800d022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	78fa      	ldrb	r2, [r7, #3]
 800d02a:	0151      	lsls	r1, r2, #5
 800d02c:	693a      	ldr	r2, [r7, #16]
 800d02e:	440a      	add	r2, r1
 800d030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d034:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d038:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d03a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3720      	adds	r7, #32
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b08c      	sub	sp, #48	; 0x30
 800d048:	af02      	add	r7, sp, #8
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	4613      	mov	r3, r2
 800d050:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	785b      	ldrb	r3, [r3, #1]
 800d05a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d05c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d060:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d02d      	beq.n	800d0ca <USB_HC_StartXfer+0x86>
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	791b      	ldrb	r3, [r3, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d129      	bne.n	800d0ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d076:	79fb      	ldrb	r3, [r7, #7]
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d117      	bne.n	800d0ac <USB_HC_StartXfer+0x68>
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	79db      	ldrb	r3, [r3, #7]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d003      	beq.n	800d08c <USB_HC_StartXfer+0x48>
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	79db      	ldrb	r3, [r3, #7]
 800d088:	2b02      	cmp	r3, #2
 800d08a:	d10f      	bne.n	800d0ac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d08c:	69fb      	ldr	r3, [r7, #28]
 800d08e:	015a      	lsls	r2, r3, #5
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	4413      	add	r3, r2
 800d094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	69fa      	ldr	r2, [r7, #28]
 800d09c:	0151      	lsls	r1, r2, #5
 800d09e:	6a3a      	ldr	r2, [r7, #32]
 800d0a0:	440a      	add	r2, r1
 800d0a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0aa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d0ac:	79fb      	ldrb	r3, [r7, #7]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d10b      	bne.n	800d0ca <USB_HC_StartXfer+0x86>
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	795b      	ldrb	r3, [r3, #5]
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d107      	bne.n	800d0ca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	785b      	ldrb	r3, [r3, #1]
 800d0be:	4619      	mov	r1, r3
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f000 fa0d 	bl	800d4e0 <USB_DoPing>
      return HAL_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	e0f8      	b.n	800d2bc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	695b      	ldr	r3, [r3, #20]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d018      	beq.n	800d104 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	695b      	ldr	r3, [r3, #20]
 800d0d6:	68ba      	ldr	r2, [r7, #8]
 800d0d8:	8912      	ldrh	r2, [r2, #8]
 800d0da:	4413      	add	r3, r2
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	68ba      	ldr	r2, [r7, #8]
 800d0e0:	8912      	ldrh	r2, [r2, #8]
 800d0e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0e6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d0e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d0ea:	8b7b      	ldrh	r3, [r7, #26]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d90b      	bls.n	800d108 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d0f0:	8b7b      	ldrh	r3, [r7, #26]
 800d0f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d0f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0f6:	68ba      	ldr	r2, [r7, #8]
 800d0f8:	8912      	ldrh	r2, [r2, #8]
 800d0fa:	fb03 f202 	mul.w	r2, r3, r2
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	611a      	str	r2, [r3, #16]
 800d102:	e001      	b.n	800d108 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d104:	2301      	movs	r3, #1
 800d106:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	78db      	ldrb	r3, [r3, #3]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d007      	beq.n	800d120 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d110:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	8912      	ldrh	r2, [r2, #8]
 800d116:	fb03 f202 	mul.w	r2, r3, r2
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	611a      	str	r2, [r3, #16]
 800d11e:	e003      	b.n	800d128 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	695a      	ldr	r2, [r3, #20]
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d130:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d132:	04d9      	lsls	r1, r3, #19
 800d134:	4b63      	ldr	r3, [pc, #396]	; (800d2c4 <USB_HC_StartXfer+0x280>)
 800d136:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d138:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	7a9b      	ldrb	r3, [r3, #10]
 800d13e:	075b      	lsls	r3, r3, #29
 800d140:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d144:	69f9      	ldr	r1, [r7, #28]
 800d146:	0148      	lsls	r0, r1, #5
 800d148:	6a39      	ldr	r1, [r7, #32]
 800d14a:	4401      	add	r1, r0
 800d14c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d150:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d152:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d154:	79fb      	ldrb	r3, [r7, #7]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d009      	beq.n	800d16e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	68d9      	ldr	r1, [r3, #12]
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	015a      	lsls	r2, r3, #5
 800d162:	6a3b      	ldr	r3, [r7, #32]
 800d164:	4413      	add	r3, r2
 800d166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d16a:	460a      	mov	r2, r1
 800d16c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d16e:	6a3b      	ldr	r3, [r7, #32]
 800d170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	bf0c      	ite	eq
 800d17e:	2301      	moveq	r3, #1
 800d180:	2300      	movne	r3, #0
 800d182:	b2db      	uxtb	r3, r3
 800d184:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	015a      	lsls	r2, r3, #5
 800d18a:	6a3b      	ldr	r3, [r7, #32]
 800d18c:	4413      	add	r3, r2
 800d18e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	69fa      	ldr	r2, [r7, #28]
 800d196:	0151      	lsls	r1, r2, #5
 800d198:	6a3a      	ldr	r2, [r7, #32]
 800d19a:	440a      	add	r2, r1
 800d19c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d1a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	015a      	lsls	r2, r3, #5
 800d1aa:	6a3b      	ldr	r3, [r7, #32]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	7e7b      	ldrb	r3, [r7, #25]
 800d1b6:	075b      	lsls	r3, r3, #29
 800d1b8:	69f9      	ldr	r1, [r7, #28]
 800d1ba:	0148      	lsls	r0, r1, #5
 800d1bc:	6a39      	ldr	r1, [r7, #32]
 800d1be:	4401      	add	r1, r0
 800d1c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	015a      	lsls	r2, r3, #5
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d1de:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	78db      	ldrb	r3, [r3, #3]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d004      	beq.n	800d1f2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1ee:	613b      	str	r3, [r7, #16]
 800d1f0:	e003      	b.n	800d1fa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d1f8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d200:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	015a      	lsls	r2, r3, #5
 800d206:	6a3b      	ldr	r3, [r7, #32]
 800d208:	4413      	add	r3, r2
 800d20a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d20e:	461a      	mov	r2, r3
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d214:	79fb      	ldrb	r3, [r7, #7]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d001      	beq.n	800d21e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d21a:	2300      	movs	r3, #0
 800d21c:	e04e      	b.n	800d2bc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	78db      	ldrb	r3, [r3, #3]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d149      	bne.n	800d2ba <USB_HC_StartXfer+0x276>
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	695b      	ldr	r3, [r3, #20]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d045      	beq.n	800d2ba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	79db      	ldrb	r3, [r3, #7]
 800d232:	2b03      	cmp	r3, #3
 800d234:	d830      	bhi.n	800d298 <USB_HC_StartXfer+0x254>
 800d236:	a201      	add	r2, pc, #4	; (adr r2, 800d23c <USB_HC_StartXfer+0x1f8>)
 800d238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d23c:	0800d24d 	.word	0x0800d24d
 800d240:	0800d271 	.word	0x0800d271
 800d244:	0800d24d 	.word	0x0800d24d
 800d248:	0800d271 	.word	0x0800d271
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	695b      	ldr	r3, [r3, #20]
 800d250:	3303      	adds	r3, #3
 800d252:	089b      	lsrs	r3, r3, #2
 800d254:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d256:	8afa      	ldrh	r2, [r7, #22]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	429a      	cmp	r2, r3
 800d260:	d91c      	bls.n	800d29c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	699b      	ldr	r3, [r3, #24]
 800d266:	f043 0220 	orr.w	r2, r3, #32
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	619a      	str	r2, [r3, #24]
        }
        break;
 800d26e:	e015      	b.n	800d29c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	695b      	ldr	r3, [r3, #20]
 800d274:	3303      	adds	r3, #3
 800d276:	089b      	lsrs	r3, r3, #2
 800d278:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d27a:	8afa      	ldrh	r2, [r7, #22]
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d282:	691b      	ldr	r3, [r3, #16]
 800d284:	b29b      	uxth	r3, r3
 800d286:	429a      	cmp	r2, r3
 800d288:	d90a      	bls.n	800d2a0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	699b      	ldr	r3, [r3, #24]
 800d28e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	619a      	str	r2, [r3, #24]
        }
        break;
 800d296:	e003      	b.n	800d2a0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d298:	bf00      	nop
 800d29a:	e002      	b.n	800d2a2 <USB_HC_StartXfer+0x25e>
        break;
 800d29c:	bf00      	nop
 800d29e:	e000      	b.n	800d2a2 <USB_HC_StartXfer+0x25e>
        break;
 800d2a0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	68d9      	ldr	r1, [r3, #12]
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	785a      	ldrb	r2, [r3, #1]
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	695b      	ldr	r3, [r3, #20]
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	9000      	str	r0, [sp, #0]
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f7ff fb43 	bl	800c940 <USB_WritePacket>
  }

  return HAL_OK;
 800d2ba:	2300      	movs	r3, #0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3728      	adds	r7, #40	; 0x28
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	1ff80000 	.word	0x1ff80000

0800d2c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2da:	695b      	ldr	r3, [r3, #20]
 800d2dc:	b29b      	uxth	r3, r3
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3714      	adds	r7, #20
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e8:	4770      	bx	lr

0800d2ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d2ea:	b480      	push	{r7}
 800d2ec:	b089      	sub	sp, #36	; 0x24
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800d2fa:	78fb      	ldrb	r3, [r7, #3]
 800d2fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800d2fe:	2300      	movs	r3, #0
 800d300:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	015a      	lsls	r2, r3, #5
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	4413      	add	r3, r2
 800d30a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	0c9b      	lsrs	r3, r3, #18
 800d312:	f003 0303 	and.w	r3, r3, #3
 800d316:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	015a      	lsls	r2, r3, #5
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	4413      	add	r3, r2
 800d320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	0fdb      	lsrs	r3, r3, #31
 800d328:	f003 0301 	and.w	r3, r3, #1
 800d32c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	f003 0320 	and.w	r3, r3, #32
 800d336:	2b20      	cmp	r3, #32
 800d338:	d104      	bne.n	800d344 <USB_HC_Halt+0x5a>
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d101      	bne.n	800d344 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	e0c6      	b.n	800d4d2 <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d002      	beq.n	800d350 <USB_HC_Halt+0x66>
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	2b02      	cmp	r3, #2
 800d34e:	d162      	bne.n	800d416 <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	015a      	lsls	r2, r3, #5
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	4413      	add	r3, r2
 800d358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	69ba      	ldr	r2, [r7, #24]
 800d360:	0151      	lsls	r1, r2, #5
 800d362:	69fa      	ldr	r2, [r7, #28]
 800d364:	440a      	add	r2, r1
 800d366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d36a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d36e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	f003 0320 	and.w	r3, r3, #32
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f040 80a9 	bne.w	800d4d0 <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d382:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d386:	2b00      	cmp	r3, #0
 800d388:	d132      	bne.n	800d3f0 <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	015a      	lsls	r2, r3, #5
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	4413      	add	r3, r2
 800d392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	69ba      	ldr	r2, [r7, #24]
 800d39a:	0151      	lsls	r1, r2, #5
 800d39c:	69fa      	ldr	r2, [r7, #28]
 800d39e:	440a      	add	r2, r1
 800d3a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d3a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d3aa:	69bb      	ldr	r3, [r7, #24]
 800d3ac:	015a      	lsls	r2, r3, #5
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	4413      	add	r3, r2
 800d3b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	69ba      	ldr	r2, [r7, #24]
 800d3ba:	0151      	lsls	r1, r2, #5
 800d3bc:	69fa      	ldr	r2, [r7, #28]
 800d3be:	440a      	add	r2, r1
 800d3c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3c8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	60fb      	str	r3, [r7, #12]
 800d3d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d3d4:	d81d      	bhi.n	800d412 <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	015a      	lsls	r2, r3, #5
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	4413      	add	r3, r2
 800d3de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3ec:	d0ed      	beq.n	800d3ca <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d3ee:	e06f      	b.n	800d4d0 <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	015a      	lsls	r2, r3, #5
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	69ba      	ldr	r2, [r7, #24]
 800d400:	0151      	lsls	r1, r2, #5
 800d402:	69fa      	ldr	r2, [r7, #28]
 800d404:	440a      	add	r2, r1
 800d406:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d40a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d40e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d410:	e05e      	b.n	800d4d0 <USB_HC_Halt+0x1e6>
            break;
 800d412:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d414:	e05c      	b.n	800d4d0 <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	015a      	lsls	r2, r3, #5
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	4413      	add	r3, r2
 800d41e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	69ba      	ldr	r2, [r7, #24]
 800d426:	0151      	lsls	r1, r2, #5
 800d428:	69fa      	ldr	r2, [r7, #28]
 800d42a:	440a      	add	r2, r1
 800d42c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d434:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d43c:	691b      	ldr	r3, [r3, #16]
 800d43e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d442:	2b00      	cmp	r3, #0
 800d444:	d132      	bne.n	800d4ac <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	015a      	lsls	r2, r3, #5
 800d44a:	69fb      	ldr	r3, [r7, #28]
 800d44c:	4413      	add	r3, r2
 800d44e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	69ba      	ldr	r2, [r7, #24]
 800d456:	0151      	lsls	r1, r2, #5
 800d458:	69fa      	ldr	r2, [r7, #28]
 800d45a:	440a      	add	r2, r1
 800d45c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d460:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d464:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	015a      	lsls	r2, r3, #5
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	4413      	add	r3, r2
 800d46e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	69ba      	ldr	r2, [r7, #24]
 800d476:	0151      	lsls	r1, r2, #5
 800d478:	69fa      	ldr	r2, [r7, #28]
 800d47a:	440a      	add	r2, r1
 800d47c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d480:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d484:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	3301      	adds	r3, #1
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d490:	d81d      	bhi.n	800d4ce <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	015a      	lsls	r2, r3, #5
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	4413      	add	r3, r2
 800d49a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d4a8:	d0ed      	beq.n	800d486 <USB_HC_Halt+0x19c>
 800d4aa:	e011      	b.n	800d4d0 <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	015a      	lsls	r2, r3, #5
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	4413      	add	r3, r2
 800d4b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	69ba      	ldr	r2, [r7, #24]
 800d4bc:	0151      	lsls	r1, r2, #5
 800d4be:	69fa      	ldr	r2, [r7, #28]
 800d4c0:	440a      	add	r2, r1
 800d4c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4ca:	6013      	str	r3, [r2, #0]
 800d4cc:	e000      	b.n	800d4d0 <USB_HC_Halt+0x1e6>
          break;
 800d4ce:	bf00      	nop
    }
  }

  return HAL_OK;
 800d4d0:	2300      	movs	r3, #0
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3724      	adds	r7, #36	; 0x24
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr
	...

0800d4e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b087      	sub	sp, #28
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d4f0:	78fb      	ldrb	r3, [r7, #3]
 800d4f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	04da      	lsls	r2, r3, #19
 800d4fc:	4b15      	ldr	r3, [pc, #84]	; (800d554 <USB_DoPing+0x74>)
 800d4fe:	4013      	ands	r3, r2
 800d500:	693a      	ldr	r2, [r7, #16]
 800d502:	0151      	lsls	r1, r2, #5
 800d504:	697a      	ldr	r2, [r7, #20]
 800d506:	440a      	add	r2, r1
 800d508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d50c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d510:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	015a      	lsls	r2, r3, #5
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	4413      	add	r3, r2
 800d51a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d528:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d530:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	015a      	lsls	r2, r3, #5
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	4413      	add	r3, r2
 800d53a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d53e:	461a      	mov	r2, r3
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	371c      	adds	r7, #28
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	1ff80000 	.word	0x1ff80000

0800d558 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b088      	sub	sp, #32
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800d560:	2300      	movs	r3, #0
 800d562:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800d568:	2300      	movs	r3, #0
 800d56a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7ff f92a 	bl	800c7c6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d572:	2110      	movs	r1, #16
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff f983 	bl	800c880 <USB_FlushTxFifo>
 800d57a:	4603      	mov	r3, r0
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d001      	beq.n	800d584 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f7ff f9ad 	bl	800c8e4 <USB_FlushRxFifo>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d001      	beq.n	800d594 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800d590:	2301      	movs	r3, #1
 800d592:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d594:	2300      	movs	r3, #0
 800d596:	61bb      	str	r3, [r7, #24]
 800d598:	e01f      	b.n	800d5da <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	015a      	lsls	r2, r3, #5
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	015a      	lsls	r2, r3, #5
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	61bb      	str	r3, [r7, #24]
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	2b0f      	cmp	r3, #15
 800d5de:	d9dc      	bls.n	800d59a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	61bb      	str	r3, [r7, #24]
 800d5e4:	e033      	b.n	800d64e <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	015a      	lsls	r2, r3, #5
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	4413      	add	r3, r2
 800d5ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d604:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d60c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d60e:	69bb      	ldr	r3, [r7, #24]
 800d610:	015a      	lsls	r2, r3, #5
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	4413      	add	r3, r2
 800d616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d61a:	461a      	mov	r2, r3
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	3301      	adds	r3, #1
 800d624:	60fb      	str	r3, [r7, #12]
 800d626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d62a:	d80c      	bhi.n	800d646 <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	015a      	lsls	r2, r3, #5
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	4413      	add	r3, r2
 800d634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d63e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d642:	d0ed      	beq.n	800d620 <USB_StopHost+0xc8>
 800d644:	e000      	b.n	800d648 <USB_StopHost+0xf0>
        break;
 800d646:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	3301      	adds	r3, #1
 800d64c:	61bb      	str	r3, [r7, #24]
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	2b0f      	cmp	r3, #15
 800d652:	d9c8      	bls.n	800d5e6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d65a:	461a      	mov	r2, r3
 800d65c:	f04f 33ff 	mov.w	r3, #4294967295
 800d660:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f04f 32ff 	mov.w	r2, #4294967295
 800d668:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7ff f89a 	bl	800c7a4 <USB_EnableGlobalInt>

  return ret;
 800d670:	7ffb      	ldrb	r3, [r7, #31]
}
 800d672:	4618      	mov	r0, r3
 800d674:	3720      	adds	r7, #32
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
	...

0800d67c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d680:	4904      	ldr	r1, [pc, #16]	; (800d694 <MX_FATFS_Init+0x18>)
 800d682:	4805      	ldr	r0, [pc, #20]	; (800d698 <MX_FATFS_Init+0x1c>)
 800d684:	f002 fbe8 	bl	800fe58 <FATFS_LinkDriver>
 800d688:	4603      	mov	r3, r0
 800d68a:	461a      	mov	r2, r3
 800d68c:	4b03      	ldr	r3, [pc, #12]	; (800d69c <MX_FATFS_Init+0x20>)
 800d68e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d690:	bf00      	nop
 800d692:	bd80      	pop	{r7, pc}
 800d694:	20000ba4 	.word	0x20000ba4
 800d698:	08012dcc 	.word	0x08012dcc
 800d69c:	20000ba0 	.word	0x20000ba0

0800d6a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d6aa:	f000 f87b 	bl	800d7a4 <BSP_SD_IsDetected>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d001      	beq.n	800d6b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	e012      	b.n	800d6de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d6b8:	480b      	ldr	r0, [pc, #44]	; (800d6e8 <BSP_SD_Init+0x48>)
 800d6ba:	f7fb fab9 	bl	8008c30 <HAL_SD_Init>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d6c2:	79fb      	ldrb	r3, [r7, #7]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d109      	bne.n	800d6dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d6c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d6cc:	4806      	ldr	r0, [pc, #24]	; (800d6e8 <BSP_SD_Init+0x48>)
 800d6ce:	f7fb ff09 	bl	80094e4 <HAL_SD_ConfigWideBusOperation>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d001      	beq.n	800d6dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d6dc:	79fb      	ldrb	r3, [r7, #7]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20000700 	.word	0x20000700

0800d6ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b086      	sub	sp, #24
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	68ba      	ldr	r2, [r7, #8]
 800d700:	68f9      	ldr	r1, [r7, #12]
 800d702:	4806      	ldr	r0, [pc, #24]	; (800d71c <BSP_SD_ReadBlocks_DMA+0x30>)
 800d704:	f7fb fb4c 	bl	8008da0 <HAL_SD_ReadBlocks_DMA>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d001      	beq.n	800d712 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d70e:	2301      	movs	r3, #1
 800d710:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d712:	7dfb      	ldrb	r3, [r7, #23]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3718      	adds	r7, #24
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	20000700 	.word	0x20000700

0800d720 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d72c:	2300      	movs	r3, #0
 800d72e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	68f9      	ldr	r1, [r7, #12]
 800d736:	4806      	ldr	r0, [pc, #24]	; (800d750 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d738:	f7fb fc14 	bl	8008f64 <HAL_SD_WriteBlocks_DMA>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d001      	beq.n	800d746 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d742:	2301      	movs	r3, #1
 800d744:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d746:	7dfb      	ldrb	r3, [r7, #23]
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3718      	adds	r7, #24
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	20000700 	.word	0x20000700

0800d754 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d758:	4805      	ldr	r0, [pc, #20]	; (800d770 <BSP_SD_GetCardState+0x1c>)
 800d75a:	f7fb ff5d 	bl	8009618 <HAL_SD_GetCardState>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b04      	cmp	r3, #4
 800d762:	bf14      	ite	ne
 800d764:	2301      	movne	r3, #1
 800d766:	2300      	moveq	r3, #0
 800d768:	b2db      	uxtb	r3, r3
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	20000700 	.word	0x20000700

0800d774 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d77c:	6879      	ldr	r1, [r7, #4]
 800d77e:	4803      	ldr	r0, [pc, #12]	; (800d78c <BSP_SD_GetCardInfo+0x18>)
 800d780:	f7fb fe84 	bl	800948c <HAL_SD_GetCardInfo>
}
 800d784:	bf00      	nop
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	20000700 	.word	0x20000700

0800d790 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d798:	f000 f9b2 	bl	800db00 <BSP_SD_ReadCpltCallback>
}
 800d79c:	bf00      	nop
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d7ae:	f000 f80b 	bl	800d7c8 <BSP_PlatformIsDetected>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d101      	bne.n	800d7bc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d7bc:	79fb      	ldrb	r3, [r7, #7]
 800d7be:	b2db      	uxtb	r3, r3
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3708      	adds	r7, #8
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d7d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d7d6:	4806      	ldr	r0, [pc, #24]	; (800d7f0 <BSP_PlatformIsDetected+0x28>)
 800d7d8:	f7f7 f890 	bl	80048fc <HAL_GPIO_ReadPin>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d001      	beq.n	800d7e6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d7e6:	79fb      	ldrb	r3, [r7, #7]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3708      	adds	r7, #8
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}
 800d7f0:	40020800 	.word	0x40020800

0800d7f4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d7fc:	f002 fb78 	bl	800fef0 <osKernelSysTick>
 800d800:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d802:	e006      	b.n	800d812 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d804:	f7ff ffa6 	bl	800d754 <BSP_SD_GetCardState>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d101      	bne.n	800d812 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	e009      	b.n	800d826 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d812:	f002 fb6d 	bl	800fef0 <osKernelSysTick>
 800d816:	4602      	mov	r2, r0
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	1ad3      	subs	r3, r2, r3
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d8f0      	bhi.n	800d804 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d822:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
	...

0800d830 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	4603      	mov	r3, r0
 800d838:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d83a:	4b0b      	ldr	r3, [pc, #44]	; (800d868 <SD_CheckStatus+0x38>)
 800d83c:	2201      	movs	r2, #1
 800d83e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d840:	f7ff ff88 	bl	800d754 <BSP_SD_GetCardState>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d107      	bne.n	800d85a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d84a:	4b07      	ldr	r3, [pc, #28]	; (800d868 <SD_CheckStatus+0x38>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	f023 0301 	bic.w	r3, r3, #1
 800d854:	b2da      	uxtb	r2, r3
 800d856:	4b04      	ldr	r3, [pc, #16]	; (800d868 <SD_CheckStatus+0x38>)
 800d858:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d85a:	4b03      	ldr	r3, [pc, #12]	; (800d868 <SD_CheckStatus+0x38>)
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	b2db      	uxtb	r3, r3
}
 800d860:	4618      	mov	r0, r3
 800d862:	3708      	adds	r7, #8
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	20000009 	.word	0x20000009

0800d86c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d86c:	b590      	push	{r4, r7, lr}
 800d86e:	b087      	sub	sp, #28
 800d870:	af00      	add	r7, sp, #0
 800d872:	4603      	mov	r3, r0
 800d874:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d876:	4b20      	ldr	r3, [pc, #128]	; (800d8f8 <SD_initialize+0x8c>)
 800d878:	2201      	movs	r2, #1
 800d87a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d87c:	f002 fb2c 	bl	800fed8 <osKernelRunning>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d030      	beq.n	800d8e8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d886:	f7ff ff0b 	bl	800d6a0 <BSP_SD_Init>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d107      	bne.n	800d8a0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d890:	79fb      	ldrb	r3, [r7, #7]
 800d892:	4618      	mov	r0, r3
 800d894:	f7ff ffcc 	bl	800d830 <SD_CheckStatus>
 800d898:	4603      	mov	r3, r0
 800d89a:	461a      	mov	r2, r3
 800d89c:	4b16      	ldr	r3, [pc, #88]	; (800d8f8 <SD_initialize+0x8c>)
 800d89e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d8a0:	4b15      	ldr	r3, [pc, #84]	; (800d8f8 <SD_initialize+0x8c>)
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d01e      	beq.n	800d8e8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d8aa:	4b14      	ldr	r3, [pc, #80]	; (800d8fc <SD_initialize+0x90>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d10e      	bne.n	800d8d0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d8b2:	4b13      	ldr	r3, [pc, #76]	; (800d900 <SD_initialize+0x94>)
 800d8b4:	f107 0408 	add.w	r4, r7, #8
 800d8b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d8ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d8be:	f107 0308 	add.w	r3, r7, #8
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f002 fb83 	bl	800ffd0 <osMessageCreate>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	4a0b      	ldr	r2, [pc, #44]	; (800d8fc <SD_initialize+0x90>)
 800d8ce:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d8d0:	4b0a      	ldr	r3, [pc, #40]	; (800d8fc <SD_initialize+0x90>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d107      	bne.n	800d8e8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d8d8:	4b07      	ldr	r3, [pc, #28]	; (800d8f8 <SD_initialize+0x8c>)
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	f043 0301 	orr.w	r3, r3, #1
 800d8e2:	b2da      	uxtb	r2, r3
 800d8e4:	4b04      	ldr	r3, [pc, #16]	; (800d8f8 <SD_initialize+0x8c>)
 800d8e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d8e8:	4b03      	ldr	r3, [pc, #12]	; (800d8f8 <SD_initialize+0x8c>)
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	b2db      	uxtb	r3, r3
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	371c      	adds	r7, #28
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	bd90      	pop	{r4, r7, pc}
 800d8f6:	bf00      	nop
 800d8f8:	20000009 	.word	0x20000009
 800d8fc:	20000ba8 	.word	0x20000ba8
 800d900:	08012d60 	.word	0x08012d60

0800d904 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	4603      	mov	r3, r0
 800d90c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d90e:	79fb      	ldrb	r3, [r7, #7]
 800d910:	4618      	mov	r0, r3
 800d912:	f7ff ff8d 	bl	800d830 <SD_CheckStatus>
 800d916:	4603      	mov	r3, r0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b08a      	sub	sp, #40	; 0x28
 800d924:	af00      	add	r7, sp, #0
 800d926:	60b9      	str	r1, [r7, #8]
 800d928:	607a      	str	r2, [r7, #4]
 800d92a:	603b      	str	r3, [r7, #0]
 800d92c:	4603      	mov	r3, r0
 800d92e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800d930:	2301      	movs	r3, #1
 800d932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d936:	f247 5030 	movw	r0, #30000	; 0x7530
 800d93a:	f7ff ff5b 	bl	800d7f4 <SD_CheckStatusWithTimeout>
 800d93e:	4603      	mov	r3, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	da02      	bge.n	800d94a <SD_read+0x2a>
  {
    return res;
 800d944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d948:	e032      	b.n	800d9b0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d94a:	683a      	ldr	r2, [r7, #0]
 800d94c:	6879      	ldr	r1, [r7, #4]
 800d94e:	68b8      	ldr	r0, [r7, #8]
 800d950:	f7ff fecc 	bl	800d6ec <BSP_SD_ReadBlocks_DMA>
 800d954:	4603      	mov	r3, r0
 800d956:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d95a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d124      	bne.n	800d9ac <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d962:	4b15      	ldr	r3, [pc, #84]	; (800d9b8 <SD_read+0x98>)
 800d964:	6819      	ldr	r1, [r3, #0]
 800d966:	f107 0314 	add.w	r3, r7, #20
 800d96a:	f247 5230 	movw	r2, #30000	; 0x7530
 800d96e:	4618      	mov	r0, r3
 800d970:	f002 fb96 	bl	80100a0 <osMessageGet>

    if (event.status == osEventMessage)
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	2b10      	cmp	r3, #16
 800d978:	d118      	bne.n	800d9ac <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d115      	bne.n	800d9ac <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d980:	f002 fab6 	bl	800fef0 <osKernelSysTick>
 800d984:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d986:	e008      	b.n	800d99a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d988:	f7ff fee4 	bl	800d754 <BSP_SD_GetCardState>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d103      	bne.n	800d99a <SD_read+0x7a>
              {
                res = RES_OK;
 800d992:	2300      	movs	r3, #0
 800d994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d998:	e008      	b.n	800d9ac <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d99a:	f002 faa9 	bl	800fef0 <osKernelSysTick>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	6a3b      	ldr	r3, [r7, #32]
 800d9a2:	1ad3      	subs	r3, r2, r3
 800d9a4:	f247 522f 	movw	r2, #29999	; 0x752f
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d9ed      	bls.n	800d988 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3728      	adds	r7, #40	; 0x28
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	20000ba8 	.word	0x20000ba8

0800d9bc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b08a      	sub	sp, #40	; 0x28
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60b9      	str	r1, [r7, #8]
 800d9c4:	607a      	str	r2, [r7, #4]
 800d9c6:	603b      	str	r3, [r7, #0]
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d9d2:	f247 5030 	movw	r0, #30000	; 0x7530
 800d9d6:	f7ff ff0d 	bl	800d7f4 <SD_CheckStatusWithTimeout>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	da02      	bge.n	800d9e6 <SD_write+0x2a>
  {
    return res;
 800d9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9e4:	e02e      	b.n	800da44 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d9e6:	683a      	ldr	r2, [r7, #0]
 800d9e8:	6879      	ldr	r1, [r7, #4]
 800d9ea:	68b8      	ldr	r0, [r7, #8]
 800d9ec:	f7ff fe98 	bl	800d720 <BSP_SD_WriteBlocks_DMA>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d124      	bne.n	800da40 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d9f6:	4b15      	ldr	r3, [pc, #84]	; (800da4c <SD_write+0x90>)
 800d9f8:	6819      	ldr	r1, [r3, #0]
 800d9fa:	f107 0314 	add.w	r3, r7, #20
 800d9fe:	f247 5230 	movw	r2, #30000	; 0x7530
 800da02:	4618      	mov	r0, r3
 800da04:	f002 fb4c 	bl	80100a0 <osMessageGet>

    if (event.status == osEventMessage)
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	2b10      	cmp	r3, #16
 800da0c:	d118      	bne.n	800da40 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	2b02      	cmp	r3, #2
 800da12:	d115      	bne.n	800da40 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800da14:	f002 fa6c 	bl	800fef0 <osKernelSysTick>
 800da18:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800da1a:	e008      	b.n	800da2e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800da1c:	f7ff fe9a 	bl	800d754 <BSP_SD_GetCardState>
 800da20:	4603      	mov	r3, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	d103      	bne.n	800da2e <SD_write+0x72>
          {
            res = RES_OK;
 800da26:	2300      	movs	r3, #0
 800da28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800da2c:	e008      	b.n	800da40 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800da2e:	f002 fa5f 	bl	800fef0 <osKernelSysTick>
 800da32:	4602      	mov	r2, r0
 800da34:	6a3b      	ldr	r3, [r7, #32]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	f247 522f 	movw	r2, #29999	; 0x752f
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d9ed      	bls.n	800da1c <SD_write+0x60>
    }

  }
#endif

  return res;
 800da40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800da44:	4618      	mov	r0, r3
 800da46:	3728      	adds	r7, #40	; 0x28
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20000ba8 	.word	0x20000ba8

0800da50 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b08c      	sub	sp, #48	; 0x30
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	603a      	str	r2, [r7, #0]
 800da5a:	71fb      	strb	r3, [r7, #7]
 800da5c:	460b      	mov	r3, r1
 800da5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800da60:	2301      	movs	r3, #1
 800da62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800da66:	4b25      	ldr	r3, [pc, #148]	; (800dafc <SD_ioctl+0xac>)
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	f003 0301 	and.w	r3, r3, #1
 800da70:	2b00      	cmp	r3, #0
 800da72:	d001      	beq.n	800da78 <SD_ioctl+0x28>
 800da74:	2303      	movs	r3, #3
 800da76:	e03c      	b.n	800daf2 <SD_ioctl+0xa2>

  switch (cmd)
 800da78:	79bb      	ldrb	r3, [r7, #6]
 800da7a:	2b03      	cmp	r3, #3
 800da7c:	d834      	bhi.n	800dae8 <SD_ioctl+0x98>
 800da7e:	a201      	add	r2, pc, #4	; (adr r2, 800da84 <SD_ioctl+0x34>)
 800da80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da84:	0800da95 	.word	0x0800da95
 800da88:	0800da9d 	.word	0x0800da9d
 800da8c:	0800dab5 	.word	0x0800dab5
 800da90:	0800dacf 	.word	0x0800dacf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800da94:	2300      	movs	r3, #0
 800da96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da9a:	e028      	b.n	800daee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800da9c:	f107 030c 	add.w	r3, r7, #12
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff fe67 	bl	800d774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800daa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800daac:	2300      	movs	r3, #0
 800daae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dab2:	e01c      	b.n	800daee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dab4:	f107 030c 	add.w	r3, r7, #12
 800dab8:	4618      	mov	r0, r3
 800daba:	f7ff fe5b 	bl	800d774 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dac6:	2300      	movs	r3, #0
 800dac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dacc:	e00f      	b.n	800daee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dace:	f107 030c 	add.w	r3, r7, #12
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff fe4e 	bl	800d774 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dada:	0a5a      	lsrs	r2, r3, #9
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dae0:	2300      	movs	r3, #0
 800dae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dae6:	e002      	b.n	800daee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dae8:	2304      	movs	r3, #4
 800daea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800daee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3730      	adds	r7, #48	; 0x30
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	20000009 	.word	0x20000009

0800db00 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800db04:	4b04      	ldr	r3, [pc, #16]	; (800db18 <BSP_SD_ReadCpltCallback+0x18>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2200      	movs	r2, #0
 800db0a:	2101      	movs	r1, #1
 800db0c:	4618      	mov	r0, r3
 800db0e:	f002 fa87 	bl	8010020 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800db12:	bf00      	nop
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	20000ba8 	.word	0x20000ba8

0800db1c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800db1c:	b590      	push	{r4, r7, lr}
 800db1e:	b089      	sub	sp, #36	; 0x24
 800db20:	af04      	add	r7, sp, #16
 800db22:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800db24:	2301      	movs	r3, #1
 800db26:	2202      	movs	r2, #2
 800db28:	2102      	movs	r1, #2
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 fcb8 	bl	800e4a0 <USBH_FindInterface>
 800db30:	4603      	mov	r3, r0
 800db32:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800db34:	7bfb      	ldrb	r3, [r7, #15]
 800db36:	2bff      	cmp	r3, #255	; 0xff
 800db38:	d002      	beq.n	800db40 <USBH_CDC_InterfaceInit+0x24>
 800db3a:	7bfb      	ldrb	r3, [r7, #15]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d901      	bls.n	800db44 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800db40:	2302      	movs	r3, #2
 800db42:	e13d      	b.n	800ddc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800db44:	7bfb      	ldrb	r3, [r7, #15]
 800db46:	4619      	mov	r1, r3
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 fc8d 	bl	800e468 <USBH_SelectInterface>
 800db4e:	4603      	mov	r3, r0
 800db50:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800db52:	7bbb      	ldrb	r3, [r7, #14]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800db58:	2302      	movs	r3, #2
 800db5a:	e131      	b.n	800ddc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800db62:	2050      	movs	r0, #80	; 0x50
 800db64:	f004 ffb8 	bl	8012ad8 <malloc>
 800db68:	4603      	mov	r3, r0
 800db6a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db72:	69db      	ldr	r3, [r3, #28]
 800db74:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d101      	bne.n	800db80 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800db7c:	2302      	movs	r3, #2
 800db7e:	e11f      	b.n	800ddc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800db80:	2250      	movs	r2, #80	; 0x50
 800db82:	2100      	movs	r1, #0
 800db84:	68b8      	ldr	r0, [r7, #8]
 800db86:	f004 ffc5 	bl	8012b14 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800db8a:	7bfb      	ldrb	r3, [r7, #15]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	211a      	movs	r1, #26
 800db90:	fb01 f303 	mul.w	r3, r1, r3
 800db94:	4413      	add	r3, r2
 800db96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	b25b      	sxtb	r3, r3
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	da15      	bge.n	800dbce <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	211a      	movs	r1, #26
 800dba8:	fb01 f303 	mul.w	r3, r1, r3
 800dbac:	4413      	add	r3, r2
 800dbae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dbb2:	781a      	ldrb	r2, [r3, #0]
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dbb8:	7bfb      	ldrb	r3, [r7, #15]
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	211a      	movs	r1, #26
 800dbbe:	fb01 f303 	mul.w	r3, r1, r3
 800dbc2:	4413      	add	r3, r2
 800dbc4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dbc8:	881a      	ldrh	r2, [r3, #0]
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	785b      	ldrb	r3, [r3, #1]
 800dbd2:	4619      	mov	r1, r3
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f002 f890 	bl	800fcfa <USBH_AllocPipe>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	461a      	mov	r2, r3
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	7819      	ldrb	r1, [r3, #0]
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	7858      	ldrb	r0, [r3, #1]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dbf6:	68ba      	ldr	r2, [r7, #8]
 800dbf8:	8952      	ldrh	r2, [r2, #10]
 800dbfa:	9202      	str	r2, [sp, #8]
 800dbfc:	2203      	movs	r2, #3
 800dbfe:	9201      	str	r2, [sp, #4]
 800dc00:	9300      	str	r3, [sp, #0]
 800dc02:	4623      	mov	r3, r4
 800dc04:	4602      	mov	r2, r0
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f002 f848 	bl	800fc9c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	2200      	movs	r2, #0
 800dc12:	4619      	mov	r1, r3
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f004 feb1 	bl	801297c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	210a      	movs	r1, #10
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 fc3d 	bl	800e4a0 <USBH_FindInterface>
 800dc26:	4603      	mov	r3, r0
 800dc28:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800dc2a:	7bfb      	ldrb	r3, [r7, #15]
 800dc2c:	2bff      	cmp	r3, #255	; 0xff
 800dc2e:	d002      	beq.n	800dc36 <USBH_CDC_InterfaceInit+0x11a>
 800dc30:	7bfb      	ldrb	r3, [r7, #15]
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d901      	bls.n	800dc3a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800dc36:	2302      	movs	r3, #2
 800dc38:	e0c2      	b.n	800ddc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	211a      	movs	r1, #26
 800dc40:	fb01 f303 	mul.w	r3, r1, r3
 800dc44:	4413      	add	r3, r2
 800dc46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	b25b      	sxtb	r3, r3
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	da16      	bge.n	800dc80 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dc52:	7bfb      	ldrb	r3, [r7, #15]
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	211a      	movs	r1, #26
 800dc58:	fb01 f303 	mul.w	r3, r1, r3
 800dc5c:	4413      	add	r3, r2
 800dc5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc62:	781a      	ldrb	r2, [r3, #0]
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	211a      	movs	r1, #26
 800dc6e:	fb01 f303 	mul.w	r3, r1, r3
 800dc72:	4413      	add	r3, r2
 800dc74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dc78:	881a      	ldrh	r2, [r3, #0]
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	835a      	strh	r2, [r3, #26]
 800dc7e:	e015      	b.n	800dcac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dc80:	7bfb      	ldrb	r3, [r7, #15]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	211a      	movs	r1, #26
 800dc86:	fb01 f303 	mul.w	r3, r1, r3
 800dc8a:	4413      	add	r3, r2
 800dc8c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800dc90:	781a      	ldrb	r2, [r3, #0]
 800dc92:	68bb      	ldr	r3, [r7, #8]
 800dc94:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dc96:	7bfb      	ldrb	r3, [r7, #15]
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	211a      	movs	r1, #26
 800dc9c:	fb01 f303 	mul.w	r3, r1, r3
 800dca0:	4413      	add	r3, r2
 800dca2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800dca6:	881a      	ldrh	r2, [r3, #0]
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800dcac:	7bfb      	ldrb	r3, [r7, #15]
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	211a      	movs	r1, #26
 800dcb2:	fb01 f303 	mul.w	r3, r1, r3
 800dcb6:	4413      	add	r3, r2
 800dcb8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	b25b      	sxtb	r3, r3
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	da16      	bge.n	800dcf2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dcc4:	7bfb      	ldrb	r3, [r7, #15]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	211a      	movs	r1, #26
 800dcca:	fb01 f303 	mul.w	r3, r1, r3
 800dcce:	4413      	add	r3, r2
 800dcd0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dcd4:	781a      	ldrb	r2, [r3, #0]
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dcda:	7bfb      	ldrb	r3, [r7, #15]
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	211a      	movs	r1, #26
 800dce0:	fb01 f303 	mul.w	r3, r1, r3
 800dce4:	4413      	add	r3, r2
 800dce6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dcea:	881a      	ldrh	r2, [r3, #0]
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	835a      	strh	r2, [r3, #26]
 800dcf0:	e015      	b.n	800dd1e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	211a      	movs	r1, #26
 800dcf8:	fb01 f303 	mul.w	r3, r1, r3
 800dcfc:	4413      	add	r3, r2
 800dcfe:	f203 3356 	addw	r3, r3, #854	; 0x356
 800dd02:	781a      	ldrb	r2, [r3, #0]
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	211a      	movs	r1, #26
 800dd0e:	fb01 f303 	mul.w	r3, r1, r3
 800dd12:	4413      	add	r3, r2
 800dd14:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800dd18:	881a      	ldrh	r2, [r3, #0]
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	7b9b      	ldrb	r3, [r3, #14]
 800dd22:	4619      	mov	r1, r3
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f001 ffe8 	bl	800fcfa <USBH_AllocPipe>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	7bdb      	ldrb	r3, [r3, #15]
 800dd36:	4619      	mov	r1, r3
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f001 ffde 	bl	800fcfa <USBH_AllocPipe>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	461a      	mov	r2, r3
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	7b59      	ldrb	r1, [r3, #13]
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	7b98      	ldrb	r0, [r3, #14]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd5a:	68ba      	ldr	r2, [r7, #8]
 800dd5c:	8b12      	ldrh	r2, [r2, #24]
 800dd5e:	9202      	str	r2, [sp, #8]
 800dd60:	2202      	movs	r2, #2
 800dd62:	9201      	str	r2, [sp, #4]
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	4623      	mov	r3, r4
 800dd68:	4602      	mov	r2, r0
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f001 ff96 	bl	800fc9c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	7b19      	ldrb	r1, [r3, #12]
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	7bd8      	ldrb	r0, [r3, #15]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800dd84:	68ba      	ldr	r2, [r7, #8]
 800dd86:	8b52      	ldrh	r2, [r2, #26]
 800dd88:	9202      	str	r2, [sp, #8]
 800dd8a:	2202      	movs	r2, #2
 800dd8c:	9201      	str	r2, [sp, #4]
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	4623      	mov	r3, r4
 800dd92:	4602      	mov	r2, r0
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f001 ff81 	bl	800fc9c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	7b5b      	ldrb	r3, [r3, #13]
 800dda6:	2200      	movs	r2, #0
 800dda8:	4619      	mov	r1, r3
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f004 fde6 	bl	801297c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	7b1b      	ldrb	r3, [r3, #12]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f004 fddf 	bl	801297c <USBH_LL_SetToggle>

  return USBH_OK;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3714      	adds	r7, #20
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd90      	pop	{r4, r7, pc}

0800ddc8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ddd6:	69db      	ldr	r3, [r3, #28]
 800ddd8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00e      	beq.n	800de00 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	4619      	mov	r1, r3
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f001 ff76 	bl	800fcda <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f001 ffa1 	bl	800fd3c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	7b1b      	ldrb	r3, [r3, #12]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d00e      	beq.n	800de26 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	7b1b      	ldrb	r3, [r3, #12]
 800de0c:	4619      	mov	r1, r3
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f001 ff63 	bl	800fcda <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	7b1b      	ldrb	r3, [r3, #12]
 800de18:	4619      	mov	r1, r3
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f001 ff8e 	bl	800fd3c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2200      	movs	r2, #0
 800de24:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	7b5b      	ldrb	r3, [r3, #13]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00e      	beq.n	800de4c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	7b5b      	ldrb	r3, [r3, #13]
 800de32:	4619      	mov	r1, r3
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f001 ff50 	bl	800fcda <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	7b5b      	ldrb	r3, [r3, #13]
 800de3e:	4619      	mov	r1, r3
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f001 ff7b 	bl	800fd3c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2200      	movs	r2, #0
 800de4a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de52:	69db      	ldr	r3, [r3, #28]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d00b      	beq.n	800de70 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de5e:	69db      	ldr	r3, [r3, #28]
 800de60:	4618      	mov	r0, r3
 800de62:	f004 fe41 	bl	8012ae8 <free>
    phost->pActiveClass->pData = 0U;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de6c:	2200      	movs	r2, #0
 800de6e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800de70:	2300      	movs	r3, #0
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800de88:	69db      	ldr	r3, [r3, #28]
 800de8a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	3340      	adds	r3, #64	; 0x40
 800de90:	4619      	mov	r1, r3
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 f8b1 	bl	800dffa <GetLineCoding>
 800de98:	4603      	mov	r3, r0
 800de9a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800de9c:	7afb      	ldrb	r3, [r7, #11]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d105      	bne.n	800deae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dea8:	2102      	movs	r1, #2
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800deae:	7afb      	ldrb	r3, [r7, #11]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3710      	adds	r7, #16
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800dec0:	2301      	movs	r3, #1
 800dec2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dece:	69db      	ldr	r3, [r3, #28]
 800ded0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ded8:	2b04      	cmp	r3, #4
 800deda:	d877      	bhi.n	800dfcc <USBH_CDC_Process+0x114>
 800dedc:	a201      	add	r2, pc, #4	; (adr r2, 800dee4 <USBH_CDC_Process+0x2c>)
 800dede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dee2:	bf00      	nop
 800dee4:	0800def9 	.word	0x0800def9
 800dee8:	0800deff 	.word	0x0800deff
 800deec:	0800df2f 	.word	0x0800df2f
 800def0:	0800dfa3 	.word	0x0800dfa3
 800def4:	0800dfb1 	.word	0x0800dfb1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]
      break;
 800defc:	e06d      	b.n	800dfda <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df02:	4619      	mov	r1, r3
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 f897 	bl	800e038 <SetLineCoding>
 800df0a:	4603      	mov	r3, r0
 800df0c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800df0e:	7bbb      	ldrb	r3, [r7, #14]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d104      	bne.n	800df1e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	2202      	movs	r2, #2
 800df18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800df1c:	e058      	b.n	800dfd0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800df1e:	7bbb      	ldrb	r3, [r7, #14]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d055      	beq.n	800dfd0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	2204      	movs	r2, #4
 800df28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800df2c:	e050      	b.n	800dfd0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	3340      	adds	r3, #64	; 0x40
 800df32:	4619      	mov	r1, r3
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 f860 	bl	800dffa <GetLineCoding>
 800df3a:	4603      	mov	r3, r0
 800df3c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800df3e:	7bbb      	ldrb	r3, [r7, #14]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d126      	bne.n	800df92 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	2200      	movs	r2, #0
 800df48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df56:	791b      	ldrb	r3, [r3, #4]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d13b      	bne.n	800dfd4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df66:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800df68:	429a      	cmp	r2, r3
 800df6a:	d133      	bne.n	800dfd4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800df72:	68bb      	ldr	r3, [r7, #8]
 800df74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df76:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800df78:	429a      	cmp	r2, r3
 800df7a:	d12b      	bne.n	800dfd4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df84:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800df86:	429a      	cmp	r2, r3
 800df88:	d124      	bne.n	800dfd4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 f982 	bl	800e294 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800df90:	e020      	b.n	800dfd4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800df92:	7bbb      	ldrb	r3, [r7, #14]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d01d      	beq.n	800dfd4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2204      	movs	r2, #4
 800df9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800dfa0:	e018      	b.n	800dfd4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 f867 	bl	800e076 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 f8f6 	bl	800e19a <CDC_ProcessReception>
      break;
 800dfae:	e014      	b.n	800dfda <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800dfb0:	2100      	movs	r1, #0
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f001 f951 	bl	800f25a <USBH_ClrFeature>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dfbc:	7bbb      	ldrb	r3, [r7, #14]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d10a      	bne.n	800dfd8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800dfca:	e005      	b.n	800dfd8 <USBH_CDC_Process+0x120>

    default:
      break;
 800dfcc:	bf00      	nop
 800dfce:	e004      	b.n	800dfda <USBH_CDC_Process+0x122>
      break;
 800dfd0:	bf00      	nop
 800dfd2:	e002      	b.n	800dfda <USBH_CDC_Process+0x122>
      break;
 800dfd4:	bf00      	nop
 800dfd6:	e000      	b.n	800dfda <USBH_CDC_Process+0x122>
      break;
 800dfd8:	bf00      	nop

  }

  return status;
 800dfda:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800dfec:	2300      	movs	r3, #0
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	370c      	adds	r7, #12
 800dff2:	46bd      	mov	sp, r7
 800dff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff8:	4770      	bx	lr

0800dffa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b082      	sub	sp, #8
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
 800e002:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	22a1      	movs	r2, #161	; 0xa1
 800e008:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2221      	movs	r2, #33	; 0x21
 800e00e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2200      	movs	r2, #0
 800e014:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2207      	movs	r2, #7
 800e020:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	2207      	movs	r2, #7
 800e026:	4619      	mov	r1, r3
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f001 faf6 	bl	800f61a <USBH_CtlReq>
 800e02e:	4603      	mov	r3, r0
}
 800e030:	4618      	mov	r0, r3
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2221      	movs	r2, #33	; 0x21
 800e046:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2220      	movs	r2, #32
 800e04c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2200      	movs	r2, #0
 800e052:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2200      	movs	r2, #0
 800e058:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2207      	movs	r2, #7
 800e05e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	2207      	movs	r2, #7
 800e064:	4619      	mov	r1, r3
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f001 fad7 	bl	800f61a <USBH_CtlReq>
 800e06c:	4603      	mov	r3, r0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3708      	adds	r7, #8
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e076:	b580      	push	{r7, lr}
 800e078:	b086      	sub	sp, #24
 800e07a:	af02      	add	r7, sp, #8
 800e07c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e084:	69db      	ldr	r3, [r3, #28]
 800e086:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e088:	2300      	movs	r3, #0
 800e08a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e092:	2b01      	cmp	r3, #1
 800e094:	d002      	beq.n	800e09c <CDC_ProcessTransmission+0x26>
 800e096:	2b02      	cmp	r3, #2
 800e098:	d023      	beq.n	800e0e2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800e09a:	e07a      	b.n	800e192 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	8b12      	ldrh	r2, [r2, #24]
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d90b      	bls.n	800e0c0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	69d9      	ldr	r1, [r3, #28]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	8b1a      	ldrh	r2, [r3, #24]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	7b5b      	ldrb	r3, [r3, #13]
 800e0b4:	2001      	movs	r0, #1
 800e0b6:	9000      	str	r0, [sp, #0]
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f001 fdac 	bl	800fc16 <USBH_BulkSendData>
 800e0be:	e00b      	b.n	800e0d8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e0c8:	b29a      	uxth	r2, r3
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	7b5b      	ldrb	r3, [r3, #13]
 800e0ce:	2001      	movs	r0, #1
 800e0d0:	9000      	str	r0, [sp, #0]
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f001 fd9f 	bl	800fc16 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2202      	movs	r2, #2
 800e0dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e0e0:	e057      	b.n	800e192 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	7b5b      	ldrb	r3, [r3, #13]
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f004 fc1d 	bl	8012928 <USBH_LL_GetURBState>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e0f2:	7afb      	ldrb	r3, [r7, #11]
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d136      	bne.n	800e166 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	8b12      	ldrh	r2, [r2, #24]
 800e100:	4293      	cmp	r3, r2
 800e102:	d90e      	bls.n	800e122 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e108:	68fa      	ldr	r2, [r7, #12]
 800e10a:	8b12      	ldrh	r2, [r2, #24]
 800e10c:	1a9a      	subs	r2, r3, r2
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	69db      	ldr	r3, [r3, #28]
 800e116:	68fa      	ldr	r2, [r7, #12]
 800e118:	8b12      	ldrh	r2, [r2, #24]
 800e11a:	441a      	add	r2, r3
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	61da      	str	r2, [r3, #28]
 800e120:	e002      	b.n	800e128 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2200      	movs	r2, #0
 800e126:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d004      	beq.n	800e13a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2201      	movs	r2, #1
 800e134:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e138:	e006      	b.n	800e148 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2200      	movs	r2, #0
 800e13e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 f892 	bl	800e26c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2204      	movs	r2, #4
 800e14c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e15c:	2200      	movs	r2, #0
 800e15e:	4619      	mov	r1, r3
 800e160:	f001 ff5e 	bl	8010020 <osMessagePut>
      break;
 800e164:	e014      	b.n	800e190 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800e166:	7afb      	ldrb	r3, [r7, #11]
 800e168:	2b02      	cmp	r3, #2
 800e16a:	d111      	bne.n	800e190 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2201      	movs	r2, #1
 800e170:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2204      	movs	r2, #4
 800e178:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e188:	2200      	movs	r2, #0
 800e18a:	4619      	mov	r1, r3
 800e18c:	f001 ff48 	bl	8010020 <osMessagePut>
      break;
 800e190:	bf00      	nop
  }
}
 800e192:	bf00      	nop
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b086      	sub	sp, #24
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1a8:	69db      	ldr	r3, [r3, #28]
 800e1aa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e1b6:	2b03      	cmp	r3, #3
 800e1b8:	d002      	beq.n	800e1c0 <CDC_ProcessReception+0x26>
 800e1ba:	2b04      	cmp	r3, #4
 800e1bc:	d00e      	beq.n	800e1dc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e1be:	e051      	b.n	800e264 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	6a19      	ldr	r1, [r3, #32]
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	8b5a      	ldrh	r2, [r3, #26]
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	7b1b      	ldrb	r3, [r3, #12]
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f001 fd47 	bl	800fc60 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	2204      	movs	r2, #4
 800e1d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e1da:	e043      	b.n	800e264 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	7b1b      	ldrb	r3, [r3, #12]
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f004 fba0 	bl	8012928 <USBH_LL_GetURBState>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e1ec:	7cfb      	ldrb	r3, [r7, #19]
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d137      	bne.n	800e262 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	7b1b      	ldrb	r3, [r3, #12]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f004 fb03 	bl	8012804 <USBH_LL_GetLastXferSize>
 800e1fe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	429a      	cmp	r2, r3
 800e208:	d016      	beq.n	800e238 <CDC_ProcessReception+0x9e>
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	8b5b      	ldrh	r3, [r3, #26]
 800e20e:	461a      	mov	r2, r3
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	4293      	cmp	r3, r2
 800e214:	d910      	bls.n	800e238 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	1ad2      	subs	r2, r2, r3
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	6a1a      	ldr	r2, [r3, #32]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	441a      	add	r2, r3
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	2203      	movs	r2, #3
 800e232:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e236:	e006      	b.n	800e246 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 f81d 	bl	800e280 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2204      	movs	r2, #4
 800e24a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e25a:	2200      	movs	r2, #0
 800e25c:	4619      	mov	r1, r3
 800e25e:	f001 fedf 	bl	8010020 <osMessagePut>
      break;
 800e262:	bf00      	nop
  }
}
 800e264:	bf00      	nop
 800e266:	3718      	adds	r7, #24
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e274:	bf00      	nop
 800e276:	370c      	adds	r7, #12
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr

0800e280 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e280:	b480      	push	{r7}
 800e282:	b083      	sub	sp, #12
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e288:	bf00      	nop
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e29c:	bf00      	nop
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e2a8:	b5b0      	push	{r4, r5, r7, lr}
 800e2aa:	b090      	sub	sp, #64	; 0x40
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d101      	bne.n	800e2c0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e2bc:	2302      	movs	r3, #2
 800e2be:	e04d      	b.n	800e35c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	79fa      	ldrb	r2, [r7, #7]
 800e2c4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	f000 f847 	bl	800e36c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d003      	beq.n	800e30c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800e30c:	4b15      	ldr	r3, [pc, #84]	; (800e364 <USBH_Init+0xbc>)
 800e30e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800e312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800e318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e31c:	2100      	movs	r1, #0
 800e31e:	4618      	mov	r0, r3
 800e320:	f001 fe56 	bl	800ffd0 <osMessageCreate>
 800e324:	4602      	mov	r2, r0
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800e32c:	4b0e      	ldr	r3, [pc, #56]	; (800e368 <USBH_Init+0xc0>)
 800e32e:	f107 0414 	add.w	r4, r7, #20
 800e332:	461d      	mov	r5, r3
 800e334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e338:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e33c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800e340:	f107 0314 	add.w	r3, r7, #20
 800e344:	68f9      	ldr	r1, [r7, #12]
 800e346:	4618      	mov	r0, r3
 800e348:	f001 fde2 	bl	800ff10 <osThreadCreate>
 800e34c:	4602      	mov	r2, r0
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f004 f9a1 	bl	801269c <USBH_LL_Init>

  return USBH_OK;
 800e35a:	2300      	movs	r3, #0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3740      	adds	r7, #64	; 0x40
 800e360:	46bd      	mov	sp, r7
 800e362:	bdb0      	pop	{r4, r5, r7, pc}
 800e364:	08012d80 	.word	0x08012d80
 800e368:	08012d90 	.word	0x08012d90

0800e36c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b085      	sub	sp, #20
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e374:	2300      	movs	r3, #0
 800e376:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e378:	2300      	movs	r3, #0
 800e37a:	60fb      	str	r3, [r7, #12]
 800e37c:	e009      	b.n	800e392 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	33e0      	adds	r3, #224	; 0xe0
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	4413      	add	r3, r2
 800e388:	2200      	movs	r2, #0
 800e38a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	3301      	adds	r3, #1
 800e390:	60fb      	str	r3, [r7, #12]
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2b0e      	cmp	r3, #14
 800e396:	d9f2      	bls.n	800e37e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e398:	2300      	movs	r3, #0
 800e39a:	60fb      	str	r3, [r7, #12]
 800e39c:	e009      	b.n	800e3b2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	60fb      	str	r3, [r7, #12]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3b8:	d3f1      	bcc.n	800e39e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2200      	movs	r2, #0
 800e3be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2240      	movs	r2, #64	; 0x40
 800e3de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3714      	adds	r7, #20
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e41e:	2300      	movs	r3, #0
 800e420:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d016      	beq.n	800e456 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d10e      	bne.n	800e450 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e438:	1c59      	adds	r1, r3, #1
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	33de      	adds	r3, #222	; 0xde
 800e444:	6839      	ldr	r1, [r7, #0]
 800e446:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e44a:	2300      	movs	r3, #0
 800e44c:	73fb      	strb	r3, [r7, #15]
 800e44e:	e004      	b.n	800e45a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e450:	2302      	movs	r3, #2
 800e452:	73fb      	strb	r3, [r7, #15]
 800e454:	e001      	b.n	800e45a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e456:	2302      	movs	r3, #2
 800e458:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e45c:	4618      	mov	r0, r3
 800e45e:	3714      	adds	r7, #20
 800e460:	46bd      	mov	sp, r7
 800e462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e466:	4770      	bx	lr

0800e468 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e468:	b480      	push	{r7}
 800e46a:	b085      	sub	sp, #20
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	460b      	mov	r3, r1
 800e472:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e474:	2300      	movs	r3, #0
 800e476:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e47e:	78fa      	ldrb	r2, [r7, #3]
 800e480:	429a      	cmp	r2, r3
 800e482:	d204      	bcs.n	800e48e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	78fa      	ldrb	r2, [r7, #3]
 800e488:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e48c:	e001      	b.n	800e492 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e48e:	2302      	movs	r3, #2
 800e490:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e492:	7bfb      	ldrb	r3, [r7, #15]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b087      	sub	sp, #28
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	4608      	mov	r0, r1
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	70fb      	strb	r3, [r7, #3]
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	70bb      	strb	r3, [r7, #2]
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e4c8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e4ca:	e025      	b.n	800e518 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e4cc:	7dfb      	ldrb	r3, [r7, #23]
 800e4ce:	221a      	movs	r2, #26
 800e4d0:	fb02 f303 	mul.w	r3, r2, r3
 800e4d4:	3308      	adds	r3, #8
 800e4d6:	68fa      	ldr	r2, [r7, #12]
 800e4d8:	4413      	add	r3, r2
 800e4da:	3302      	adds	r3, #2
 800e4dc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	795b      	ldrb	r3, [r3, #5]
 800e4e2:	78fa      	ldrb	r2, [r7, #3]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d002      	beq.n	800e4ee <USBH_FindInterface+0x4e>
 800e4e8:	78fb      	ldrb	r3, [r7, #3]
 800e4ea:	2bff      	cmp	r3, #255	; 0xff
 800e4ec:	d111      	bne.n	800e512 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e4f2:	78ba      	ldrb	r2, [r7, #2]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d002      	beq.n	800e4fe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e4f8:	78bb      	ldrb	r3, [r7, #2]
 800e4fa:	2bff      	cmp	r3, #255	; 0xff
 800e4fc:	d109      	bne.n	800e512 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e502:	787a      	ldrb	r2, [r7, #1]
 800e504:	429a      	cmp	r2, r3
 800e506:	d002      	beq.n	800e50e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e508:	787b      	ldrb	r3, [r7, #1]
 800e50a:	2bff      	cmp	r3, #255	; 0xff
 800e50c:	d101      	bne.n	800e512 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e50e:	7dfb      	ldrb	r3, [r7, #23]
 800e510:	e006      	b.n	800e520 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e512:	7dfb      	ldrb	r3, [r7, #23]
 800e514:	3301      	adds	r3, #1
 800e516:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e518:	7dfb      	ldrb	r3, [r7, #23]
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d9d6      	bls.n	800e4cc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e51e:	23ff      	movs	r3, #255	; 0xff
}
 800e520:	4618      	mov	r0, r3
 800e522:	371c      	adds	r7, #28
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr

0800e52c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b082      	sub	sp, #8
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f004 f8ed 	bl	8012714 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e53a:	2101      	movs	r1, #1
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f004 fa06 	bl	801294e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e542:	2300      	movs	r3, #0
}
 800e544:	4618      	mov	r0, r3
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b088      	sub	sp, #32
 800e550:	af04      	add	r7, sp, #16
 800e552:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e554:	2302      	movs	r3, #2
 800e556:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e558:	2300      	movs	r3, #0
 800e55a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e562:	b2db      	uxtb	r3, r3
 800e564:	2b01      	cmp	r3, #1
 800e566:	d102      	bne.n	800e56e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2203      	movs	r2, #3
 800e56c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	b2db      	uxtb	r3, r3
 800e574:	2b0b      	cmp	r3, #11
 800e576:	f200 823c 	bhi.w	800e9f2 <USBH_Process+0x4a6>
 800e57a:	a201      	add	r2, pc, #4	; (adr r2, 800e580 <USBH_Process+0x34>)
 800e57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e580:	0800e5b1 	.word	0x0800e5b1
 800e584:	0800e5ff 	.word	0x0800e5ff
 800e588:	0800e683 	.word	0x0800e683
 800e58c:	0800e971 	.word	0x0800e971
 800e590:	0800e9f3 	.word	0x0800e9f3
 800e594:	0800e743 	.word	0x0800e743
 800e598:	0800e8fb 	.word	0x0800e8fb
 800e59c:	0800e795 	.word	0x0800e795
 800e5a0:	0800e7d1 	.word	0x0800e7d1
 800e5a4:	0800e80b 	.word	0x0800e80b
 800e5a8:	0800e853 	.word	0x0800e853
 800e5ac:	0800e959 	.word	0x0800e959
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	f000 821c 	beq.w	800e9f6 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e5c4:	20c8      	movs	r0, #200	; 0xc8
 800e5c6:	f004 fa09 	bl	80129dc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f004 f8ff 	bl	80127ce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	f001 fd12 	bl	8010020 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e5fc:	e1fb      	b.n	800e9f6 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e604:	2b01      	cmp	r3, #1
 800e606:	d107      	bne.n	800e618 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2200      	movs	r2, #0
 800e60c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2202      	movs	r2, #2
 800e614:	701a      	strb	r2, [r3, #0]
 800e616:	e025      	b.n	800e664 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e61e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e622:	d914      	bls.n	800e64e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e62a:	3301      	adds	r3, #1
 800e62c:	b2da      	uxtb	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d903      	bls.n	800e646 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	220d      	movs	r2, #13
 800e642:	701a      	strb	r2, [r3, #0]
 800e644:	e00e      	b.n	800e664 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	701a      	strb	r2, [r3, #0]
 800e64c:	e00a      	b.n	800e664 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e654:	f103 020a 	add.w	r2, r3, #10
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e65e:	200a      	movs	r0, #10
 800e660:	f004 f9bc 	bl	80129dc <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2201      	movs	r2, #1
 800e668:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e678:	2200      	movs	r2, #0
 800e67a:	4619      	mov	r1, r3
 800e67c:	f001 fcd0 	bl	8010020 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e680:	e1c0      	b.n	800ea04 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d005      	beq.n	800e698 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e692:	2104      	movs	r1, #4
 800e694:	6878      	ldr	r0, [r7, #4]
 800e696:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e698:	2064      	movs	r0, #100	; 0x64
 800e69a:	f004 f99f 	bl	80129dc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f004 f86e 	bl	8012780 <USBH_LL_GetSpeed>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2205      	movs	r2, #5
 800e6b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f001 fb1f 	bl	800fcfa <USBH_AllocPipe>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	461a      	mov	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e6c4:	2180      	movs	r1, #128	; 0x80
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f001 fb17 	bl	800fcfa <USBH_AllocPipe>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	7919      	ldrb	r1, [r3, #4]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e6e8:	b292      	uxth	r2, r2
 800e6ea:	9202      	str	r2, [sp, #8]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	9201      	str	r2, [sp, #4]
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	2280      	movs	r2, #128	; 0x80
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f001 fad0 	bl	800fc9c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	7959      	ldrb	r1, [r3, #5]
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e710:	b292      	uxth	r2, r2
 800e712:	9202      	str	r2, [sp, #8]
 800e714:	2200      	movs	r2, #0
 800e716:	9201      	str	r2, [sp, #4]
 800e718:	9300      	str	r3, [sp, #0]
 800e71a:	4603      	mov	r3, r0
 800e71c:	2200      	movs	r2, #0
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f001 fabc 	bl	800fc9c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2201      	movs	r2, #1
 800e728:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e738:	2200      	movs	r2, #0
 800e73a:	4619      	mov	r1, r3
 800e73c:	f001 fc70 	bl	8010020 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e740:	e160      	b.n	800ea04 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 f964 	bl	800ea10 <USBH_HandleEnum>
 800e748:	4603      	mov	r3, r0
 800e74a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e74c:	7bbb      	ldrb	r3, [r7, #14]
 800e74e:	b2db      	uxtb	r3, r3
 800e750:	2b00      	cmp	r3, #0
 800e752:	f040 8152 	bne.w	800e9fa <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e764:	2b01      	cmp	r3, #1
 800e766:	d103      	bne.n	800e770 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2208      	movs	r2, #8
 800e76c:	701a      	strb	r2, [r3, #0]
 800e76e:	e002      	b.n	800e776 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2207      	movs	r2, #7
 800e774:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2205      	movs	r2, #5
 800e77a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e78a:	2200      	movs	r2, #0
 800e78c:	4619      	mov	r1, r3
 800e78e:	f001 fc47 	bl	8010020 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e792:	e132      	b.n	800e9fa <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	f000 812f 	beq.w	800e9fe <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7a6:	2101      	movs	r1, #1
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2208      	movs	r2, #8
 800e7b0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2205      	movs	r2, #5
 800e7b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	f001 fc29 	bl	8010020 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e7ce:	e116      	b.n	800e9fe <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	4619      	mov	r1, r3
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 fcf6 	bl	800f1cc <USBH_SetCfg>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d102      	bne.n	800e7ec <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2209      	movs	r2, #9
 800e7ea:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e800:	2200      	movs	r2, #0
 800e802:	4619      	mov	r1, r3
 800e804:	f001 fc0c 	bl	8010020 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e808:	e0fc      	b.n	800ea04 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e810:	f003 0320 	and.w	r3, r3, #32
 800e814:	2b00      	cmp	r3, #0
 800e816:	d00a      	beq.n	800e82e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e818:	2101      	movs	r1, #1
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 fcf9 	bl	800f212 <USBH_SetFeature>
 800e820:	4603      	mov	r3, r0
 800e822:	2b00      	cmp	r3, #0
 800e824:	d106      	bne.n	800e834 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	220a      	movs	r2, #10
 800e82a:	701a      	strb	r2, [r3, #0]
 800e82c:	e002      	b.n	800e834 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	220a      	movs	r2, #10
 800e832:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2201      	movs	r2, #1
 800e838:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e848:	2200      	movs	r2, #0
 800e84a:	4619      	mov	r1, r3
 800e84c:	f001 fbe8 	bl	8010020 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e850:	e0d8      	b.n	800ea04 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d03f      	beq.n	800e8dc <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2200      	movs	r2, #0
 800e860:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e864:	2300      	movs	r3, #0
 800e866:	73fb      	strb	r3, [r7, #15]
 800e868:	e016      	b.n	800e898 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e86a:	7bfa      	ldrb	r2, [r7, #15]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	32de      	adds	r2, #222	; 0xde
 800e870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e874:	791a      	ldrb	r2, [r3, #4]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d108      	bne.n	800e892 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e880:	7bfa      	ldrb	r2, [r7, #15]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	32de      	adds	r2, #222	; 0xde
 800e886:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e890:	e005      	b.n	800e89e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e892:	7bfb      	ldrb	r3, [r7, #15]
 800e894:	3301      	adds	r3, #1
 800e896:	73fb      	strb	r3, [r7, #15]
 800e898:	7bfb      	ldrb	r3, [r7, #15]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d0e5      	beq.n	800e86a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d016      	beq.n	800e8d6 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e8ae:	689b      	ldr	r3, [r3, #8]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	4798      	blx	r3
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d109      	bne.n	800e8ce <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2206      	movs	r2, #6
 800e8be:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e8c6:	2103      	movs	r1, #3
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	4798      	blx	r3
 800e8cc:	e006      	b.n	800e8dc <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	220d      	movs	r2, #13
 800e8d2:	701a      	strb	r2, [r3, #0]
 800e8d4:	e002      	b.n	800e8dc <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	220d      	movs	r2, #13
 800e8da:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2205      	movs	r2, #5
 800e8e0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	f001 fb94 	bl	8010020 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e8f8:	e084      	b.n	800ea04 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e900:	2b00      	cmp	r3, #0
 800e902:	d017      	beq.n	800e934 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e90a:	691b      	ldr	r3, [r3, #16]
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	4798      	blx	r3
 800e910:	4603      	mov	r3, r0
 800e912:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e914:	7bbb      	ldrb	r3, [r7, #14]
 800e916:	b2db      	uxtb	r3, r3
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d103      	bne.n	800e924 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	220b      	movs	r2, #11
 800e920:	701a      	strb	r2, [r3, #0]
 800e922:	e00a      	b.n	800e93a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800e924:	7bbb      	ldrb	r3, [r7, #14]
 800e926:	b2db      	uxtb	r3, r3
 800e928:	2b02      	cmp	r3, #2
 800e92a:	d106      	bne.n	800e93a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	220d      	movs	r2, #13
 800e930:	701a      	strb	r2, [r3, #0]
 800e932:	e002      	b.n	800e93a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	220d      	movs	r2, #13
 800e938:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2205      	movs	r2, #5
 800e93e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e94e:	2200      	movs	r2, #0
 800e950:	4619      	mov	r1, r3
 800e952:	f001 fb65 	bl	8010020 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e956:	e055      	b.n	800ea04 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d04f      	beq.n	800ea02 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e968:	695b      	ldr	r3, [r3, #20]
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	4798      	blx	r3
      }
      break;
 800e96e:	e048      	b.n	800ea02 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2200      	movs	r2, #0
 800e974:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7ff fcf7 	bl	800e36c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e984:	2b00      	cmp	r3, #0
 800e986:	d009      	beq.n	800e99c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2200      	movs	r2, #0
 800e998:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d005      	beq.n	800e9b2 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e9ac:	2105      	movs	r1, #5
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d107      	bne.n	800e9ce <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f7ff fdb0 	bl	800e52c <USBH_Start>
 800e9cc:	e002      	b.n	800e9d4 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f003 fea0 	bl	8012714 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	f001 fb18 	bl	8010020 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e9f0:	e008      	b.n	800ea04 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800e9f2:	bf00      	nop
 800e9f4:	e006      	b.n	800ea04 <USBH_Process+0x4b8>
      break;
 800e9f6:	bf00      	nop
 800e9f8:	e004      	b.n	800ea04 <USBH_Process+0x4b8>
      break;
 800e9fa:	bf00      	nop
 800e9fc:	e002      	b.n	800ea04 <USBH_Process+0x4b8>
    break;
 800e9fe:	bf00      	nop
 800ea00:	e000      	b.n	800ea04 <USBH_Process+0x4b8>
      break;
 800ea02:	bf00      	nop
  }
  return USBH_OK;
 800ea04:	2300      	movs	r3, #0
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop

0800ea10 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b088      	sub	sp, #32
 800ea14:	af04      	add	r7, sp, #16
 800ea16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	785b      	ldrb	r3, [r3, #1]
 800ea24:	2b07      	cmp	r3, #7
 800ea26:	f200 8208 	bhi.w	800ee3a <USBH_HandleEnum+0x42a>
 800ea2a:	a201      	add	r2, pc, #4	; (adr r2, 800ea30 <USBH_HandleEnum+0x20>)
 800ea2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea30:	0800ea51 	.word	0x0800ea51
 800ea34:	0800eb0f 	.word	0x0800eb0f
 800ea38:	0800eb79 	.word	0x0800eb79
 800ea3c:	0800ec07 	.word	0x0800ec07
 800ea40:	0800ec71 	.word	0x0800ec71
 800ea44:	0800ece1 	.word	0x0800ece1
 800ea48:	0800ed7d 	.word	0x0800ed7d
 800ea4c:	0800edfb 	.word	0x0800edfb
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ea50:	2108      	movs	r1, #8
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 faea 	bl	800f02c <USBH_Get_DevDesc>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ea5c:	7bbb      	ldrb	r3, [r7, #14]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d130      	bne.n	800eac4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	7919      	ldrb	r1, [r3, #4]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ea82:	687a      	ldr	r2, [r7, #4]
 800ea84:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ea86:	b292      	uxth	r2, r2
 800ea88:	9202      	str	r2, [sp, #8]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	9201      	str	r2, [sp, #4]
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	4603      	mov	r3, r0
 800ea92:	2280      	movs	r2, #128	; 0x80
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f001 f901 	bl	800fc9c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	7959      	ldrb	r1, [r3, #5]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800eaae:	b292      	uxth	r2, r2
 800eab0:	9202      	str	r2, [sp, #8]
 800eab2:	2200      	movs	r2, #0
 800eab4:	9201      	str	r2, [sp, #4]
 800eab6:	9300      	str	r3, [sp, #0]
 800eab8:	4603      	mov	r3, r0
 800eaba:	2200      	movs	r2, #0
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f001 f8ed 	bl	800fc9c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800eac2:	e1bc      	b.n	800ee3e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eac4:	7bbb      	ldrb	r3, [r7, #14]
 800eac6:	2b03      	cmp	r3, #3
 800eac8:	f040 81b9 	bne.w	800ee3e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ead2:	3301      	adds	r3, #1
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eae2:	2b03      	cmp	r3, #3
 800eae4:	d903      	bls.n	800eaee <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	220d      	movs	r2, #13
 800eaea:	701a      	strb	r2, [r3, #0]
      break;
 800eaec:	e1a7      	b.n	800ee3e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	795b      	ldrb	r3, [r3, #5]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f001 f921 	bl	800fd3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	791b      	ldrb	r3, [r3, #4]
 800eafe:	4619      	mov	r1, r3
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f001 f91b 	bl	800fd3c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	701a      	strb	r2, [r3, #0]
      break;
 800eb0c:	e197      	b.n	800ee3e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800eb0e:	2112      	movs	r1, #18
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 fa8b 	bl	800f02c <USBH_Get_DevDesc>
 800eb16:	4603      	mov	r3, r0
 800eb18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eb1a:	7bbb      	ldrb	r3, [r7, #14]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d103      	bne.n	800eb28 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2202      	movs	r2, #2
 800eb24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800eb26:	e18c      	b.n	800ee42 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800eb28:	7bbb      	ldrb	r3, [r7, #14]
 800eb2a:	2b03      	cmp	r3, #3
 800eb2c:	f040 8189 	bne.w	800ee42 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb36:	3301      	adds	r3, #1
 800eb38:	b2da      	uxtb	r2, r3
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800eb46:	2b03      	cmp	r3, #3
 800eb48:	d903      	bls.n	800eb52 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	220d      	movs	r2, #13
 800eb4e:	701a      	strb	r2, [r3, #0]
      break;
 800eb50:	e177      	b.n	800ee42 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	795b      	ldrb	r3, [r3, #5]
 800eb56:	4619      	mov	r1, r3
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f001 f8ef 	bl	800fd3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	791b      	ldrb	r3, [r3, #4]
 800eb62:	4619      	mov	r1, r3
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f001 f8e9 	bl	800fd3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2200      	movs	r2, #0
 800eb74:	701a      	strb	r2, [r3, #0]
      break;
 800eb76:	e164      	b.n	800ee42 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800eb78:	2101      	movs	r1, #1
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 fb02 	bl	800f184 <USBH_SetAddress>
 800eb80:	4603      	mov	r3, r0
 800eb82:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800eb84:	7bbb      	ldrb	r3, [r7, #14]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d132      	bne.n	800ebf0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800eb8a:	2002      	movs	r0, #2
 800eb8c:	f003 ff26 	bl	80129dc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2203      	movs	r2, #3
 800eb9c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	7919      	ldrb	r1, [r3, #4]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ebb2:	b292      	uxth	r2, r2
 800ebb4:	9202      	str	r2, [sp, #8]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	9201      	str	r2, [sp, #4]
 800ebba:	9300      	str	r3, [sp, #0]
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	2280      	movs	r2, #128	; 0x80
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f001 f86b 	bl	800fc9c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	7959      	ldrb	r1, [r3, #5]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ebda:	b292      	uxth	r2, r2
 800ebdc:	9202      	str	r2, [sp, #8]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	9201      	str	r2, [sp, #4]
 800ebe2:	9300      	str	r3, [sp, #0]
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f001 f857 	bl	800fc9c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ebee:	e12a      	b.n	800ee46 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ebf0:	7bbb      	ldrb	r3, [r7, #14]
 800ebf2:	2b03      	cmp	r3, #3
 800ebf4:	f040 8127 	bne.w	800ee46 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	220d      	movs	r2, #13
 800ebfc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2200      	movs	r2, #0
 800ec02:	705a      	strb	r2, [r3, #1]
      break;
 800ec04:	e11f      	b.n	800ee46 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ec06:	2109      	movs	r1, #9
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 fa37 	bl	800f07c <USBH_Get_CfgDesc>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ec12:	7bbb      	ldrb	r3, [r7, #14]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d103      	bne.n	800ec20 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2204      	movs	r2, #4
 800ec1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ec1e:	e114      	b.n	800ee4a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ec20:	7bbb      	ldrb	r3, [r7, #14]
 800ec22:	2b03      	cmp	r3, #3
 800ec24:	f040 8111 	bne.w	800ee4a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec2e:	3301      	adds	r3, #1
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec3e:	2b03      	cmp	r3, #3
 800ec40:	d903      	bls.n	800ec4a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	220d      	movs	r2, #13
 800ec46:	701a      	strb	r2, [r3, #0]
      break;
 800ec48:	e0ff      	b.n	800ee4a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	795b      	ldrb	r3, [r3, #5]
 800ec4e:	4619      	mov	r1, r3
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f001 f873 	bl	800fd3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	791b      	ldrb	r3, [r3, #4]
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f001 f86d 	bl	800fd3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2200      	movs	r2, #0
 800ec66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	701a      	strb	r2, [r3, #0]
      break;
 800ec6e:	e0ec      	b.n	800ee4a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ec76:	4619      	mov	r1, r3
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 f9ff 	bl	800f07c <USBH_Get_CfgDesc>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ec82:	7bbb      	ldrb	r3, [r7, #14]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d103      	bne.n	800ec90 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2205      	movs	r2, #5
 800ec8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ec8e:	e0de      	b.n	800ee4e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ec90:	7bbb      	ldrb	r3, [r7, #14]
 800ec92:	2b03      	cmp	r3, #3
 800ec94:	f040 80db 	bne.w	800ee4e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ec9e:	3301      	adds	r3, #1
 800eca0:	b2da      	uxtb	r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ecae:	2b03      	cmp	r3, #3
 800ecb0:	d903      	bls.n	800ecba <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	220d      	movs	r2, #13
 800ecb6:	701a      	strb	r2, [r3, #0]
      break;
 800ecb8:	e0c9      	b.n	800ee4e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	795b      	ldrb	r3, [r3, #5]
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f001 f83b 	bl	800fd3c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	791b      	ldrb	r3, [r3, #4]
 800ecca:	4619      	mov	r1, r3
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f001 f835 	bl	800fd3c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	701a      	strb	r2, [r3, #0]
      break;
 800ecde:	e0b6      	b.n	800ee4e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d036      	beq.n	800ed58 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ecf6:	23ff      	movs	r3, #255	; 0xff
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 f9e3 	bl	800f0c4 <USBH_Get_StringDesc>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ed02:	7bbb      	ldrb	r3, [r7, #14]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d111      	bne.n	800ed2c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2206      	movs	r2, #6
 800ed0c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2205      	movs	r2, #5
 800ed12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ed22:	2200      	movs	r2, #0
 800ed24:	4619      	mov	r1, r3
 800ed26:	f001 f97b 	bl	8010020 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ed2a:	e092      	b.n	800ee52 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ed2c:	7bbb      	ldrb	r3, [r7, #14]
 800ed2e:	2b03      	cmp	r3, #3
 800ed30:	f040 808f 	bne.w	800ee52 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2206      	movs	r2, #6
 800ed38:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2205      	movs	r2, #5
 800ed3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ed4e:	2200      	movs	r2, #0
 800ed50:	4619      	mov	r1, r3
 800ed52:	f001 f965 	bl	8010020 <osMessagePut>
      break;
 800ed56:	e07c      	b.n	800ee52 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2206      	movs	r2, #6
 800ed5c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2205      	movs	r2, #5
 800ed62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ed72:	2200      	movs	r2, #0
 800ed74:	4619      	mov	r1, r3
 800ed76:	f001 f953 	bl	8010020 <osMessagePut>
      break;
 800ed7a:	e06a      	b.n	800ee52 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d027      	beq.n	800edd6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ed92:	23ff      	movs	r3, #255	; 0xff
 800ed94:	6878      	ldr	r0, [r7, #4]
 800ed96:	f000 f995 	bl	800f0c4 <USBH_Get_StringDesc>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ed9e:	7bbb      	ldrb	r3, [r7, #14]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d103      	bne.n	800edac <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2207      	movs	r2, #7
 800eda8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800edaa:	e054      	b.n	800ee56 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800edac:	7bbb      	ldrb	r3, [r7, #14]
 800edae:	2b03      	cmp	r3, #3
 800edb0:	d151      	bne.n	800ee56 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2207      	movs	r2, #7
 800edb6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2205      	movs	r2, #5
 800edbc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800edcc:	2200      	movs	r2, #0
 800edce:	4619      	mov	r1, r3
 800edd0:	f001 f926 	bl	8010020 <osMessagePut>
      break;
 800edd4:	e03f      	b.n	800ee56 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2207      	movs	r2, #7
 800edda:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2205      	movs	r2, #5
 800ede0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800edf0:	2200      	movs	r2, #0
 800edf2:	4619      	mov	r1, r3
 800edf4:	f001 f914 	bl	8010020 <osMessagePut>
      break;
 800edf8:	e02d      	b.n	800ee56 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d017      	beq.n	800ee34 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ee10:	23ff      	movs	r3, #255	; 0xff
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 f956 	bl	800f0c4 <USBH_Get_StringDesc>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ee1c:	7bbb      	ldrb	r3, [r7, #14]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d102      	bne.n	800ee28 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ee22:	2300      	movs	r3, #0
 800ee24:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ee26:	e018      	b.n	800ee5a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ee28:	7bbb      	ldrb	r3, [r7, #14]
 800ee2a:	2b03      	cmp	r3, #3
 800ee2c:	d115      	bne.n	800ee5a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	73fb      	strb	r3, [r7, #15]
      break;
 800ee32:	e012      	b.n	800ee5a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800ee34:	2300      	movs	r3, #0
 800ee36:	73fb      	strb	r3, [r7, #15]
      break;
 800ee38:	e00f      	b.n	800ee5a <USBH_HandleEnum+0x44a>

    default:
      break;
 800ee3a:	bf00      	nop
 800ee3c:	e00e      	b.n	800ee5c <USBH_HandleEnum+0x44c>
      break;
 800ee3e:	bf00      	nop
 800ee40:	e00c      	b.n	800ee5c <USBH_HandleEnum+0x44c>
      break;
 800ee42:	bf00      	nop
 800ee44:	e00a      	b.n	800ee5c <USBH_HandleEnum+0x44c>
      break;
 800ee46:	bf00      	nop
 800ee48:	e008      	b.n	800ee5c <USBH_HandleEnum+0x44c>
      break;
 800ee4a:	bf00      	nop
 800ee4c:	e006      	b.n	800ee5c <USBH_HandleEnum+0x44c>
      break;
 800ee4e:	bf00      	nop
 800ee50:	e004      	b.n	800ee5c <USBH_HandleEnum+0x44c>
      break;
 800ee52:	bf00      	nop
 800ee54:	e002      	b.n	800ee5c <USBH_HandleEnum+0x44c>
      break;
 800ee56:	bf00      	nop
 800ee58:	e000      	b.n	800ee5c <USBH_HandleEnum+0x44c>
      break;
 800ee5a:	bf00      	nop
  }
  return Status;
 800ee5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop

0800ee68 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	683a      	ldr	r2, [r7, #0]
 800ee76:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ee7a:	bf00      	nop
 800ee7c:	370c      	adds	r7, #12
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr

0800ee86 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ee86:	b580      	push	{r7, lr}
 800ee88:	b082      	sub	sp, #8
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ee94:	1c5a      	adds	r2, r3, #1
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 f804 	bl	800eeaa <USBH_HandleSof>
}
 800eea2:	bf00      	nop
 800eea4:	3708      	adds	r7, #8
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b082      	sub	sp, #8
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	b2db      	uxtb	r3, r3
 800eeb8:	2b0b      	cmp	r3, #11
 800eeba:	d10a      	bne.n	800eed2 <USBH_HandleSof+0x28>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d005      	beq.n	800eed2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eecc:	699b      	ldr	r3, [r3, #24]
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	4798      	blx	r3
  }
}
 800eed2:	bf00      	nop
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b082      	sub	sp, #8
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2201      	movs	r2, #1
 800eee6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2201      	movs	r2, #1
 800eeee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eefe:	2200      	movs	r2, #0
 800ef00:	4619      	mov	r1, r3
 800ef02:	f001 f88d 	bl	8010020 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ef06:	bf00      	nop
}
 800ef08:	3708      	adds	r7, #8
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ef0e:	b480      	push	{r7}
 800ef10:	b083      	sub	sp, #12
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2200      	movs	r2, #0
 800ef1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ef1e:	bf00      	nop
}
 800ef20:	370c      	adds	r7, #12
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b082      	sub	sp, #8
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2201      	movs	r2, #1
 800ef36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2200      	movs	r2, #0
 800ef46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ef5e:	2200      	movs	r2, #0
 800ef60:	4619      	mov	r1, r3
 800ef62:	f001 f85d 	bl	8010020 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ef66:	2300      	movs	r3, #0
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f003 fbda 	bl	801274a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	791b      	ldrb	r3, [r3, #4]
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f000 fecd 	bl	800fd3c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	795b      	ldrb	r3, [r3, #5]
 800efa6:	4619      	mov	r1, r3
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f000 fec7 	bl	800fd3c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2201      	movs	r2, #1
 800efb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800efc2:	2200      	movs	r2, #0
 800efc4:	4619      	mov	r1, r3
 800efc6:	f001 f82b 	bl	8010020 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800efca:	2300      	movs	r3, #0
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b086      	sub	sp, #24
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800efe2:	f107 030c 	add.w	r3, r7, #12
 800efe6:	f04f 32ff 	mov.w	r2, #4294967295
 800efea:	4618      	mov	r0, r3
 800efec:	f001 f858 	bl	80100a0 <osMessageGet>
    if (event.status == osEventMessage)
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2b10      	cmp	r3, #16
 800eff4:	d1f2      	bne.n	800efdc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f7ff faa8 	bl	800e54c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800effc:	e7ee      	b.n	800efdc <USBH_Process_OS+0x8>

0800effe <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800effe:	b580      	push	{r7, lr}
 800f000:	b082      	sub	sp, #8
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2201      	movs	r2, #1
 800f00a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f01a:	2200      	movs	r2, #0
 800f01c:	4619      	mov	r1, r3
 800f01e:	f000 ffff 	bl	8010020 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800f022:	2300      	movs	r3, #0
}
 800f024:	4618      	mov	r0, r3
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b086      	sub	sp, #24
 800f030:	af02      	add	r7, sp, #8
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	460b      	mov	r3, r1
 800f036:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f03e:	78fb      	ldrb	r3, [r7, #3]
 800f040:	b29b      	uxth	r3, r3
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	4613      	mov	r3, r2
 800f046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f04a:	2100      	movs	r1, #0
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 f864 	bl	800f11a <USBH_GetDescriptor>
 800f052:	4603      	mov	r3, r0
 800f054:	73fb      	strb	r3, [r7, #15]
 800f056:	7bfb      	ldrb	r3, [r7, #15]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d10a      	bne.n	800f072 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f068:	78fa      	ldrb	r2, [r7, #3]
 800f06a:	b292      	uxth	r2, r2
 800f06c:	4619      	mov	r1, r3
 800f06e:	f000 f918 	bl	800f2a2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f072:	7bfb      	ldrb	r3, [r7, #15]
}
 800f074:	4618      	mov	r0, r3
 800f076:	3710      	adds	r7, #16
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b086      	sub	sp, #24
 800f080:	af02      	add	r7, sp, #8
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	460b      	mov	r3, r1
 800f086:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	331c      	adds	r3, #28
 800f08c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f08e:	887b      	ldrh	r3, [r7, #2]
 800f090:	9300      	str	r3, [sp, #0]
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f098:	2100      	movs	r1, #0
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 f83d 	bl	800f11a <USBH_GetDescriptor>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	72fb      	strb	r3, [r7, #11]
 800f0a4:	7afb      	ldrb	r3, [r7, #11]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d107      	bne.n	800f0ba <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f0b0:	887a      	ldrh	r2, [r7, #2]
 800f0b2:	68f9      	ldr	r1, [r7, #12]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f000 f964 	bl	800f382 <USBH_ParseCfgDesc>
  }

  return status;
 800f0ba:	7afb      	ldrb	r3, [r7, #11]
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b088      	sub	sp, #32
 800f0c8:	af02      	add	r7, sp, #8
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	607a      	str	r2, [r7, #4]
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	72fb      	strb	r3, [r7, #11]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f0d8:	7afb      	ldrb	r3, [r7, #11]
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f0e0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f0e8:	893b      	ldrh	r3, [r7, #8]
 800f0ea:	9300      	str	r3, [sp, #0]
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	2100      	movs	r1, #0
 800f0f0:	68f8      	ldr	r0, [r7, #12]
 800f0f2:	f000 f812 	bl	800f11a <USBH_GetDescriptor>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	75fb      	strb	r3, [r7, #23]
 800f0fa:	7dfb      	ldrb	r3, [r7, #23]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d107      	bne.n	800f110 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f106:	893a      	ldrh	r2, [r7, #8]
 800f108:	6879      	ldr	r1, [r7, #4]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f000 fa37 	bl	800f57e <USBH_ParseStringDesc>
  }

  return status;
 800f110:	7dfb      	ldrb	r3, [r7, #23]
}
 800f112:	4618      	mov	r0, r3
 800f114:	3718      	adds	r7, #24
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}

0800f11a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f11a:	b580      	push	{r7, lr}
 800f11c:	b084      	sub	sp, #16
 800f11e:	af00      	add	r7, sp, #0
 800f120:	60f8      	str	r0, [r7, #12]
 800f122:	607b      	str	r3, [r7, #4]
 800f124:	460b      	mov	r3, r1
 800f126:	72fb      	strb	r3, [r7, #11]
 800f128:	4613      	mov	r3, r2
 800f12a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	789b      	ldrb	r3, [r3, #2]
 800f130:	2b01      	cmp	r3, #1
 800f132:	d11c      	bne.n	800f16e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f134:	7afb      	ldrb	r3, [r7, #11]
 800f136:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f13a:	b2da      	uxtb	r2, r3
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2206      	movs	r2, #6
 800f144:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	893a      	ldrh	r2, [r7, #8]
 800f14a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f14c:	893b      	ldrh	r3, [r7, #8]
 800f14e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f156:	d104      	bne.n	800f162 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f240 4209 	movw	r2, #1033	; 0x409
 800f15e:	829a      	strh	r2, [r3, #20]
 800f160:	e002      	b.n	800f168 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2200      	movs	r2, #0
 800f166:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	8b3a      	ldrh	r2, [r7, #24]
 800f16c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f16e:	8b3b      	ldrh	r3, [r7, #24]
 800f170:	461a      	mov	r2, r3
 800f172:	6879      	ldr	r1, [r7, #4]
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	f000 fa50 	bl	800f61a <USBH_CtlReq>
 800f17a:	4603      	mov	r3, r0
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	460b      	mov	r3, r1
 800f18e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	789b      	ldrb	r3, [r3, #2]
 800f194:	2b01      	cmp	r3, #1
 800f196:	d10f      	bne.n	800f1b8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2200      	movs	r2, #0
 800f19c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2205      	movs	r2, #5
 800f1a2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f1a4:	78fb      	ldrb	r3, [r7, #3]
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 fa2c 	bl	800f61a <USBH_CtlReq>
 800f1c2:	4603      	mov	r3, r0
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}

0800f1cc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b082      	sub	sp, #8
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	789b      	ldrb	r3, [r3, #2]
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d10e      	bne.n	800f1fe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2209      	movs	r2, #9
 800f1ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	887a      	ldrh	r2, [r7, #2]
 800f1f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2200      	movs	r2, #0
 800f1fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f1fe:	2200      	movs	r2, #0
 800f200:	2100      	movs	r1, #0
 800f202:	6878      	ldr	r0, [r7, #4]
 800f204:	f000 fa09 	bl	800f61a <USBH_CtlReq>
 800f208:	4603      	mov	r3, r0
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3708      	adds	r7, #8
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b082      	sub	sp, #8
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
 800f21a:	460b      	mov	r3, r1
 800f21c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	789b      	ldrb	r3, [r3, #2]
 800f222:	2b01      	cmp	r3, #1
 800f224:	d10f      	bne.n	800f246 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2200      	movs	r2, #0
 800f22a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2203      	movs	r2, #3
 800f230:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f232:	78fb      	ldrb	r3, [r7, #3]
 800f234:	b29a      	uxth	r2, r3
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2200      	movs	r2, #0
 800f23e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f246:	2200      	movs	r2, #0
 800f248:	2100      	movs	r1, #0
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 f9e5 	bl	800f61a <USBH_CtlReq>
 800f250:	4603      	mov	r3, r0
}
 800f252:	4618      	mov	r0, r3
 800f254:	3708      	adds	r7, #8
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b082      	sub	sp, #8
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
 800f262:	460b      	mov	r3, r1
 800f264:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	789b      	ldrb	r3, [r3, #2]
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d10f      	bne.n	800f28e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2202      	movs	r2, #2
 800f272:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2201      	movs	r2, #1
 800f278:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	2200      	movs	r2, #0
 800f27e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f280:	78fb      	ldrb	r3, [r7, #3]
 800f282:	b29a      	uxth	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2200      	movs	r2, #0
 800f28c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f28e:	2200      	movs	r2, #0
 800f290:	2100      	movs	r1, #0
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 f9c1 	bl	800f61a <USBH_CtlReq>
 800f298:	4603      	mov	r3, r0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3708      	adds	r7, #8
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}

0800f2a2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f2a2:	b480      	push	{r7}
 800f2a4:	b085      	sub	sp, #20
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	60f8      	str	r0, [r7, #12]
 800f2aa:	60b9      	str	r1, [r7, #8]
 800f2ac:	4613      	mov	r3, r2
 800f2ae:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	781a      	ldrb	r2, [r3, #0]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	785a      	ldrb	r2, [r3, #1]
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	3302      	adds	r3, #2
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	3303      	adds	r3, #3
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	b29b      	uxth	r3, r3
 800f2d0:	021b      	lsls	r3, r3, #8
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	4313      	orrs	r3, r2
 800f2d6:	b29a      	uxth	r2, r3
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	791a      	ldrb	r2, [r3, #4]
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	795a      	ldrb	r2, [r3, #5]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	799a      	ldrb	r2, [r3, #6]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	79da      	ldrb	r2, [r3, #7]
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f2fc:	88fb      	ldrh	r3, [r7, #6]
 800f2fe:	2b08      	cmp	r3, #8
 800f300:	d939      	bls.n	800f376 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	3308      	adds	r3, #8
 800f306:	781b      	ldrb	r3, [r3, #0]
 800f308:	b29a      	uxth	r2, r3
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	3309      	adds	r3, #9
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	b29b      	uxth	r3, r3
 800f312:	021b      	lsls	r3, r3, #8
 800f314:	b29b      	uxth	r3, r3
 800f316:	4313      	orrs	r3, r2
 800f318:	b29a      	uxth	r2, r3
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	330a      	adds	r3, #10
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	b29a      	uxth	r2, r3
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	330b      	adds	r3, #11
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	021b      	lsls	r3, r3, #8
 800f330:	b29b      	uxth	r3, r3
 800f332:	4313      	orrs	r3, r2
 800f334:	b29a      	uxth	r2, r3
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	330c      	adds	r3, #12
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	b29a      	uxth	r2, r3
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	330d      	adds	r3, #13
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	b29b      	uxth	r3, r3
 800f34a:	021b      	lsls	r3, r3, #8
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	4313      	orrs	r3, r2
 800f350:	b29a      	uxth	r2, r3
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	7b9a      	ldrb	r2, [r3, #14]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	7bda      	ldrb	r2, [r3, #15]
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	7c1a      	ldrb	r2, [r3, #16]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	7c5a      	ldrb	r2, [r3, #17]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	745a      	strb	r2, [r3, #17]
  }
}
 800f376:	bf00      	nop
 800f378:	3714      	adds	r7, #20
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr

0800f382 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f382:	b580      	push	{r7, lr}
 800f384:	b08a      	sub	sp, #40	; 0x28
 800f386:	af00      	add	r7, sp, #0
 800f388:	60f8      	str	r0, [r7, #12]
 800f38a:	60b9      	str	r1, [r7, #8]
 800f38c:	4613      	mov	r3, r2
 800f38e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800f394:	2300      	movs	r3, #0
 800f396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800f39a:	2300      	movs	r3, #0
 800f39c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	781a      	ldrb	r2, [r3, #0]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	785a      	ldrb	r2, [r3, #1]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	3302      	adds	r3, #2
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	b29a      	uxth	r2, r3
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	3303      	adds	r3, #3
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	021b      	lsls	r3, r3, #8
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	b29a      	uxth	r2, r3
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	791a      	ldrb	r2, [r3, #4]
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	795a      	ldrb	r2, [r3, #5]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	799a      	ldrb	r2, [r3, #6]
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	79da      	ldrb	r2, [r3, #7]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	7a1a      	ldrb	r2, [r3, #8]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f3f8:	88fb      	ldrh	r3, [r7, #6]
 800f3fa:	2b09      	cmp	r3, #9
 800f3fc:	d95f      	bls.n	800f4be <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800f3fe:	2309      	movs	r3, #9
 800f400:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800f402:	2300      	movs	r3, #0
 800f404:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f406:	e051      	b.n	800f4ac <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f408:	f107 0316 	add.w	r3, r7, #22
 800f40c:	4619      	mov	r1, r3
 800f40e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f410:	f000 f8e8 	bl	800f5e4 <USBH_GetNextDesc>
 800f414:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800f416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f418:	785b      	ldrb	r3, [r3, #1]
 800f41a:	2b04      	cmp	r3, #4
 800f41c:	d146      	bne.n	800f4ac <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800f41e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f422:	221a      	movs	r2, #26
 800f424:	fb02 f303 	mul.w	r3, r2, r3
 800f428:	3308      	adds	r3, #8
 800f42a:	68fa      	ldr	r2, [r7, #12]
 800f42c:	4413      	add	r3, r2
 800f42e:	3302      	adds	r3, #2
 800f430:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f434:	69f8      	ldr	r0, [r7, #28]
 800f436:	f000 f846 	bl	800f4c6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f43a:	2300      	movs	r3, #0
 800f43c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800f440:	2300      	movs	r3, #0
 800f442:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f444:	e022      	b.n	800f48c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f446:	f107 0316 	add.w	r3, r7, #22
 800f44a:	4619      	mov	r1, r3
 800f44c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f44e:	f000 f8c9 	bl	800f5e4 <USBH_GetNextDesc>
 800f452:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800f454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f456:	785b      	ldrb	r3, [r3, #1]
 800f458:	2b05      	cmp	r3, #5
 800f45a:	d117      	bne.n	800f48c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f45c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f460:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f464:	3201      	adds	r2, #1
 800f466:	00d2      	lsls	r2, r2, #3
 800f468:	211a      	movs	r1, #26
 800f46a:	fb01 f303 	mul.w	r3, r1, r3
 800f46e:	4413      	add	r3, r2
 800f470:	3308      	adds	r3, #8
 800f472:	68fa      	ldr	r2, [r7, #12]
 800f474:	4413      	add	r3, r2
 800f476:	3304      	adds	r3, #4
 800f478:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f47a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f47c:	69b8      	ldr	r0, [r7, #24]
 800f47e:	f000 f851 	bl	800f524 <USBH_ParseEPDesc>
            ep_ix++;
 800f482:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f486:	3301      	adds	r3, #1
 800f488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	791b      	ldrb	r3, [r3, #4]
 800f490:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f494:	429a      	cmp	r2, r3
 800f496:	d204      	bcs.n	800f4a2 <USBH_ParseCfgDesc+0x120>
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	885a      	ldrh	r2, [r3, #2]
 800f49c:	8afb      	ldrh	r3, [r7, #22]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d8d1      	bhi.n	800f446 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f4a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f4a6:	3301      	adds	r3, #1
 800f4a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f4ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f4b0:	2b01      	cmp	r3, #1
 800f4b2:	d804      	bhi.n	800f4be <USBH_ParseCfgDesc+0x13c>
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	885a      	ldrh	r2, [r3, #2]
 800f4b8:	8afb      	ldrh	r3, [r7, #22]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d8a4      	bhi.n	800f408 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f4be:	bf00      	nop
 800f4c0:	3728      	adds	r7, #40	; 0x28
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}

0800f4c6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f4c6:	b480      	push	{r7}
 800f4c8:	b083      	sub	sp, #12
 800f4ca:	af00      	add	r7, sp, #0
 800f4cc:	6078      	str	r0, [r7, #4]
 800f4ce:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	781a      	ldrb	r2, [r3, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	785a      	ldrb	r2, [r3, #1]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	789a      	ldrb	r2, [r3, #2]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	78da      	ldrb	r2, [r3, #3]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	791a      	ldrb	r2, [r3, #4]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	795a      	ldrb	r2, [r3, #5]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	799a      	ldrb	r2, [r3, #6]
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	79da      	ldrb	r2, [r3, #7]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	7a1a      	ldrb	r2, [r3, #8]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	721a      	strb	r2, [r3, #8]
}
 800f518:	bf00      	nop
 800f51a:	370c      	adds	r7, #12
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr

0800f524 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f524:	b480      	push	{r7}
 800f526:	b083      	sub	sp, #12
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	781a      	ldrb	r2, [r3, #0]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	785a      	ldrb	r2, [r3, #1]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	789a      	ldrb	r2, [r3, #2]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	78da      	ldrb	r2, [r3, #3]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	3304      	adds	r3, #4
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	b29a      	uxth	r2, r3
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	3305      	adds	r3, #5
 800f55a:	781b      	ldrb	r3, [r3, #0]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	021b      	lsls	r3, r3, #8
 800f560:	b29b      	uxth	r3, r3
 800f562:	4313      	orrs	r3, r2
 800f564:	b29a      	uxth	r2, r3
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	799a      	ldrb	r2, [r3, #6]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	719a      	strb	r2, [r3, #6]
}
 800f572:	bf00      	nop
 800f574:	370c      	adds	r7, #12
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f57e:	b480      	push	{r7}
 800f580:	b087      	sub	sp, #28
 800f582:	af00      	add	r7, sp, #0
 800f584:	60f8      	str	r0, [r7, #12]
 800f586:	60b9      	str	r1, [r7, #8]
 800f588:	4613      	mov	r3, r2
 800f58a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	3301      	adds	r3, #1
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	2b03      	cmp	r3, #3
 800f594:	d120      	bne.n	800f5d8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	1e9a      	subs	r2, r3, #2
 800f59c:	88fb      	ldrh	r3, [r7, #6]
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	bf28      	it	cs
 800f5a2:	4613      	movcs	r3, r2
 800f5a4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	3302      	adds	r3, #2
 800f5aa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	82fb      	strh	r3, [r7, #22]
 800f5b0:	e00b      	b.n	800f5ca <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f5b2:	8afb      	ldrh	r3, [r7, #22]
 800f5b4:	68fa      	ldr	r2, [r7, #12]
 800f5b6:	4413      	add	r3, r2
 800f5b8:	781a      	ldrb	r2, [r3, #0]
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f5c4:	8afb      	ldrh	r3, [r7, #22]
 800f5c6:	3302      	adds	r3, #2
 800f5c8:	82fb      	strh	r3, [r7, #22]
 800f5ca:	8afa      	ldrh	r2, [r7, #22]
 800f5cc:	8abb      	ldrh	r3, [r7, #20]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d3ef      	bcc.n	800f5b2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	701a      	strb	r2, [r3, #0]
  }
}
 800f5d8:	bf00      	nop
 800f5da:	371c      	adds	r7, #28
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr

0800f5e4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b085      	sub	sp, #20
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	881a      	ldrh	r2, [r3, #0]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	4413      	add	r3, r2
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4413      	add	r3, r2
 800f60a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f60c:	68fb      	ldr	r3, [r7, #12]
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3714      	adds	r7, #20
 800f612:	46bd      	mov	sp, r7
 800f614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f618:	4770      	bx	lr

0800f61a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b086      	sub	sp, #24
 800f61e:	af00      	add	r7, sp, #0
 800f620:	60f8      	str	r0, [r7, #12]
 800f622:	60b9      	str	r1, [r7, #8]
 800f624:	4613      	mov	r3, r2
 800f626:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f628:	2301      	movs	r3, #1
 800f62a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	789b      	ldrb	r3, [r3, #2]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d002      	beq.n	800f63a <USBH_CtlReq+0x20>
 800f634:	2b02      	cmp	r3, #2
 800f636:	d01d      	beq.n	800f674 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800f638:	e043      	b.n	800f6c2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	88fa      	ldrh	r2, [r7, #6]
 800f644:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2201      	movs	r2, #1
 800f64a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2202      	movs	r2, #2
 800f650:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f652:	2301      	movs	r3, #1
 800f654:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2203      	movs	r2, #3
 800f65a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f66a:	2200      	movs	r2, #0
 800f66c:	4619      	mov	r1, r3
 800f66e:	f000 fcd7 	bl	8010020 <osMessagePut>
      break;
 800f672:	e026      	b.n	800f6c2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f000 f829 	bl	800f6cc <USBH_HandleControl>
 800f67a:	4603      	mov	r3, r0
 800f67c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f67e:	7dfb      	ldrb	r3, [r7, #23]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d002      	beq.n	800f68a <USBH_CtlReq+0x70>
 800f684:	7dfb      	ldrb	r3, [r7, #23]
 800f686:	2b03      	cmp	r3, #3
 800f688:	d106      	bne.n	800f698 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2201      	movs	r2, #1
 800f68e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2200      	movs	r2, #0
 800f694:	761a      	strb	r2, [r3, #24]
 800f696:	e005      	b.n	800f6a4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f698:	7dfb      	ldrb	r3, [r7, #23]
 800f69a:	2b02      	cmp	r3, #2
 800f69c:	d102      	bne.n	800f6a4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	2203      	movs	r2, #3
 800f6a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	4619      	mov	r1, r3
 800f6bc:	f000 fcb0 	bl	8010020 <osMessagePut>
      break;
 800f6c0:	bf00      	nop
  }
  return status;
 800f6c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	3718      	adds	r7, #24
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b086      	sub	sp, #24
 800f6d0:	af02      	add	r7, sp, #8
 800f6d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	7e1b      	ldrb	r3, [r3, #24]
 800f6e0:	3b01      	subs	r3, #1
 800f6e2:	2b0a      	cmp	r3, #10
 800f6e4:	f200 8229 	bhi.w	800fb3a <USBH_HandleControl+0x46e>
 800f6e8:	a201      	add	r2, pc, #4	; (adr r2, 800f6f0 <USBH_HandleControl+0x24>)
 800f6ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ee:	bf00      	nop
 800f6f0:	0800f71d 	.word	0x0800f71d
 800f6f4:	0800f737 	.word	0x0800f737
 800f6f8:	0800f7d9 	.word	0x0800f7d9
 800f6fc:	0800f7ff 	.word	0x0800f7ff
 800f700:	0800f88b 	.word	0x0800f88b
 800f704:	0800f8b5 	.word	0x0800f8b5
 800f708:	0800f977 	.word	0x0800f977
 800f70c:	0800f999 	.word	0x0800f999
 800f710:	0800fa2b 	.word	0x0800fa2b
 800f714:	0800fa51 	.word	0x0800fa51
 800f718:	0800fae3 	.word	0x0800fae3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f103 0110 	add.w	r1, r3, #16
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	795b      	ldrb	r3, [r3, #5]
 800f726:	461a      	mov	r2, r3
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 fa17 	bl	800fb5c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2202      	movs	r2, #2
 800f732:	761a      	strb	r2, [r3, #24]
      break;
 800f734:	e20c      	b.n	800fb50 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	795b      	ldrb	r3, [r3, #5]
 800f73a:	4619      	mov	r1, r3
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f003 f8f3 	bl	8012928 <USBH_LL_GetURBState>
 800f742:	4603      	mov	r3, r0
 800f744:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f746:	7bbb      	ldrb	r3, [r7, #14]
 800f748:	2b01      	cmp	r3, #1
 800f74a:	d12c      	bne.n	800f7a6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	7c1b      	ldrb	r3, [r3, #16]
 800f750:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f754:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	8adb      	ldrh	r3, [r3, #22]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d00a      	beq.n	800f774 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f75e:	7b7b      	ldrb	r3, [r7, #13]
 800f760:	2b80      	cmp	r3, #128	; 0x80
 800f762:	d103      	bne.n	800f76c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2203      	movs	r2, #3
 800f768:	761a      	strb	r2, [r3, #24]
 800f76a:	e00d      	b.n	800f788 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2205      	movs	r2, #5
 800f770:	761a      	strb	r2, [r3, #24]
 800f772:	e009      	b.n	800f788 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f774:	7b7b      	ldrb	r3, [r7, #13]
 800f776:	2b80      	cmp	r3, #128	; 0x80
 800f778:	d103      	bne.n	800f782 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2209      	movs	r2, #9
 800f77e:	761a      	strb	r2, [r3, #24]
 800f780:	e002      	b.n	800f788 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2207      	movs	r2, #7
 800f786:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2203      	movs	r2, #3
 800f78c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f79c:	2200      	movs	r2, #0
 800f79e:	4619      	mov	r1, r3
 800f7a0:	f000 fc3e 	bl	8010020 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f7a4:	e1cb      	b.n	800fb3e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f7a6:	7bbb      	ldrb	r3, [r7, #14]
 800f7a8:	2b04      	cmp	r3, #4
 800f7aa:	d003      	beq.n	800f7b4 <USBH_HandleControl+0xe8>
 800f7ac:	7bbb      	ldrb	r3, [r7, #14]
 800f7ae:	2b02      	cmp	r3, #2
 800f7b0:	f040 81c5 	bne.w	800fb3e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	220b      	movs	r2, #11
 800f7b8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2203      	movs	r2, #3
 800f7be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f7ce:	2200      	movs	r2, #0
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	f000 fc25 	bl	8010020 <osMessagePut>
      break;
 800f7d6:	e1b2      	b.n	800fb3e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f7de:	b29a      	uxth	r2, r3
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6899      	ldr	r1, [r3, #8]
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	899a      	ldrh	r2, [r3, #12]
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	791b      	ldrb	r3, [r3, #4]
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 f9f2 	bl	800fbda <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	2204      	movs	r2, #4
 800f7fa:	761a      	strb	r2, [r3, #24]
      break;
 800f7fc:	e1a8      	b.n	800fb50 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	791b      	ldrb	r3, [r3, #4]
 800f802:	4619      	mov	r1, r3
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f003 f88f 	bl	8012928 <USBH_LL_GetURBState>
 800f80a:	4603      	mov	r3, r0
 800f80c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f80e:	7bbb      	ldrb	r3, [r7, #14]
 800f810:	2b01      	cmp	r3, #1
 800f812:	d110      	bne.n	800f836 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2209      	movs	r2, #9
 800f818:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2203      	movs	r2, #3
 800f81e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f82e:	2200      	movs	r2, #0
 800f830:	4619      	mov	r1, r3
 800f832:	f000 fbf5 	bl	8010020 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f836:	7bbb      	ldrb	r3, [r7, #14]
 800f838:	2b05      	cmp	r3, #5
 800f83a:	d110      	bne.n	800f85e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f83c:	2303      	movs	r3, #3
 800f83e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2203      	movs	r2, #3
 800f844:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f854:	2200      	movs	r2, #0
 800f856:	4619      	mov	r1, r3
 800f858:	f000 fbe2 	bl	8010020 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f85c:	e171      	b.n	800fb42 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800f85e:	7bbb      	ldrb	r3, [r7, #14]
 800f860:	2b04      	cmp	r3, #4
 800f862:	f040 816e 	bne.w	800fb42 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	220b      	movs	r2, #11
 800f86a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2203      	movs	r2, #3
 800f870:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f880:	2200      	movs	r2, #0
 800f882:	4619      	mov	r1, r3
 800f884:	f000 fbcc 	bl	8010020 <osMessagePut>
      break;
 800f888:	e15b      	b.n	800fb42 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	6899      	ldr	r1, [r3, #8]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	899a      	ldrh	r2, [r3, #12]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	795b      	ldrb	r3, [r3, #5]
 800f896:	2001      	movs	r0, #1
 800f898:	9000      	str	r0, [sp, #0]
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 f978 	bl	800fb90 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f8a6:	b29a      	uxth	r2, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2206      	movs	r2, #6
 800f8b0:	761a      	strb	r2, [r3, #24]
      break;
 800f8b2:	e14d      	b.n	800fb50 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	795b      	ldrb	r3, [r3, #5]
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f003 f834 	bl	8012928 <USBH_LL_GetURBState>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f8c4:	7bbb      	ldrb	r3, [r7, #14]
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d111      	bne.n	800f8ee <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2207      	movs	r2, #7
 800f8ce:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2203      	movs	r2, #3
 800f8d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	f000 fb9a 	bl	8010020 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f8ec:	e12b      	b.n	800fb46 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800f8ee:	7bbb      	ldrb	r3, [r7, #14]
 800f8f0:	2b05      	cmp	r3, #5
 800f8f2:	d113      	bne.n	800f91c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	220c      	movs	r2, #12
 800f8f8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f8fa:	2303      	movs	r3, #3
 800f8fc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2203      	movs	r2, #3
 800f902:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f912:	2200      	movs	r2, #0
 800f914:	4619      	mov	r1, r3
 800f916:	f000 fb83 	bl	8010020 <osMessagePut>
      break;
 800f91a:	e114      	b.n	800fb46 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f91c:	7bbb      	ldrb	r3, [r7, #14]
 800f91e:	2b02      	cmp	r3, #2
 800f920:	d111      	bne.n	800f946 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2205      	movs	r2, #5
 800f926:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2203      	movs	r2, #3
 800f92c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f93c:	2200      	movs	r2, #0
 800f93e:	4619      	mov	r1, r3
 800f940:	f000 fb6e 	bl	8010020 <osMessagePut>
      break;
 800f944:	e0ff      	b.n	800fb46 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800f946:	7bbb      	ldrb	r3, [r7, #14]
 800f948:	2b04      	cmp	r3, #4
 800f94a:	f040 80fc 	bne.w	800fb46 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	220b      	movs	r2, #11
 800f952:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f954:	2302      	movs	r3, #2
 800f956:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2203      	movs	r2, #3
 800f95c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f96c:	2200      	movs	r2, #0
 800f96e:	4619      	mov	r1, r3
 800f970:	f000 fb56 	bl	8010020 <osMessagePut>
      break;
 800f974:	e0e7      	b.n	800fb46 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	791b      	ldrb	r3, [r3, #4]
 800f97a:	2200      	movs	r2, #0
 800f97c:	2100      	movs	r1, #0
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f000 f92b 	bl	800fbda <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f98a:	b29a      	uxth	r2, r3
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2208      	movs	r2, #8
 800f994:	761a      	strb	r2, [r3, #24]

      break;
 800f996:	e0db      	b.n	800fb50 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	791b      	ldrb	r3, [r3, #4]
 800f99c:	4619      	mov	r1, r3
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f002 ffc2 	bl	8012928 <USBH_LL_GetURBState>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f9a8:	7bbb      	ldrb	r3, [r7, #14]
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d113      	bne.n	800f9d6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	220d      	movs	r2, #13
 800f9b2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2203      	movs	r2, #3
 800f9bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	f000 fb26 	bl	8010020 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f9d4:	e0b9      	b.n	800fb4a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800f9d6:	7bbb      	ldrb	r3, [r7, #14]
 800f9d8:	2b04      	cmp	r3, #4
 800f9da:	d111      	bne.n	800fa00 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	220b      	movs	r2, #11
 800f9e0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2203      	movs	r2, #3
 800f9e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	f000 fb11 	bl	8010020 <osMessagePut>
      break;
 800f9fe:	e0a4      	b.n	800fb4a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800fa00:	7bbb      	ldrb	r3, [r7, #14]
 800fa02:	2b05      	cmp	r3, #5
 800fa04:	f040 80a1 	bne.w	800fb4a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800fa08:	2303      	movs	r3, #3
 800fa0a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2203      	movs	r2, #3
 800fa10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa20:	2200      	movs	r2, #0
 800fa22:	4619      	mov	r1, r3
 800fa24:	f000 fafc 	bl	8010020 <osMessagePut>
      break;
 800fa28:	e08f      	b.n	800fb4a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	795b      	ldrb	r3, [r3, #5]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	9200      	str	r2, [sp, #0]
 800fa32:	2200      	movs	r2, #0
 800fa34:	2100      	movs	r1, #0
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 f8aa 	bl	800fb90 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	220a      	movs	r2, #10
 800fa4c:	761a      	strb	r2, [r3, #24]
      break;
 800fa4e:	e07f      	b.n	800fb50 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	795b      	ldrb	r3, [r3, #5]
 800fa54:	4619      	mov	r1, r3
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f002 ff66 	bl	8012928 <USBH_LL_GetURBState>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800fa60:	7bbb      	ldrb	r3, [r7, #14]
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d113      	bne.n	800fa8e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800fa66:	2300      	movs	r3, #0
 800fa68:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	220d      	movs	r2, #13
 800fa6e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2203      	movs	r2, #3
 800fa74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fa84:	2200      	movs	r2, #0
 800fa86:	4619      	mov	r1, r3
 800fa88:	f000 faca 	bl	8010020 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fa8c:	e05f      	b.n	800fb4e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800fa8e:	7bbb      	ldrb	r3, [r7, #14]
 800fa90:	2b02      	cmp	r3, #2
 800fa92:	d111      	bne.n	800fab8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2209      	movs	r2, #9
 800fa98:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2203      	movs	r2, #3
 800fa9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800faae:	2200      	movs	r2, #0
 800fab0:	4619      	mov	r1, r3
 800fab2:	f000 fab5 	bl	8010020 <osMessagePut>
      break;
 800fab6:	e04a      	b.n	800fb4e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800fab8:	7bbb      	ldrb	r3, [r7, #14]
 800faba:	2b04      	cmp	r3, #4
 800fabc:	d147      	bne.n	800fb4e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	220b      	movs	r2, #11
 800fac2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2203      	movs	r2, #3
 800fac8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800fad8:	2200      	movs	r2, #0
 800fada:	4619      	mov	r1, r3
 800fadc:	f000 faa0 	bl	8010020 <osMessagePut>
      break;
 800fae0:	e035      	b.n	800fb4e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	7e5b      	ldrb	r3, [r3, #25]
 800fae6:	3301      	adds	r3, #1
 800fae8:	b2da      	uxtb	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	765a      	strb	r2, [r3, #25]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	7e5b      	ldrb	r3, [r3, #25]
 800faf2:	2b02      	cmp	r3, #2
 800faf4:	d806      	bhi.n	800fb04 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2201      	movs	r2, #1
 800fafa:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800fb02:	e025      	b.n	800fb50 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fb0a:	2106      	movs	r1, #6
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2200      	movs	r2, #0
 800fb14:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	795b      	ldrb	r3, [r3, #5]
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 f90d 	bl	800fd3c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	791b      	ldrb	r3, [r3, #4]
 800fb26:	4619      	mov	r1, r3
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f000 f907 	bl	800fd3c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2200      	movs	r2, #0
 800fb32:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800fb34:	2302      	movs	r3, #2
 800fb36:	73fb      	strb	r3, [r7, #15]
      break;
 800fb38:	e00a      	b.n	800fb50 <USBH_HandleControl+0x484>

    default:
      break;
 800fb3a:	bf00      	nop
 800fb3c:	e008      	b.n	800fb50 <USBH_HandleControl+0x484>
      break;
 800fb3e:	bf00      	nop
 800fb40:	e006      	b.n	800fb50 <USBH_HandleControl+0x484>
      break;
 800fb42:	bf00      	nop
 800fb44:	e004      	b.n	800fb50 <USBH_HandleControl+0x484>
      break;
 800fb46:	bf00      	nop
 800fb48:	e002      	b.n	800fb50 <USBH_HandleControl+0x484>
      break;
 800fb4a:	bf00      	nop
 800fb4c:	e000      	b.n	800fb50 <USBH_HandleControl+0x484>
      break;
 800fb4e:	bf00      	nop
  }

  return status;
 800fb50:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop

0800fb5c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b088      	sub	sp, #32
 800fb60:	af04      	add	r7, sp, #16
 800fb62:	60f8      	str	r0, [r7, #12]
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	4613      	mov	r3, r2
 800fb68:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fb6a:	79f9      	ldrb	r1, [r7, #7]
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	9303      	str	r3, [sp, #12]
 800fb70:	2308      	movs	r3, #8
 800fb72:	9302      	str	r3, [sp, #8]
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	9301      	str	r3, [sp, #4]
 800fb78:	2300      	movs	r3, #0
 800fb7a:	9300      	str	r3, [sp, #0]
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	2200      	movs	r2, #0
 800fb80:	68f8      	ldr	r0, [r7, #12]
 800fb82:	f002 fea0 	bl	80128c6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800fb86:	2300      	movs	r3, #0
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3710      	adds	r7, #16
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b088      	sub	sp, #32
 800fb94:	af04      	add	r7, sp, #16
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	4611      	mov	r1, r2
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	460b      	mov	r3, r1
 800fba0:	80fb      	strh	r3, [r7, #6]
 800fba2:	4613      	mov	r3, r2
 800fba4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d001      	beq.n	800fbb4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fbb4:	7979      	ldrb	r1, [r7, #5]
 800fbb6:	7e3b      	ldrb	r3, [r7, #24]
 800fbb8:	9303      	str	r3, [sp, #12]
 800fbba:	88fb      	ldrh	r3, [r7, #6]
 800fbbc:	9302      	str	r3, [sp, #8]
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	9301      	str	r3, [sp, #4]
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	9300      	str	r3, [sp, #0]
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	2200      	movs	r2, #0
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f002 fe7b 	bl	80128c6 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800fbd0:	2300      	movs	r3, #0
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3710      	adds	r7, #16
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b088      	sub	sp, #32
 800fbde:	af04      	add	r7, sp, #16
 800fbe0:	60f8      	str	r0, [r7, #12]
 800fbe2:	60b9      	str	r1, [r7, #8]
 800fbe4:	4611      	mov	r1, r2
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	460b      	mov	r3, r1
 800fbea:	80fb      	strh	r3, [r7, #6]
 800fbec:	4613      	mov	r3, r2
 800fbee:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fbf0:	7979      	ldrb	r1, [r7, #5]
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	9303      	str	r3, [sp, #12]
 800fbf6:	88fb      	ldrh	r3, [r7, #6]
 800fbf8:	9302      	str	r3, [sp, #8]
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	9301      	str	r3, [sp, #4]
 800fbfe:	2301      	movs	r3, #1
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	2300      	movs	r3, #0
 800fc04:	2201      	movs	r2, #1
 800fc06:	68f8      	ldr	r0, [r7, #12]
 800fc08:	f002 fe5d 	bl	80128c6 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fc0c:	2300      	movs	r3, #0

}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}

0800fc16 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800fc16:	b580      	push	{r7, lr}
 800fc18:	b088      	sub	sp, #32
 800fc1a:	af04      	add	r7, sp, #16
 800fc1c:	60f8      	str	r0, [r7, #12]
 800fc1e:	60b9      	str	r1, [r7, #8]
 800fc20:	4611      	mov	r1, r2
 800fc22:	461a      	mov	r2, r3
 800fc24:	460b      	mov	r3, r1
 800fc26:	80fb      	strh	r3, [r7, #6]
 800fc28:	4613      	mov	r3, r2
 800fc2a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d001      	beq.n	800fc3a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800fc36:	2300      	movs	r3, #0
 800fc38:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fc3a:	7979      	ldrb	r1, [r7, #5]
 800fc3c:	7e3b      	ldrb	r3, [r7, #24]
 800fc3e:	9303      	str	r3, [sp, #12]
 800fc40:	88fb      	ldrh	r3, [r7, #6]
 800fc42:	9302      	str	r3, [sp, #8]
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	9301      	str	r3, [sp, #4]
 800fc48:	2301      	movs	r3, #1
 800fc4a:	9300      	str	r3, [sp, #0]
 800fc4c:	2302      	movs	r3, #2
 800fc4e:	2200      	movs	r2, #0
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f002 fe38 	bl	80128c6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800fc56:	2300      	movs	r3, #0
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3710      	adds	r7, #16
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b088      	sub	sp, #32
 800fc64:	af04      	add	r7, sp, #16
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	4611      	mov	r1, r2
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	460b      	mov	r3, r1
 800fc70:	80fb      	strh	r3, [r7, #6]
 800fc72:	4613      	mov	r3, r2
 800fc74:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800fc76:	7979      	ldrb	r1, [r7, #5]
 800fc78:	2300      	movs	r3, #0
 800fc7a:	9303      	str	r3, [sp, #12]
 800fc7c:	88fb      	ldrh	r3, [r7, #6]
 800fc7e:	9302      	str	r3, [sp, #8]
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	9301      	str	r3, [sp, #4]
 800fc84:	2301      	movs	r3, #1
 800fc86:	9300      	str	r3, [sp, #0]
 800fc88:	2302      	movs	r3, #2
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	68f8      	ldr	r0, [r7, #12]
 800fc8e:	f002 fe1a 	bl	80128c6 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800fc92:	2300      	movs	r3, #0
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3710      	adds	r7, #16
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b086      	sub	sp, #24
 800fca0:	af04      	add	r7, sp, #16
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	4608      	mov	r0, r1
 800fca6:	4611      	mov	r1, r2
 800fca8:	461a      	mov	r2, r3
 800fcaa:	4603      	mov	r3, r0
 800fcac:	70fb      	strb	r3, [r7, #3]
 800fcae:	460b      	mov	r3, r1
 800fcb0:	70bb      	strb	r3, [r7, #2]
 800fcb2:	4613      	mov	r3, r2
 800fcb4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800fcb6:	7878      	ldrb	r0, [r7, #1]
 800fcb8:	78ba      	ldrb	r2, [r7, #2]
 800fcba:	78f9      	ldrb	r1, [r7, #3]
 800fcbc:	8b3b      	ldrh	r3, [r7, #24]
 800fcbe:	9302      	str	r3, [sp, #8]
 800fcc0:	7d3b      	ldrb	r3, [r7, #20]
 800fcc2:	9301      	str	r3, [sp, #4]
 800fcc4:	7c3b      	ldrb	r3, [r7, #16]
 800fcc6:	9300      	str	r3, [sp, #0]
 800fcc8:	4603      	mov	r3, r0
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f002 fdad 	bl	801282a <USBH_LL_OpenPipe>

  return USBH_OK;
 800fcd0:	2300      	movs	r3, #0
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3708      	adds	r7, #8
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b082      	sub	sp, #8
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	6078      	str	r0, [r7, #4]
 800fce2:	460b      	mov	r3, r1
 800fce4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800fce6:	78fb      	ldrb	r3, [r7, #3]
 800fce8:	4619      	mov	r1, r3
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f002 fdcc 	bl	8012888 <USBH_LL_ClosePipe>

  return USBH_OK;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b084      	sub	sp, #16
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	6078      	str	r0, [r7, #4]
 800fd02:	460b      	mov	r3, r1
 800fd04:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 f836 	bl	800fd78 <USBH_GetFreePipe>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800fd10:	89fb      	ldrh	r3, [r7, #14]
 800fd12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d00a      	beq.n	800fd30 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800fd1a:	78fa      	ldrb	r2, [r7, #3]
 800fd1c:	89fb      	ldrh	r3, [r7, #14]
 800fd1e:	f003 030f 	and.w	r3, r3, #15
 800fd22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd26:	6879      	ldr	r1, [r7, #4]
 800fd28:	33e0      	adds	r3, #224	; 0xe0
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	440b      	add	r3, r1
 800fd2e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800fd30:	89fb      	ldrh	r3, [r7, #14]
 800fd32:	b2db      	uxtb	r3, r3
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3710      	adds	r7, #16
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}

0800fd3c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b083      	sub	sp, #12
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	460b      	mov	r3, r1
 800fd46:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800fd48:	78fb      	ldrb	r3, [r7, #3]
 800fd4a:	2b0a      	cmp	r3, #10
 800fd4c:	d80d      	bhi.n	800fd6a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800fd4e:	78fb      	ldrb	r3, [r7, #3]
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	33e0      	adds	r3, #224	; 0xe0
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	4413      	add	r3, r2
 800fd58:	685a      	ldr	r2, [r3, #4]
 800fd5a:	78fb      	ldrb	r3, [r7, #3]
 800fd5c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800fd60:	6879      	ldr	r1, [r7, #4]
 800fd62:	33e0      	adds	r3, #224	; 0xe0
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	440b      	add	r3, r1
 800fd68:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800fd6a:	2300      	movs	r3, #0
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr

0800fd78 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800fd80:	2300      	movs	r3, #0
 800fd82:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800fd84:	2300      	movs	r3, #0
 800fd86:	73fb      	strb	r3, [r7, #15]
 800fd88:	e00f      	b.n	800fdaa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800fd8a:	7bfb      	ldrb	r3, [r7, #15]
 800fd8c:	687a      	ldr	r2, [r7, #4]
 800fd8e:	33e0      	adds	r3, #224	; 0xe0
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	4413      	add	r3, r2
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d102      	bne.n	800fda4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800fd9e:	7bfb      	ldrb	r3, [r7, #15]
 800fda0:	b29b      	uxth	r3, r3
 800fda2:	e007      	b.n	800fdb4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800fda4:	7bfb      	ldrb	r3, [r7, #15]
 800fda6:	3301      	adds	r3, #1
 800fda8:	73fb      	strb	r3, [r7, #15]
 800fdaa:	7bfb      	ldrb	r3, [r7, #15]
 800fdac:	2b0a      	cmp	r3, #10
 800fdae:	d9ec      	bls.n	800fd8a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800fdb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3714      	adds	r7, #20
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr

0800fdc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b087      	sub	sp, #28
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	4613      	mov	r3, r2
 800fdcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fdce:	2301      	movs	r3, #1
 800fdd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fdd6:	4b1f      	ldr	r3, [pc, #124]	; (800fe54 <FATFS_LinkDriverEx+0x94>)
 800fdd8:	7a5b      	ldrb	r3, [r3, #9]
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d131      	bne.n	800fe44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fde0:	4b1c      	ldr	r3, [pc, #112]	; (800fe54 <FATFS_LinkDriverEx+0x94>)
 800fde2:	7a5b      	ldrb	r3, [r3, #9]
 800fde4:	b2db      	uxtb	r3, r3
 800fde6:	461a      	mov	r2, r3
 800fde8:	4b1a      	ldr	r3, [pc, #104]	; (800fe54 <FATFS_LinkDriverEx+0x94>)
 800fdea:	2100      	movs	r1, #0
 800fdec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fdee:	4b19      	ldr	r3, [pc, #100]	; (800fe54 <FATFS_LinkDriverEx+0x94>)
 800fdf0:	7a5b      	ldrb	r3, [r3, #9]
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	4a17      	ldr	r2, [pc, #92]	; (800fe54 <FATFS_LinkDriverEx+0x94>)
 800fdf6:	009b      	lsls	r3, r3, #2
 800fdf8:	4413      	add	r3, r2
 800fdfa:	68fa      	ldr	r2, [r7, #12]
 800fdfc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fdfe:	4b15      	ldr	r3, [pc, #84]	; (800fe54 <FATFS_LinkDriverEx+0x94>)
 800fe00:	7a5b      	ldrb	r3, [r3, #9]
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	461a      	mov	r2, r3
 800fe06:	4b13      	ldr	r3, [pc, #76]	; (800fe54 <FATFS_LinkDriverEx+0x94>)
 800fe08:	4413      	add	r3, r2
 800fe0a:	79fa      	ldrb	r2, [r7, #7]
 800fe0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fe0e:	4b11      	ldr	r3, [pc, #68]	; (800fe54 <FATFS_LinkDriverEx+0x94>)
 800fe10:	7a5b      	ldrb	r3, [r3, #9]
 800fe12:	b2db      	uxtb	r3, r3
 800fe14:	1c5a      	adds	r2, r3, #1
 800fe16:	b2d1      	uxtb	r1, r2
 800fe18:	4a0e      	ldr	r2, [pc, #56]	; (800fe54 <FATFS_LinkDriverEx+0x94>)
 800fe1a:	7251      	strb	r1, [r2, #9]
 800fe1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fe1e:	7dbb      	ldrb	r3, [r7, #22]
 800fe20:	3330      	adds	r3, #48	; 0x30
 800fe22:	b2da      	uxtb	r2, r3
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	223a      	movs	r2, #58	; 0x3a
 800fe2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	3302      	adds	r3, #2
 800fe34:	222f      	movs	r2, #47	; 0x2f
 800fe36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	3303      	adds	r3, #3
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fe40:	2300      	movs	r3, #0
 800fe42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fe44:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	371c      	adds	r7, #28
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe50:	4770      	bx	lr
 800fe52:	bf00      	nop
 800fe54:	20000bac 	.word	0x20000bac

0800fe58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fe62:	2200      	movs	r2, #0
 800fe64:	6839      	ldr	r1, [r7, #0]
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f7ff ffaa 	bl	800fdc0 <FATFS_LinkDriverEx>
 800fe6c:	4603      	mov	r3, r0
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3708      	adds	r7, #8
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fe76:	b480      	push	{r7}
 800fe78:	b085      	sub	sp, #20
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fe80:	2300      	movs	r3, #0
 800fe82:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fe84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fe88:	2b84      	cmp	r3, #132	; 0x84
 800fe8a:	d005      	beq.n	800fe98 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fe8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	4413      	add	r3, r2
 800fe94:	3303      	adds	r3, #3
 800fe96:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fe98:	68fb      	ldr	r3, [r7, #12]
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3714      	adds	r7, #20
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr

0800fea6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fea6:	b480      	push	{r7}
 800fea8:	b083      	sub	sp, #12
 800feaa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800feac:	f3ef 8305 	mrs	r3, IPSR
 800feb0:	607b      	str	r3, [r7, #4]
  return(result);
 800feb2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	bf14      	ite	ne
 800feb8:	2301      	movne	r3, #1
 800feba:	2300      	moveq	r3, #0
 800febc:	b2db      	uxtb	r3, r3
}
 800febe:	4618      	mov	r0, r3
 800fec0:	370c      	adds	r7, #12
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr

0800feca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800feca:	b580      	push	{r7, lr}
 800fecc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fece:	f001 f95b 	bl	8011188 <vTaskStartScheduler>
  
  return osOK;
 800fed2:	2300      	movs	r3, #0
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800fedc:	f001 fdae 	bl	8011a3c <xTaskGetSchedulerState>
 800fee0:	4603      	mov	r3, r0
 800fee2:	2b01      	cmp	r3, #1
 800fee4:	d101      	bne.n	800feea <osKernelRunning+0x12>
    return 0;
 800fee6:	2300      	movs	r3, #0
 800fee8:	e000      	b.n	800feec <osKernelRunning+0x14>
  else
    return 1;
 800feea:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800feec:	4618      	mov	r0, r3
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800fef4:	f7ff ffd7 	bl	800fea6 <inHandlerMode>
 800fef8:	4603      	mov	r3, r0
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d003      	beq.n	800ff06 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800fefe:	f001 fa63 	bl	80113c8 <xTaskGetTickCountFromISR>
 800ff02:	4603      	mov	r3, r0
 800ff04:	e002      	b.n	800ff0c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ff06:	f001 fa4f 	bl	80113a8 <xTaskGetTickCount>
 800ff0a:	4603      	mov	r3, r0
  }
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ff10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff12:	b089      	sub	sp, #36	; 0x24
 800ff14:	af04      	add	r7, sp, #16
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	695b      	ldr	r3, [r3, #20]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d020      	beq.n	800ff64 <osThreadCreate+0x54>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	699b      	ldr	r3, [r3, #24]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d01c      	beq.n	800ff64 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	685c      	ldr	r4, [r3, #4]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681d      	ldr	r5, [r3, #0]
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	691e      	ldr	r6, [r3, #16]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7ff ff9a 	bl	800fe76 <makeFreeRtosPriority>
 800ff42:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	695b      	ldr	r3, [r3, #20]
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ff4c:	9202      	str	r2, [sp, #8]
 800ff4e:	9301      	str	r3, [sp, #4]
 800ff50:	9100      	str	r1, [sp, #0]
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	4632      	mov	r2, r6
 800ff56:	4629      	mov	r1, r5
 800ff58:	4620      	mov	r0, r4
 800ff5a:	f000 ff39 	bl	8010dd0 <xTaskCreateStatic>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	60fb      	str	r3, [r7, #12]
 800ff62:	e01c      	b.n	800ff9e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	685c      	ldr	r4, [r3, #4]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ff70:	b29e      	uxth	r6, r3
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7ff ff7c 	bl	800fe76 <makeFreeRtosPriority>
 800ff7e:	4602      	mov	r2, r0
 800ff80:	f107 030c 	add.w	r3, r7, #12
 800ff84:	9301      	str	r3, [sp, #4]
 800ff86:	9200      	str	r2, [sp, #0]
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	4632      	mov	r2, r6
 800ff8c:	4629      	mov	r1, r5
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f000 ff81 	bl	8010e96 <xTaskCreate>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b01      	cmp	r3, #1
 800ff98:	d001      	beq.n	800ff9e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	e000      	b.n	800ffa0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3714      	adds	r7, #20
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ffa8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b084      	sub	sp, #16
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d001      	beq.n	800ffbe <osDelay+0x16>
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	e000      	b.n	800ffc0 <osDelay+0x18>
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f001 f8ab 	bl	801111c <vTaskDelay>
  
  return osOK;
 800ffc6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ffd0:	b590      	push	{r4, r7, lr}
 800ffd2:	b085      	sub	sp, #20
 800ffd4:	af02      	add	r7, sp, #8
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	689b      	ldr	r3, [r3, #8]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d011      	beq.n	8010006 <osMessageCreate+0x36>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d00d      	beq.n	8010006 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6818      	ldr	r0, [r3, #0]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6859      	ldr	r1, [r3, #4]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	689a      	ldr	r2, [r3, #8]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	2400      	movs	r4, #0
 800fffc:	9400      	str	r4, [sp, #0]
 800fffe:	f000 f9e1 	bl	80103c4 <xQueueGenericCreateStatic>
 8010002:	4603      	mov	r3, r0
 8010004:	e008      	b.n	8010018 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6818      	ldr	r0, [r3, #0]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	2200      	movs	r2, #0
 8010010:	4619      	mov	r1, r3
 8010012:	f000 fa59 	bl	80104c8 <xQueueGenericCreate>
 8010016:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010018:	4618      	mov	r0, r3
 801001a:	370c      	adds	r7, #12
 801001c:	46bd      	mov	sp, r7
 801001e:	bd90      	pop	{r4, r7, pc}

08010020 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b086      	sub	sp, #24
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801002c:	2300      	movs	r3, #0
 801002e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d101      	bne.n	801003e <osMessagePut+0x1e>
    ticks = 1;
 801003a:	2301      	movs	r3, #1
 801003c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801003e:	f7ff ff32 	bl	800fea6 <inHandlerMode>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d018      	beq.n	801007a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010048:	f107 0210 	add.w	r2, r7, #16
 801004c:	f107 0108 	add.w	r1, r7, #8
 8010050:	2300      	movs	r3, #0
 8010052:	68f8      	ldr	r0, [r7, #12]
 8010054:	f000 fba0 	bl	8010798 <xQueueGenericSendFromISR>
 8010058:	4603      	mov	r3, r0
 801005a:	2b01      	cmp	r3, #1
 801005c:	d001      	beq.n	8010062 <osMessagePut+0x42>
      return osErrorOS;
 801005e:	23ff      	movs	r3, #255	; 0xff
 8010060:	e018      	b.n	8010094 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d014      	beq.n	8010092 <osMessagePut+0x72>
 8010068:	4b0c      	ldr	r3, [pc, #48]	; (801009c <osMessagePut+0x7c>)
 801006a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801006e:	601a      	str	r2, [r3, #0]
 8010070:	f3bf 8f4f 	dsb	sy
 8010074:	f3bf 8f6f 	isb	sy
 8010078:	e00b      	b.n	8010092 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801007a:	f107 0108 	add.w	r1, r7, #8
 801007e:	2300      	movs	r3, #0
 8010080:	697a      	ldr	r2, [r7, #20]
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f000 fa82 	bl	801058c <xQueueGenericSend>
 8010088:	4603      	mov	r3, r0
 801008a:	2b01      	cmp	r3, #1
 801008c:	d001      	beq.n	8010092 <osMessagePut+0x72>
      return osErrorOS;
 801008e:	23ff      	movs	r3, #255	; 0xff
 8010090:	e000      	b.n	8010094 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010092:	2300      	movs	r3, #0
}
 8010094:	4618      	mov	r0, r3
 8010096:	3718      	adds	r7, #24
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	e000ed04 	.word	0xe000ed04

080100a0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80100a0:	b590      	push	{r4, r7, lr}
 80100a2:	b08b      	sub	sp, #44	; 0x2c
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	60f8      	str	r0, [r7, #12]
 80100a8:	60b9      	str	r1, [r7, #8]
 80100aa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80100b0:	2300      	movs	r3, #0
 80100b2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d10a      	bne.n	80100d0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80100ba:	2380      	movs	r3, #128	; 0x80
 80100bc:	617b      	str	r3, [r7, #20]
    return event;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	461c      	mov	r4, r3
 80100c2:	f107 0314 	add.w	r3, r7, #20
 80100c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80100ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80100ce:	e054      	b.n	801017a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80100d0:	2300      	movs	r3, #0
 80100d2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80100d4:	2300      	movs	r3, #0
 80100d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100de:	d103      	bne.n	80100e8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80100e0:	f04f 33ff 	mov.w	r3, #4294967295
 80100e4:	627b      	str	r3, [r7, #36]	; 0x24
 80100e6:	e009      	b.n	80100fc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d006      	beq.n	80100fc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80100f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d101      	bne.n	80100fc <osMessageGet+0x5c>
      ticks = 1;
 80100f8:	2301      	movs	r3, #1
 80100fa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80100fc:	f7ff fed3 	bl	800fea6 <inHandlerMode>
 8010100:	4603      	mov	r3, r0
 8010102:	2b00      	cmp	r3, #0
 8010104:	d01c      	beq.n	8010140 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010106:	f107 0220 	add.w	r2, r7, #32
 801010a:	f107 0314 	add.w	r3, r7, #20
 801010e:	3304      	adds	r3, #4
 8010110:	4619      	mov	r1, r3
 8010112:	68b8      	ldr	r0, [r7, #8]
 8010114:	f000 fcc6 	bl	8010aa4 <xQueueReceiveFromISR>
 8010118:	4603      	mov	r3, r0
 801011a:	2b01      	cmp	r3, #1
 801011c:	d102      	bne.n	8010124 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801011e:	2310      	movs	r3, #16
 8010120:	617b      	str	r3, [r7, #20]
 8010122:	e001      	b.n	8010128 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010124:	2300      	movs	r3, #0
 8010126:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010128:	6a3b      	ldr	r3, [r7, #32]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d01d      	beq.n	801016a <osMessageGet+0xca>
 801012e:	4b15      	ldr	r3, [pc, #84]	; (8010184 <osMessageGet+0xe4>)
 8010130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010134:	601a      	str	r2, [r3, #0]
 8010136:	f3bf 8f4f 	dsb	sy
 801013a:	f3bf 8f6f 	isb	sy
 801013e:	e014      	b.n	801016a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010140:	f107 0314 	add.w	r3, r7, #20
 8010144:	3304      	adds	r3, #4
 8010146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010148:	4619      	mov	r1, r3
 801014a:	68b8      	ldr	r0, [r7, #8]
 801014c:	f000 fbc4 	bl	80108d8 <xQueueReceive>
 8010150:	4603      	mov	r3, r0
 8010152:	2b01      	cmp	r3, #1
 8010154:	d102      	bne.n	801015c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010156:	2310      	movs	r3, #16
 8010158:	617b      	str	r3, [r7, #20]
 801015a:	e006      	b.n	801016a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015e:	2b00      	cmp	r3, #0
 8010160:	d101      	bne.n	8010166 <osMessageGet+0xc6>
 8010162:	2300      	movs	r3, #0
 8010164:	e000      	b.n	8010168 <osMessageGet+0xc8>
 8010166:	2340      	movs	r3, #64	; 0x40
 8010168:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	461c      	mov	r4, r3
 801016e:	f107 0314 	add.w	r3, r7, #20
 8010172:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010176:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801017a:	68f8      	ldr	r0, [r7, #12]
 801017c:	372c      	adds	r7, #44	; 0x2c
 801017e:	46bd      	mov	sp, r7
 8010180:	bd90      	pop	{r4, r7, pc}
 8010182:	bf00      	nop
 8010184:	e000ed04 	.word	0xe000ed04

08010188 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010188:	b480      	push	{r7}
 801018a:	b083      	sub	sp, #12
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f103 0208 	add.w	r2, r3, #8
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f04f 32ff 	mov.w	r2, #4294967295
 80101a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	f103 0208 	add.w	r2, r3, #8
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	f103 0208 	add.w	r2, r3, #8
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2200      	movs	r2, #0
 80101ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80101bc:	bf00      	nop
 80101be:	370c      	adds	r7, #12
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2200      	movs	r2, #0
 80101d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80101d6:	bf00      	nop
 80101d8:	370c      	adds	r7, #12
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr

080101e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80101e2:	b480      	push	{r7}
 80101e4:	b085      	sub	sp, #20
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
 80101ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	68fa      	ldr	r2, [r7, #12]
 80101f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	689a      	ldr	r2, [r3, #8]
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	689b      	ldr	r3, [r3, #8]
 8010204:	683a      	ldr	r2, [r7, #0]
 8010206:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	683a      	ldr	r2, [r7, #0]
 801020c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	687a      	ldr	r2, [r7, #4]
 8010212:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	1c5a      	adds	r2, r3, #1
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	601a      	str	r2, [r3, #0]
}
 801021e:	bf00      	nop
 8010220:	3714      	adds	r7, #20
 8010222:	46bd      	mov	sp, r7
 8010224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010228:	4770      	bx	lr

0801022a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801022a:	b480      	push	{r7}
 801022c:	b085      	sub	sp, #20
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
 8010232:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010240:	d103      	bne.n	801024a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	691b      	ldr	r3, [r3, #16]
 8010246:	60fb      	str	r3, [r7, #12]
 8010248:	e00c      	b.n	8010264 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	3308      	adds	r3, #8
 801024e:	60fb      	str	r3, [r7, #12]
 8010250:	e002      	b.n	8010258 <vListInsert+0x2e>
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	60fb      	str	r3, [r7, #12]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	68ba      	ldr	r2, [r7, #8]
 8010260:	429a      	cmp	r2, r3
 8010262:	d2f6      	bcs.n	8010252 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	685a      	ldr	r2, [r3, #4]
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	683a      	ldr	r2, [r7, #0]
 8010272:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	68fa      	ldr	r2, [r7, #12]
 8010278:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	683a      	ldr	r2, [r7, #0]
 801027e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	1c5a      	adds	r2, r3, #1
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	601a      	str	r2, [r3, #0]
}
 8010290:	bf00      	nop
 8010292:	3714      	adds	r7, #20
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr

0801029c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801029c:	b480      	push	{r7}
 801029e:	b085      	sub	sp, #20
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	691b      	ldr	r3, [r3, #16]
 80102a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	685b      	ldr	r3, [r3, #4]
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	6892      	ldr	r2, [r2, #8]
 80102b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	689b      	ldr	r3, [r3, #8]
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	6852      	ldr	r2, [r2, #4]
 80102bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	687a      	ldr	r2, [r7, #4]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d103      	bne.n	80102d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	689a      	ldr	r2, [r3, #8]
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2200      	movs	r2, #0
 80102d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	1e5a      	subs	r2, r3, #1
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	681b      	ldr	r3, [r3, #0]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3714      	adds	r7, #20
 80102e8:	46bd      	mov	sp, r7
 80102ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ee:	4770      	bx	lr

080102f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d10c      	bne.n	801031e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010308:	b672      	cpsid	i
 801030a:	f383 8811 	msr	BASEPRI, r3
 801030e:	f3bf 8f6f 	isb	sy
 8010312:	f3bf 8f4f 	dsb	sy
 8010316:	b662      	cpsie	i
 8010318:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801031a:	bf00      	nop
 801031c:	e7fe      	b.n	801031c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801031e:	f001 fda5 	bl	8011e6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801032a:	68f9      	ldr	r1, [r7, #12]
 801032c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801032e:	fb01 f303 	mul.w	r3, r1, r3
 8010332:	441a      	add	r2, r3
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2200      	movs	r2, #0
 801033c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801034e:	3b01      	subs	r3, #1
 8010350:	68f9      	ldr	r1, [r7, #12]
 8010352:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010354:	fb01 f303 	mul.w	r3, r1, r3
 8010358:	441a      	add	r2, r3
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	22ff      	movs	r2, #255	; 0xff
 8010362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	22ff      	movs	r2, #255	; 0xff
 801036a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d114      	bne.n	801039e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	691b      	ldr	r3, [r3, #16]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d01a      	beq.n	80103b2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	3310      	adds	r3, #16
 8010380:	4618      	mov	r0, r3
 8010382:	f001 f995 	bl	80116b0 <xTaskRemoveFromEventList>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d012      	beq.n	80103b2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801038c:	4b0c      	ldr	r3, [pc, #48]	; (80103c0 <xQueueGenericReset+0xd0>)
 801038e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010392:	601a      	str	r2, [r3, #0]
 8010394:	f3bf 8f4f 	dsb	sy
 8010398:	f3bf 8f6f 	isb	sy
 801039c:	e009      	b.n	80103b2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	3310      	adds	r3, #16
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7ff fef0 	bl	8010188 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	3324      	adds	r3, #36	; 0x24
 80103ac:	4618      	mov	r0, r3
 80103ae:	f7ff feeb 	bl	8010188 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80103b2:	f001 fd8f 	bl	8011ed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80103b6:	2301      	movs	r3, #1
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3710      	adds	r7, #16
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}
 80103c0:	e000ed04 	.word	0xe000ed04

080103c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b08e      	sub	sp, #56	; 0x38
 80103c8:	af02      	add	r7, sp, #8
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	607a      	str	r2, [r7, #4]
 80103d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d10c      	bne.n	80103f2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80103d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103dc:	b672      	cpsid	i
 80103de:	f383 8811 	msr	BASEPRI, r3
 80103e2:	f3bf 8f6f 	isb	sy
 80103e6:	f3bf 8f4f 	dsb	sy
 80103ea:	b662      	cpsie	i
 80103ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80103ee:	bf00      	nop
 80103f0:	e7fe      	b.n	80103f0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d10c      	bne.n	8010412 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80103f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103fc:	b672      	cpsid	i
 80103fe:	f383 8811 	msr	BASEPRI, r3
 8010402:	f3bf 8f6f 	isb	sy
 8010406:	f3bf 8f4f 	dsb	sy
 801040a:	b662      	cpsie	i
 801040c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801040e:	bf00      	nop
 8010410:	e7fe      	b.n	8010410 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d002      	beq.n	801041e <xQueueGenericCreateStatic+0x5a>
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d001      	beq.n	8010422 <xQueueGenericCreateStatic+0x5e>
 801041e:	2301      	movs	r3, #1
 8010420:	e000      	b.n	8010424 <xQueueGenericCreateStatic+0x60>
 8010422:	2300      	movs	r3, #0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d10c      	bne.n	8010442 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8010428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042c:	b672      	cpsid	i
 801042e:	f383 8811 	msr	BASEPRI, r3
 8010432:	f3bf 8f6f 	isb	sy
 8010436:	f3bf 8f4f 	dsb	sy
 801043a:	b662      	cpsie	i
 801043c:	623b      	str	r3, [r7, #32]
}
 801043e:	bf00      	nop
 8010440:	e7fe      	b.n	8010440 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d102      	bne.n	801044e <xQueueGenericCreateStatic+0x8a>
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d101      	bne.n	8010452 <xQueueGenericCreateStatic+0x8e>
 801044e:	2301      	movs	r3, #1
 8010450:	e000      	b.n	8010454 <xQueueGenericCreateStatic+0x90>
 8010452:	2300      	movs	r3, #0
 8010454:	2b00      	cmp	r3, #0
 8010456:	d10c      	bne.n	8010472 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8010458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801045c:	b672      	cpsid	i
 801045e:	f383 8811 	msr	BASEPRI, r3
 8010462:	f3bf 8f6f 	isb	sy
 8010466:	f3bf 8f4f 	dsb	sy
 801046a:	b662      	cpsie	i
 801046c:	61fb      	str	r3, [r7, #28]
}
 801046e:	bf00      	nop
 8010470:	e7fe      	b.n	8010470 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010472:	2348      	movs	r3, #72	; 0x48
 8010474:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	2b48      	cmp	r3, #72	; 0x48
 801047a:	d00c      	beq.n	8010496 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 801047c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010480:	b672      	cpsid	i
 8010482:	f383 8811 	msr	BASEPRI, r3
 8010486:	f3bf 8f6f 	isb	sy
 801048a:	f3bf 8f4f 	dsb	sy
 801048e:	b662      	cpsie	i
 8010490:	61bb      	str	r3, [r7, #24]
}
 8010492:	bf00      	nop
 8010494:	e7fe      	b.n	8010494 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010496:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d00d      	beq.n	80104be <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80104a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a4:	2201      	movs	r2, #1
 80104a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80104aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80104ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	4613      	mov	r3, r2
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	68b9      	ldr	r1, [r7, #8]
 80104b8:	68f8      	ldr	r0, [r7, #12]
 80104ba:	f000 f847 	bl	801054c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80104be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3730      	adds	r7, #48	; 0x30
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}

080104c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b08a      	sub	sp, #40	; 0x28
 80104cc:	af02      	add	r7, sp, #8
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	4613      	mov	r3, r2
 80104d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d10c      	bne.n	80104f6 <xQueueGenericCreate+0x2e>
	__asm volatile
 80104dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e0:	b672      	cpsid	i
 80104e2:	f383 8811 	msr	BASEPRI, r3
 80104e6:	f3bf 8f6f 	isb	sy
 80104ea:	f3bf 8f4f 	dsb	sy
 80104ee:	b662      	cpsie	i
 80104f0:	613b      	str	r3, [r7, #16]
}
 80104f2:	bf00      	nop
 80104f4:	e7fe      	b.n	80104f4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d102      	bne.n	8010502 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80104fc:	2300      	movs	r3, #0
 80104fe:	61fb      	str	r3, [r7, #28]
 8010500:	e004      	b.n	801050c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	68ba      	ldr	r2, [r7, #8]
 8010506:	fb02 f303 	mul.w	r3, r2, r3
 801050a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	3348      	adds	r3, #72	; 0x48
 8010510:	4618      	mov	r0, r3
 8010512:	f001 fdd7 	bl	80120c4 <pvPortMalloc>
 8010516:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010518:	69bb      	ldr	r3, [r7, #24]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d011      	beq.n	8010542 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	3348      	adds	r3, #72	; 0x48
 8010526:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	2200      	movs	r2, #0
 801052c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010530:	79fa      	ldrb	r2, [r7, #7]
 8010532:	69bb      	ldr	r3, [r7, #24]
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	4613      	mov	r3, r2
 8010538:	697a      	ldr	r2, [r7, #20]
 801053a:	68b9      	ldr	r1, [r7, #8]
 801053c:	68f8      	ldr	r0, [r7, #12]
 801053e:	f000 f805 	bl	801054c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010542:	69bb      	ldr	r3, [r7, #24]
	}
 8010544:	4618      	mov	r0, r3
 8010546:	3720      	adds	r7, #32
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b084      	sub	sp, #16
 8010550:	af00      	add	r7, sp, #0
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	607a      	str	r2, [r7, #4]
 8010558:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d103      	bne.n	8010568 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010560:	69bb      	ldr	r3, [r7, #24]
 8010562:	69ba      	ldr	r2, [r7, #24]
 8010564:	601a      	str	r2, [r3, #0]
 8010566:	e002      	b.n	801056e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010568:	69bb      	ldr	r3, [r7, #24]
 801056a:	687a      	ldr	r2, [r7, #4]
 801056c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	68fa      	ldr	r2, [r7, #12]
 8010572:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	68ba      	ldr	r2, [r7, #8]
 8010578:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801057a:	2101      	movs	r1, #1
 801057c:	69b8      	ldr	r0, [r7, #24]
 801057e:	f7ff feb7 	bl	80102f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010582:	bf00      	nop
 8010584:	3710      	adds	r7, #16
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
	...

0801058c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b08e      	sub	sp, #56	; 0x38
 8010590:	af00      	add	r7, sp, #0
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	60b9      	str	r1, [r7, #8]
 8010596:	607a      	str	r2, [r7, #4]
 8010598:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801059a:	2300      	movs	r3, #0
 801059c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80105a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d10c      	bne.n	80105c2 <xQueueGenericSend+0x36>
	__asm volatile
 80105a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ac:	b672      	cpsid	i
 80105ae:	f383 8811 	msr	BASEPRI, r3
 80105b2:	f3bf 8f6f 	isb	sy
 80105b6:	f3bf 8f4f 	dsb	sy
 80105ba:	b662      	cpsie	i
 80105bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80105be:	bf00      	nop
 80105c0:	e7fe      	b.n	80105c0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d103      	bne.n	80105d0 <xQueueGenericSend+0x44>
 80105c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d101      	bne.n	80105d4 <xQueueGenericSend+0x48>
 80105d0:	2301      	movs	r3, #1
 80105d2:	e000      	b.n	80105d6 <xQueueGenericSend+0x4a>
 80105d4:	2300      	movs	r3, #0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d10c      	bne.n	80105f4 <xQueueGenericSend+0x68>
	__asm volatile
 80105da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105de:	b672      	cpsid	i
 80105e0:	f383 8811 	msr	BASEPRI, r3
 80105e4:	f3bf 8f6f 	isb	sy
 80105e8:	f3bf 8f4f 	dsb	sy
 80105ec:	b662      	cpsie	i
 80105ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80105f0:	bf00      	nop
 80105f2:	e7fe      	b.n	80105f2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	2b02      	cmp	r3, #2
 80105f8:	d103      	bne.n	8010602 <xQueueGenericSend+0x76>
 80105fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d101      	bne.n	8010606 <xQueueGenericSend+0x7a>
 8010602:	2301      	movs	r3, #1
 8010604:	e000      	b.n	8010608 <xQueueGenericSend+0x7c>
 8010606:	2300      	movs	r3, #0
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10c      	bne.n	8010626 <xQueueGenericSend+0x9a>
	__asm volatile
 801060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010610:	b672      	cpsid	i
 8010612:	f383 8811 	msr	BASEPRI, r3
 8010616:	f3bf 8f6f 	isb	sy
 801061a:	f3bf 8f4f 	dsb	sy
 801061e:	b662      	cpsie	i
 8010620:	623b      	str	r3, [r7, #32]
}
 8010622:	bf00      	nop
 8010624:	e7fe      	b.n	8010624 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010626:	f001 fa09 	bl	8011a3c <xTaskGetSchedulerState>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	d102      	bne.n	8010636 <xQueueGenericSend+0xaa>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d101      	bne.n	801063a <xQueueGenericSend+0xae>
 8010636:	2301      	movs	r3, #1
 8010638:	e000      	b.n	801063c <xQueueGenericSend+0xb0>
 801063a:	2300      	movs	r3, #0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d10c      	bne.n	801065a <xQueueGenericSend+0xce>
	__asm volatile
 8010640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010644:	b672      	cpsid	i
 8010646:	f383 8811 	msr	BASEPRI, r3
 801064a:	f3bf 8f6f 	isb	sy
 801064e:	f3bf 8f4f 	dsb	sy
 8010652:	b662      	cpsie	i
 8010654:	61fb      	str	r3, [r7, #28]
}
 8010656:	bf00      	nop
 8010658:	e7fe      	b.n	8010658 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801065a:	f001 fc07 	bl	8011e6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801065e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010666:	429a      	cmp	r2, r3
 8010668:	d302      	bcc.n	8010670 <xQueueGenericSend+0xe4>
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	2b02      	cmp	r3, #2
 801066e:	d129      	bne.n	80106c4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010670:	683a      	ldr	r2, [r7, #0]
 8010672:	68b9      	ldr	r1, [r7, #8]
 8010674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010676:	f000 fa9b 	bl	8010bb0 <prvCopyDataToQueue>
 801067a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801067c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801067e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010680:	2b00      	cmp	r3, #0
 8010682:	d010      	beq.n	80106a6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010686:	3324      	adds	r3, #36	; 0x24
 8010688:	4618      	mov	r0, r3
 801068a:	f001 f811 	bl	80116b0 <xTaskRemoveFromEventList>
 801068e:	4603      	mov	r3, r0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d013      	beq.n	80106bc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010694:	4b3f      	ldr	r3, [pc, #252]	; (8010794 <xQueueGenericSend+0x208>)
 8010696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801069a:	601a      	str	r2, [r3, #0]
 801069c:	f3bf 8f4f 	dsb	sy
 80106a0:	f3bf 8f6f 	isb	sy
 80106a4:	e00a      	b.n	80106bc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80106a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d007      	beq.n	80106bc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80106ac:	4b39      	ldr	r3, [pc, #228]	; (8010794 <xQueueGenericSend+0x208>)
 80106ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106b2:	601a      	str	r2, [r3, #0]
 80106b4:	f3bf 8f4f 	dsb	sy
 80106b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80106bc:	f001 fc0a 	bl	8011ed4 <vPortExitCritical>
				return pdPASS;
 80106c0:	2301      	movs	r3, #1
 80106c2:	e063      	b.n	801078c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d103      	bne.n	80106d2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80106ca:	f001 fc03 	bl	8011ed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80106ce:	2300      	movs	r3, #0
 80106d0:	e05c      	b.n	801078c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80106d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d106      	bne.n	80106e6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80106d8:	f107 0314 	add.w	r3, r7, #20
 80106dc:	4618      	mov	r0, r3
 80106de:	f001 f84b 	bl	8011778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80106e2:	2301      	movs	r3, #1
 80106e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80106e6:	f001 fbf5 	bl	8011ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80106ea:	f000 fdb1 	bl	8011250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80106ee:	f001 fbbd 	bl	8011e6c <vPortEnterCritical>
 80106f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106f8:	b25b      	sxtb	r3, r3
 80106fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106fe:	d103      	bne.n	8010708 <xQueueGenericSend+0x17c>
 8010700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010702:	2200      	movs	r2, #0
 8010704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801070a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801070e:	b25b      	sxtb	r3, r3
 8010710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010714:	d103      	bne.n	801071e <xQueueGenericSend+0x192>
 8010716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010718:	2200      	movs	r2, #0
 801071a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801071e:	f001 fbd9 	bl	8011ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010722:	1d3a      	adds	r2, r7, #4
 8010724:	f107 0314 	add.w	r3, r7, #20
 8010728:	4611      	mov	r1, r2
 801072a:	4618      	mov	r0, r3
 801072c:	f001 f83a 	bl	80117a4 <xTaskCheckForTimeOut>
 8010730:	4603      	mov	r3, r0
 8010732:	2b00      	cmp	r3, #0
 8010734:	d124      	bne.n	8010780 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010738:	f000 fb32 	bl	8010da0 <prvIsQueueFull>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d018      	beq.n	8010774 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010744:	3310      	adds	r3, #16
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	4611      	mov	r1, r2
 801074a:	4618      	mov	r0, r3
 801074c:	f000 ff8a 	bl	8011664 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010752:	f000 fabd 	bl	8010cd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010756:	f000 fd89 	bl	801126c <xTaskResumeAll>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	f47f af7c 	bne.w	801065a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8010762:	4b0c      	ldr	r3, [pc, #48]	; (8010794 <xQueueGenericSend+0x208>)
 8010764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010768:	601a      	str	r2, [r3, #0]
 801076a:	f3bf 8f4f 	dsb	sy
 801076e:	f3bf 8f6f 	isb	sy
 8010772:	e772      	b.n	801065a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010776:	f000 faab 	bl	8010cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801077a:	f000 fd77 	bl	801126c <xTaskResumeAll>
 801077e:	e76c      	b.n	801065a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010782:	f000 faa5 	bl	8010cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010786:	f000 fd71 	bl	801126c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801078a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801078c:	4618      	mov	r0, r3
 801078e:	3738      	adds	r7, #56	; 0x38
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	e000ed04 	.word	0xe000ed04

08010798 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010798:	b580      	push	{r7, lr}
 801079a:	b08e      	sub	sp, #56	; 0x38
 801079c:	af00      	add	r7, sp, #0
 801079e:	60f8      	str	r0, [r7, #12]
 80107a0:	60b9      	str	r1, [r7, #8]
 80107a2:	607a      	str	r2, [r7, #4]
 80107a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80107aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d10c      	bne.n	80107ca <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80107b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b4:	b672      	cpsid	i
 80107b6:	f383 8811 	msr	BASEPRI, r3
 80107ba:	f3bf 8f6f 	isb	sy
 80107be:	f3bf 8f4f 	dsb	sy
 80107c2:	b662      	cpsie	i
 80107c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80107c6:	bf00      	nop
 80107c8:	e7fe      	b.n	80107c8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d103      	bne.n	80107d8 <xQueueGenericSendFromISR+0x40>
 80107d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d101      	bne.n	80107dc <xQueueGenericSendFromISR+0x44>
 80107d8:	2301      	movs	r3, #1
 80107da:	e000      	b.n	80107de <xQueueGenericSendFromISR+0x46>
 80107dc:	2300      	movs	r3, #0
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d10c      	bne.n	80107fc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80107e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e6:	b672      	cpsid	i
 80107e8:	f383 8811 	msr	BASEPRI, r3
 80107ec:	f3bf 8f6f 	isb	sy
 80107f0:	f3bf 8f4f 	dsb	sy
 80107f4:	b662      	cpsie	i
 80107f6:	623b      	str	r3, [r7, #32]
}
 80107f8:	bf00      	nop
 80107fa:	e7fe      	b.n	80107fa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	2b02      	cmp	r3, #2
 8010800:	d103      	bne.n	801080a <xQueueGenericSendFromISR+0x72>
 8010802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010806:	2b01      	cmp	r3, #1
 8010808:	d101      	bne.n	801080e <xQueueGenericSendFromISR+0x76>
 801080a:	2301      	movs	r3, #1
 801080c:	e000      	b.n	8010810 <xQueueGenericSendFromISR+0x78>
 801080e:	2300      	movs	r3, #0
 8010810:	2b00      	cmp	r3, #0
 8010812:	d10c      	bne.n	801082e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8010814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010818:	b672      	cpsid	i
 801081a:	f383 8811 	msr	BASEPRI, r3
 801081e:	f3bf 8f6f 	isb	sy
 8010822:	f3bf 8f4f 	dsb	sy
 8010826:	b662      	cpsie	i
 8010828:	61fb      	str	r3, [r7, #28]
}
 801082a:	bf00      	nop
 801082c:	e7fe      	b.n	801082c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801082e:	f001 fc05 	bl	801203c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010832:	f3ef 8211 	mrs	r2, BASEPRI
 8010836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801083a:	b672      	cpsid	i
 801083c:	f383 8811 	msr	BASEPRI, r3
 8010840:	f3bf 8f6f 	isb	sy
 8010844:	f3bf 8f4f 	dsb	sy
 8010848:	b662      	cpsie	i
 801084a:	61ba      	str	r2, [r7, #24]
 801084c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801084e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010850:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801085a:	429a      	cmp	r2, r3
 801085c:	d302      	bcc.n	8010864 <xQueueGenericSendFromISR+0xcc>
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	2b02      	cmp	r3, #2
 8010862:	d12c      	bne.n	80108be <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801086a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801086e:	683a      	ldr	r2, [r7, #0]
 8010870:	68b9      	ldr	r1, [r7, #8]
 8010872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010874:	f000 f99c 	bl	8010bb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010878:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801087c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010880:	d112      	bne.n	80108a8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010886:	2b00      	cmp	r3, #0
 8010888:	d016      	beq.n	80108b8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	3324      	adds	r3, #36	; 0x24
 801088e:	4618      	mov	r0, r3
 8010890:	f000 ff0e 	bl	80116b0 <xTaskRemoveFromEventList>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d00e      	beq.n	80108b8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d00b      	beq.n	80108b8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2201      	movs	r2, #1
 80108a4:	601a      	str	r2, [r3, #0]
 80108a6:	e007      	b.n	80108b8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80108a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80108ac:	3301      	adds	r3, #1
 80108ae:	b2db      	uxtb	r3, r3
 80108b0:	b25a      	sxtb	r2, r3
 80108b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80108b8:	2301      	movs	r3, #1
 80108ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80108bc:	e001      	b.n	80108c2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80108be:	2300      	movs	r3, #0
 80108c0:	637b      	str	r3, [r7, #52]	; 0x34
 80108c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80108cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80108ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3738      	adds	r7, #56	; 0x38
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b08c      	sub	sp, #48	; 0x30
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80108e4:	2300      	movs	r3, #0
 80108e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80108ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d10c      	bne.n	801090c <xQueueReceive+0x34>
	__asm volatile
 80108f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f6:	b672      	cpsid	i
 80108f8:	f383 8811 	msr	BASEPRI, r3
 80108fc:	f3bf 8f6f 	isb	sy
 8010900:	f3bf 8f4f 	dsb	sy
 8010904:	b662      	cpsie	i
 8010906:	623b      	str	r3, [r7, #32]
}
 8010908:	bf00      	nop
 801090a:	e7fe      	b.n	801090a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d103      	bne.n	801091a <xQueueReceive+0x42>
 8010912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010916:	2b00      	cmp	r3, #0
 8010918:	d101      	bne.n	801091e <xQueueReceive+0x46>
 801091a:	2301      	movs	r3, #1
 801091c:	e000      	b.n	8010920 <xQueueReceive+0x48>
 801091e:	2300      	movs	r3, #0
 8010920:	2b00      	cmp	r3, #0
 8010922:	d10c      	bne.n	801093e <xQueueReceive+0x66>
	__asm volatile
 8010924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010928:	b672      	cpsid	i
 801092a:	f383 8811 	msr	BASEPRI, r3
 801092e:	f3bf 8f6f 	isb	sy
 8010932:	f3bf 8f4f 	dsb	sy
 8010936:	b662      	cpsie	i
 8010938:	61fb      	str	r3, [r7, #28]
}
 801093a:	bf00      	nop
 801093c:	e7fe      	b.n	801093c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801093e:	f001 f87d 	bl	8011a3c <xTaskGetSchedulerState>
 8010942:	4603      	mov	r3, r0
 8010944:	2b00      	cmp	r3, #0
 8010946:	d102      	bne.n	801094e <xQueueReceive+0x76>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d101      	bne.n	8010952 <xQueueReceive+0x7a>
 801094e:	2301      	movs	r3, #1
 8010950:	e000      	b.n	8010954 <xQueueReceive+0x7c>
 8010952:	2300      	movs	r3, #0
 8010954:	2b00      	cmp	r3, #0
 8010956:	d10c      	bne.n	8010972 <xQueueReceive+0x9a>
	__asm volatile
 8010958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095c:	b672      	cpsid	i
 801095e:	f383 8811 	msr	BASEPRI, r3
 8010962:	f3bf 8f6f 	isb	sy
 8010966:	f3bf 8f4f 	dsb	sy
 801096a:	b662      	cpsie	i
 801096c:	61bb      	str	r3, [r7, #24]
}
 801096e:	bf00      	nop
 8010970:	e7fe      	b.n	8010970 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010972:	f001 fa7b 	bl	8011e6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801097a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097e:	2b00      	cmp	r3, #0
 8010980:	d01f      	beq.n	80109c2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010982:	68b9      	ldr	r1, [r7, #8]
 8010984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010986:	f000 f97d 	bl	8010c84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098c:	1e5a      	subs	r2, r3, #1
 801098e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010990:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010994:	691b      	ldr	r3, [r3, #16]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d00f      	beq.n	80109ba <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801099a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801099c:	3310      	adds	r3, #16
 801099e:	4618      	mov	r0, r3
 80109a0:	f000 fe86 	bl	80116b0 <xTaskRemoveFromEventList>
 80109a4:	4603      	mov	r3, r0
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d007      	beq.n	80109ba <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80109aa:	4b3d      	ldr	r3, [pc, #244]	; (8010aa0 <xQueueReceive+0x1c8>)
 80109ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109b0:	601a      	str	r2, [r3, #0]
 80109b2:	f3bf 8f4f 	dsb	sy
 80109b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80109ba:	f001 fa8b 	bl	8011ed4 <vPortExitCritical>
				return pdPASS;
 80109be:	2301      	movs	r3, #1
 80109c0:	e069      	b.n	8010a96 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d103      	bne.n	80109d0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80109c8:	f001 fa84 	bl	8011ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80109cc:	2300      	movs	r3, #0
 80109ce:	e062      	b.n	8010a96 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80109d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d106      	bne.n	80109e4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80109d6:	f107 0310 	add.w	r3, r7, #16
 80109da:	4618      	mov	r0, r3
 80109dc:	f000 fecc 	bl	8011778 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80109e0:	2301      	movs	r3, #1
 80109e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80109e4:	f001 fa76 	bl	8011ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80109e8:	f000 fc32 	bl	8011250 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80109ec:	f001 fa3e 	bl	8011e6c <vPortEnterCritical>
 80109f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109f6:	b25b      	sxtb	r3, r3
 80109f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109fc:	d103      	bne.n	8010a06 <xQueueReceive+0x12e>
 80109fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a00:	2200      	movs	r2, #0
 8010a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a0c:	b25b      	sxtb	r3, r3
 8010a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a12:	d103      	bne.n	8010a1c <xQueueReceive+0x144>
 8010a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a16:	2200      	movs	r2, #0
 8010a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a1c:	f001 fa5a 	bl	8011ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a20:	1d3a      	adds	r2, r7, #4
 8010a22:	f107 0310 	add.w	r3, r7, #16
 8010a26:	4611      	mov	r1, r2
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f000 febb 	bl	80117a4 <xTaskCheckForTimeOut>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d123      	bne.n	8010a7c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a36:	f000 f99d 	bl	8010d74 <prvIsQueueEmpty>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d017      	beq.n	8010a70 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a42:	3324      	adds	r3, #36	; 0x24
 8010a44:	687a      	ldr	r2, [r7, #4]
 8010a46:	4611      	mov	r1, r2
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f000 fe0b 	bl	8011664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a50:	f000 f93e 	bl	8010cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010a54:	f000 fc0a 	bl	801126c <xTaskResumeAll>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d189      	bne.n	8010972 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8010a5e:	4b10      	ldr	r3, [pc, #64]	; (8010aa0 <xQueueReceive+0x1c8>)
 8010a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a64:	601a      	str	r2, [r3, #0]
 8010a66:	f3bf 8f4f 	dsb	sy
 8010a6a:	f3bf 8f6f 	isb	sy
 8010a6e:	e780      	b.n	8010972 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a72:	f000 f92d 	bl	8010cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010a76:	f000 fbf9 	bl	801126c <xTaskResumeAll>
 8010a7a:	e77a      	b.n	8010972 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a7e:	f000 f927 	bl	8010cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a82:	f000 fbf3 	bl	801126c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a88:	f000 f974 	bl	8010d74 <prvIsQueueEmpty>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	f43f af6f 	beq.w	8010972 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010a94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3730      	adds	r7, #48	; 0x30
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	e000ed04 	.word	0xe000ed04

08010aa4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b08e      	sub	sp, #56	; 0x38
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d10c      	bne.n	8010ad4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8010aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010abe:	b672      	cpsid	i
 8010ac0:	f383 8811 	msr	BASEPRI, r3
 8010ac4:	f3bf 8f6f 	isb	sy
 8010ac8:	f3bf 8f4f 	dsb	sy
 8010acc:	b662      	cpsie	i
 8010ace:	623b      	str	r3, [r7, #32]
}
 8010ad0:	bf00      	nop
 8010ad2:	e7fe      	b.n	8010ad2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d103      	bne.n	8010ae2 <xQueueReceiveFromISR+0x3e>
 8010ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d101      	bne.n	8010ae6 <xQueueReceiveFromISR+0x42>
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	e000      	b.n	8010ae8 <xQueueReceiveFromISR+0x44>
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d10c      	bne.n	8010b06 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8010aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af0:	b672      	cpsid	i
 8010af2:	f383 8811 	msr	BASEPRI, r3
 8010af6:	f3bf 8f6f 	isb	sy
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	b662      	cpsie	i
 8010b00:	61fb      	str	r3, [r7, #28]
}
 8010b02:	bf00      	nop
 8010b04:	e7fe      	b.n	8010b04 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b06:	f001 fa99 	bl	801203c <vPortValidateInterruptPriority>
	__asm volatile
 8010b0a:	f3ef 8211 	mrs	r2, BASEPRI
 8010b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b12:	b672      	cpsid	i
 8010b14:	f383 8811 	msr	BASEPRI, r3
 8010b18:	f3bf 8f6f 	isb	sy
 8010b1c:	f3bf 8f4f 	dsb	sy
 8010b20:	b662      	cpsie	i
 8010b22:	61ba      	str	r2, [r7, #24]
 8010b24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010b26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d02f      	beq.n	8010b96 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b40:	68b9      	ldr	r1, [r7, #8]
 8010b42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b44:	f000 f89e 	bl	8010c84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4a:	1e5a      	subs	r2, r3, #1
 8010b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010b50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b58:	d112      	bne.n	8010b80 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5c:	691b      	ldr	r3, [r3, #16]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d016      	beq.n	8010b90 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b64:	3310      	adds	r3, #16
 8010b66:	4618      	mov	r0, r3
 8010b68:	f000 fda2 	bl	80116b0 <xTaskRemoveFromEventList>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d00e      	beq.n	8010b90 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d00b      	beq.n	8010b90 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	601a      	str	r2, [r3, #0]
 8010b7e:	e007      	b.n	8010b90 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b84:	3301      	adds	r3, #1
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	b25a      	sxtb	r2, r3
 8010b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010b90:	2301      	movs	r3, #1
 8010b92:	637b      	str	r3, [r7, #52]	; 0x34
 8010b94:	e001      	b.n	8010b9a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8010b96:	2300      	movs	r3, #0
 8010b98:	637b      	str	r3, [r7, #52]	; 0x34
 8010b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010b9e:	693b      	ldr	r3, [r7, #16]
 8010ba0:	f383 8811 	msr	BASEPRI, r3
}
 8010ba4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3738      	adds	r7, #56	; 0x38
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b086      	sub	sp, #24
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	60f8      	str	r0, [r7, #12]
 8010bb8:	60b9      	str	r1, [r7, #8]
 8010bba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d10d      	bne.n	8010bea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d14d      	bne.n	8010c72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	689b      	ldr	r3, [r3, #8]
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f000 ff4c 	bl	8011a78 <xTaskPriorityDisinherit>
 8010be0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2200      	movs	r2, #0
 8010be6:	609a      	str	r2, [r3, #8]
 8010be8:	e043      	b.n	8010c72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d119      	bne.n	8010c24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	6858      	ldr	r0, [r3, #4]
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf8:	461a      	mov	r2, r3
 8010bfa:	68b9      	ldr	r1, [r7, #8]
 8010bfc:	f001 ff7c 	bl	8012af8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	685a      	ldr	r2, [r3, #4]
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c08:	441a      	add	r2, r3
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	685a      	ldr	r2, [r3, #4]
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	689b      	ldr	r3, [r3, #8]
 8010c16:	429a      	cmp	r2, r3
 8010c18:	d32b      	bcc.n	8010c72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	681a      	ldr	r2, [r3, #0]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	605a      	str	r2, [r3, #4]
 8010c22:	e026      	b.n	8010c72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	68d8      	ldr	r0, [r3, #12]
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	68b9      	ldr	r1, [r7, #8]
 8010c30:	f001 ff62 	bl	8012af8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	68da      	ldr	r2, [r3, #12]
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c3c:	425b      	negs	r3, r3
 8010c3e:	441a      	add	r2, r3
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	68da      	ldr	r2, [r3, #12]
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d207      	bcs.n	8010c60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	689a      	ldr	r2, [r3, #8]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c58:	425b      	negs	r3, r3
 8010c5a:	441a      	add	r2, r3
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2b02      	cmp	r3, #2
 8010c64:	d105      	bne.n	8010c72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d002      	beq.n	8010c72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	3b01      	subs	r3, #1
 8010c70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	1c5a      	adds	r2, r3, #1
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010c7a:	697b      	ldr	r3, [r7, #20]
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3718      	adds	r7, #24
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d018      	beq.n	8010cc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	68da      	ldr	r2, [r3, #12]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c9e:	441a      	add	r2, r3
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	68da      	ldr	r2, [r3, #12]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	689b      	ldr	r3, [r3, #8]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d303      	bcc.n	8010cb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	68d9      	ldr	r1, [r3, #12]
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	6838      	ldr	r0, [r7, #0]
 8010cc4:	f001 ff18 	bl	8012af8 <memcpy>
	}
}
 8010cc8:	bf00      	nop
 8010cca:	3708      	adds	r7, #8
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b084      	sub	sp, #16
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010cd8:	f001 f8c8 	bl	8011e6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ce2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ce4:	e011      	b.n	8010d0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d012      	beq.n	8010d14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	3324      	adds	r3, #36	; 0x24
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f000 fcdc 	bl	80116b0 <xTaskRemoveFromEventList>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d001      	beq.n	8010d02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010cfe:	f000 fdb7 	bl	8011870 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010d02:	7bfb      	ldrb	r3, [r7, #15]
 8010d04:	3b01      	subs	r3, #1
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	dce9      	bgt.n	8010ce6 <prvUnlockQueue+0x16>
 8010d12:	e000      	b.n	8010d16 <prvUnlockQueue+0x46>
					break;
 8010d14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	22ff      	movs	r2, #255	; 0xff
 8010d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010d1e:	f001 f8d9 	bl	8011ed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010d22:	f001 f8a3 	bl	8011e6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010d2e:	e011      	b.n	8010d54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	691b      	ldr	r3, [r3, #16]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d012      	beq.n	8010d5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	3310      	adds	r3, #16
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f000 fcb7 	bl	80116b0 <xTaskRemoveFromEventList>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d001      	beq.n	8010d4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010d48:	f000 fd92 	bl	8011870 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010d4c:	7bbb      	ldrb	r3, [r7, #14]
 8010d4e:	3b01      	subs	r3, #1
 8010d50:	b2db      	uxtb	r3, r3
 8010d52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	dce9      	bgt.n	8010d30 <prvUnlockQueue+0x60>
 8010d5c:	e000      	b.n	8010d60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010d5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	22ff      	movs	r2, #255	; 0xff
 8010d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010d68:	f001 f8b4 	bl	8011ed4 <vPortExitCritical>
}
 8010d6c:	bf00      	nop
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b084      	sub	sp, #16
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d7c:	f001 f876 	bl	8011e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d102      	bne.n	8010d8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010d88:	2301      	movs	r3, #1
 8010d8a:	60fb      	str	r3, [r7, #12]
 8010d8c:	e001      	b.n	8010d92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010d92:	f001 f89f 	bl	8011ed4 <vPortExitCritical>

	return xReturn;
 8010d96:	68fb      	ldr	r3, [r7, #12]
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3710      	adds	r7, #16
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b084      	sub	sp, #16
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010da8:	f001 f860 	bl	8011e6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010db4:	429a      	cmp	r2, r3
 8010db6:	d102      	bne.n	8010dbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010db8:	2301      	movs	r3, #1
 8010dba:	60fb      	str	r3, [r7, #12]
 8010dbc:	e001      	b.n	8010dc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010dc2:	f001 f887 	bl	8011ed4 <vPortExitCritical>

	return xReturn;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b08e      	sub	sp, #56	; 0x38
 8010dd4:	af04      	add	r7, sp, #16
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	60b9      	str	r1, [r7, #8]
 8010dda:	607a      	str	r2, [r7, #4]
 8010ddc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d10c      	bne.n	8010dfe <xTaskCreateStatic+0x2e>
	__asm volatile
 8010de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de8:	b672      	cpsid	i
 8010dea:	f383 8811 	msr	BASEPRI, r3
 8010dee:	f3bf 8f6f 	isb	sy
 8010df2:	f3bf 8f4f 	dsb	sy
 8010df6:	b662      	cpsie	i
 8010df8:	623b      	str	r3, [r7, #32]
}
 8010dfa:	bf00      	nop
 8010dfc:	e7fe      	b.n	8010dfc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d10c      	bne.n	8010e1e <xTaskCreateStatic+0x4e>
	__asm volatile
 8010e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e08:	b672      	cpsid	i
 8010e0a:	f383 8811 	msr	BASEPRI, r3
 8010e0e:	f3bf 8f6f 	isb	sy
 8010e12:	f3bf 8f4f 	dsb	sy
 8010e16:	b662      	cpsie	i
 8010e18:	61fb      	str	r3, [r7, #28]
}
 8010e1a:	bf00      	nop
 8010e1c:	e7fe      	b.n	8010e1c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010e1e:	2358      	movs	r3, #88	; 0x58
 8010e20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	2b58      	cmp	r3, #88	; 0x58
 8010e26:	d00c      	beq.n	8010e42 <xTaskCreateStatic+0x72>
	__asm volatile
 8010e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e2c:	b672      	cpsid	i
 8010e2e:	f383 8811 	msr	BASEPRI, r3
 8010e32:	f3bf 8f6f 	isb	sy
 8010e36:	f3bf 8f4f 	dsb	sy
 8010e3a:	b662      	cpsie	i
 8010e3c:	61bb      	str	r3, [r7, #24]
}
 8010e3e:	bf00      	nop
 8010e40:	e7fe      	b.n	8010e40 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010e42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d01e      	beq.n	8010e88 <xTaskCreateStatic+0xb8>
 8010e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d01b      	beq.n	8010e88 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5c:	2202      	movs	r2, #2
 8010e5e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010e62:	2300      	movs	r3, #0
 8010e64:	9303      	str	r3, [sp, #12]
 8010e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e68:	9302      	str	r3, [sp, #8]
 8010e6a:	f107 0314 	add.w	r3, r7, #20
 8010e6e:	9301      	str	r3, [sp, #4]
 8010e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e72:	9300      	str	r3, [sp, #0]
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	687a      	ldr	r2, [r7, #4]
 8010e78:	68b9      	ldr	r1, [r7, #8]
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	f000 f850 	bl	8010f20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010e82:	f000 f8e1 	bl	8011048 <prvAddNewTaskToReadyList>
 8010e86:	e001      	b.n	8010e8c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010e8c:	697b      	ldr	r3, [r7, #20]
	}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3728      	adds	r7, #40	; 0x28
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}

08010e96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010e96:	b580      	push	{r7, lr}
 8010e98:	b08c      	sub	sp, #48	; 0x30
 8010e9a:	af04      	add	r7, sp, #16
 8010e9c:	60f8      	str	r0, [r7, #12]
 8010e9e:	60b9      	str	r1, [r7, #8]
 8010ea0:	603b      	str	r3, [r7, #0]
 8010ea2:	4613      	mov	r3, r2
 8010ea4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010ea6:	88fb      	ldrh	r3, [r7, #6]
 8010ea8:	009b      	lsls	r3, r3, #2
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f001 f90a 	bl	80120c4 <pvPortMalloc>
 8010eb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010eb2:	697b      	ldr	r3, [r7, #20]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d00e      	beq.n	8010ed6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010eb8:	2058      	movs	r0, #88	; 0x58
 8010eba:	f001 f903 	bl	80120c4 <pvPortMalloc>
 8010ebe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d003      	beq.n	8010ece <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010ec6:	69fb      	ldr	r3, [r7, #28]
 8010ec8:	697a      	ldr	r2, [r7, #20]
 8010eca:	631a      	str	r2, [r3, #48]	; 0x30
 8010ecc:	e005      	b.n	8010eda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010ece:	6978      	ldr	r0, [r7, #20]
 8010ed0:	f001 f9c8 	bl	8012264 <vPortFree>
 8010ed4:	e001      	b.n	8010eda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010eda:	69fb      	ldr	r3, [r7, #28]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d017      	beq.n	8010f10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010ee8:	88fa      	ldrh	r2, [r7, #6]
 8010eea:	2300      	movs	r3, #0
 8010eec:	9303      	str	r3, [sp, #12]
 8010eee:	69fb      	ldr	r3, [r7, #28]
 8010ef0:	9302      	str	r3, [sp, #8]
 8010ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef4:	9301      	str	r3, [sp, #4]
 8010ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef8:	9300      	str	r3, [sp, #0]
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	68b9      	ldr	r1, [r7, #8]
 8010efe:	68f8      	ldr	r0, [r7, #12]
 8010f00:	f000 f80e 	bl	8010f20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010f04:	69f8      	ldr	r0, [r7, #28]
 8010f06:	f000 f89f 	bl	8011048 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	61bb      	str	r3, [r7, #24]
 8010f0e:	e002      	b.n	8010f16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010f10:	f04f 33ff 	mov.w	r3, #4294967295
 8010f14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010f16:	69bb      	ldr	r3, [r7, #24]
	}
 8010f18:	4618      	mov	r0, r3
 8010f1a:	3720      	adds	r7, #32
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b088      	sub	sp, #32
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	60b9      	str	r1, [r7, #8]
 8010f2a:	607a      	str	r2, [r7, #4]
 8010f2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	009b      	lsls	r3, r3, #2
 8010f36:	461a      	mov	r2, r3
 8010f38:	21a5      	movs	r1, #165	; 0xa5
 8010f3a:	f001 fdeb 	bl	8012b14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f42:	6879      	ldr	r1, [r7, #4]
 8010f44:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010f48:	440b      	add	r3, r1
 8010f4a:	009b      	lsls	r3, r3, #2
 8010f4c:	4413      	add	r3, r2
 8010f4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010f50:	69bb      	ldr	r3, [r7, #24]
 8010f52:	f023 0307 	bic.w	r3, r3, #7
 8010f56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	f003 0307 	and.w	r3, r3, #7
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d00c      	beq.n	8010f7c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8010f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f66:	b672      	cpsid	i
 8010f68:	f383 8811 	msr	BASEPRI, r3
 8010f6c:	f3bf 8f6f 	isb	sy
 8010f70:	f3bf 8f4f 	dsb	sy
 8010f74:	b662      	cpsie	i
 8010f76:	617b      	str	r3, [r7, #20]
}
 8010f78:	bf00      	nop
 8010f7a:	e7fe      	b.n	8010f7a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d01f      	beq.n	8010fc2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f82:	2300      	movs	r3, #0
 8010f84:	61fb      	str	r3, [r7, #28]
 8010f86:	e012      	b.n	8010fae <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	69fb      	ldr	r3, [r7, #28]
 8010f8c:	4413      	add	r3, r2
 8010f8e:	7819      	ldrb	r1, [r3, #0]
 8010f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f92:	69fb      	ldr	r3, [r7, #28]
 8010f94:	4413      	add	r3, r2
 8010f96:	3334      	adds	r3, #52	; 0x34
 8010f98:	460a      	mov	r2, r1
 8010f9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010f9c:	68ba      	ldr	r2, [r7, #8]
 8010f9e:	69fb      	ldr	r3, [r7, #28]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d006      	beq.n	8010fb6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	3301      	adds	r3, #1
 8010fac:	61fb      	str	r3, [r7, #28]
 8010fae:	69fb      	ldr	r3, [r7, #28]
 8010fb0:	2b0f      	cmp	r3, #15
 8010fb2:	d9e9      	bls.n	8010f88 <prvInitialiseNewTask+0x68>
 8010fb4:	e000      	b.n	8010fb8 <prvInitialiseNewTask+0x98>
			{
				break;
 8010fb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fba:	2200      	movs	r2, #0
 8010fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010fc0:	e003      	b.n	8010fca <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fcc:	2b06      	cmp	r3, #6
 8010fce:	d901      	bls.n	8010fd4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010fd0:	2306      	movs	r3, #6
 8010fd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fde:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe8:	3304      	adds	r3, #4
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7ff f8ec 	bl	80101c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff2:	3318      	adds	r3, #24
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7ff f8e7 	bl	80101c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ffe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011002:	f1c3 0207 	rsb	r2, r3, #7
 8011006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011008:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801100a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801100e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8011010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011012:	2200      	movs	r2, #0
 8011014:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011018:	2200      	movs	r2, #0
 801101a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801101c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801101e:	2200      	movs	r2, #0
 8011020:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011024:	683a      	ldr	r2, [r7, #0]
 8011026:	68f9      	ldr	r1, [r7, #12]
 8011028:	69b8      	ldr	r0, [r7, #24]
 801102a:	f000 fe15 	bl	8011c58 <pxPortInitialiseStack>
 801102e:	4602      	mov	r2, r0
 8011030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011032:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011036:	2b00      	cmp	r3, #0
 8011038:	d002      	beq.n	8011040 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801103e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011040:	bf00      	nop
 8011042:	3720      	adds	r7, #32
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}

08011048 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011050:	f000 ff0c 	bl	8011e6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011054:	4b2a      	ldr	r3, [pc, #168]	; (8011100 <prvAddNewTaskToReadyList+0xb8>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	3301      	adds	r3, #1
 801105a:	4a29      	ldr	r2, [pc, #164]	; (8011100 <prvAddNewTaskToReadyList+0xb8>)
 801105c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801105e:	4b29      	ldr	r3, [pc, #164]	; (8011104 <prvAddNewTaskToReadyList+0xbc>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d109      	bne.n	801107a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011066:	4a27      	ldr	r2, [pc, #156]	; (8011104 <prvAddNewTaskToReadyList+0xbc>)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801106c:	4b24      	ldr	r3, [pc, #144]	; (8011100 <prvAddNewTaskToReadyList+0xb8>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	2b01      	cmp	r3, #1
 8011072:	d110      	bne.n	8011096 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011074:	f000 fc22 	bl	80118bc <prvInitialiseTaskLists>
 8011078:	e00d      	b.n	8011096 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801107a:	4b23      	ldr	r3, [pc, #140]	; (8011108 <prvAddNewTaskToReadyList+0xc0>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d109      	bne.n	8011096 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011082:	4b20      	ldr	r3, [pc, #128]	; (8011104 <prvAddNewTaskToReadyList+0xbc>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801108c:	429a      	cmp	r2, r3
 801108e:	d802      	bhi.n	8011096 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011090:	4a1c      	ldr	r2, [pc, #112]	; (8011104 <prvAddNewTaskToReadyList+0xbc>)
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011096:	4b1d      	ldr	r3, [pc, #116]	; (801110c <prvAddNewTaskToReadyList+0xc4>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	3301      	adds	r3, #1
 801109c:	4a1b      	ldr	r2, [pc, #108]	; (801110c <prvAddNewTaskToReadyList+0xc4>)
 801109e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110a4:	2201      	movs	r2, #1
 80110a6:	409a      	lsls	r2, r3
 80110a8:	4b19      	ldr	r3, [pc, #100]	; (8011110 <prvAddNewTaskToReadyList+0xc8>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	4313      	orrs	r3, r2
 80110ae:	4a18      	ldr	r2, [pc, #96]	; (8011110 <prvAddNewTaskToReadyList+0xc8>)
 80110b0:	6013      	str	r3, [r2, #0]
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110b6:	4613      	mov	r3, r2
 80110b8:	009b      	lsls	r3, r3, #2
 80110ba:	4413      	add	r3, r2
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	4a15      	ldr	r2, [pc, #84]	; (8011114 <prvAddNewTaskToReadyList+0xcc>)
 80110c0:	441a      	add	r2, r3
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	3304      	adds	r3, #4
 80110c6:	4619      	mov	r1, r3
 80110c8:	4610      	mov	r0, r2
 80110ca:	f7ff f88a 	bl	80101e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80110ce:	f000 ff01 	bl	8011ed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80110d2:	4b0d      	ldr	r3, [pc, #52]	; (8011108 <prvAddNewTaskToReadyList+0xc0>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d00e      	beq.n	80110f8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80110da:	4b0a      	ldr	r3, [pc, #40]	; (8011104 <prvAddNewTaskToReadyList+0xbc>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d207      	bcs.n	80110f8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80110e8:	4b0b      	ldr	r3, [pc, #44]	; (8011118 <prvAddNewTaskToReadyList+0xd0>)
 80110ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110ee:	601a      	str	r2, [r3, #0]
 80110f0:	f3bf 8f4f 	dsb	sy
 80110f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110f8:	bf00      	nop
 80110fa:	3708      	adds	r7, #8
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}
 8011100:	20000cb8 	.word	0x20000cb8
 8011104:	20000bb8 	.word	0x20000bb8
 8011108:	20000cc4 	.word	0x20000cc4
 801110c:	20000cd4 	.word	0x20000cd4
 8011110:	20000cc0 	.word	0x20000cc0
 8011114:	20000bbc 	.word	0x20000bbc
 8011118:	e000ed04 	.word	0xe000ed04

0801111c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011124:	2300      	movs	r3, #0
 8011126:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d019      	beq.n	8011162 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801112e:	4b14      	ldr	r3, [pc, #80]	; (8011180 <vTaskDelay+0x64>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d00c      	beq.n	8011150 <vTaskDelay+0x34>
	__asm volatile
 8011136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801113a:	b672      	cpsid	i
 801113c:	f383 8811 	msr	BASEPRI, r3
 8011140:	f3bf 8f6f 	isb	sy
 8011144:	f3bf 8f4f 	dsb	sy
 8011148:	b662      	cpsie	i
 801114a:	60bb      	str	r3, [r7, #8]
}
 801114c:	bf00      	nop
 801114e:	e7fe      	b.n	801114e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8011150:	f000 f87e 	bl	8011250 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011154:	2100      	movs	r1, #0
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f000 fd18 	bl	8011b8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801115c:	f000 f886 	bl	801126c <xTaskResumeAll>
 8011160:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d107      	bne.n	8011178 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8011168:	4b06      	ldr	r3, [pc, #24]	; (8011184 <vTaskDelay+0x68>)
 801116a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801116e:	601a      	str	r2, [r3, #0]
 8011170:	f3bf 8f4f 	dsb	sy
 8011174:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011178:	bf00      	nop
 801117a:	3710      	adds	r7, #16
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}
 8011180:	20000ce0 	.word	0x20000ce0
 8011184:	e000ed04 	.word	0xe000ed04

08011188 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b08a      	sub	sp, #40	; 0x28
 801118c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801118e:	2300      	movs	r3, #0
 8011190:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011192:	2300      	movs	r3, #0
 8011194:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011196:	463a      	mov	r2, r7
 8011198:	1d39      	adds	r1, r7, #4
 801119a:	f107 0308 	add.w	r3, r7, #8
 801119e:	4618      	mov	r0, r3
 80111a0:	f7ef f9d2 	bl	8000548 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80111a4:	6839      	ldr	r1, [r7, #0]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	68ba      	ldr	r2, [r7, #8]
 80111aa:	9202      	str	r2, [sp, #8]
 80111ac:	9301      	str	r3, [sp, #4]
 80111ae:	2300      	movs	r3, #0
 80111b0:	9300      	str	r3, [sp, #0]
 80111b2:	2300      	movs	r3, #0
 80111b4:	460a      	mov	r2, r1
 80111b6:	4920      	ldr	r1, [pc, #128]	; (8011238 <vTaskStartScheduler+0xb0>)
 80111b8:	4820      	ldr	r0, [pc, #128]	; (801123c <vTaskStartScheduler+0xb4>)
 80111ba:	f7ff fe09 	bl	8010dd0 <xTaskCreateStatic>
 80111be:	4603      	mov	r3, r0
 80111c0:	4a1f      	ldr	r2, [pc, #124]	; (8011240 <vTaskStartScheduler+0xb8>)
 80111c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80111c4:	4b1e      	ldr	r3, [pc, #120]	; (8011240 <vTaskStartScheduler+0xb8>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d002      	beq.n	80111d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80111cc:	2301      	movs	r3, #1
 80111ce:	617b      	str	r3, [r7, #20]
 80111d0:	e001      	b.n	80111d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80111d2:	2300      	movs	r3, #0
 80111d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d118      	bne.n	801120e <vTaskStartScheduler+0x86>
	__asm volatile
 80111dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111e0:	b672      	cpsid	i
 80111e2:	f383 8811 	msr	BASEPRI, r3
 80111e6:	f3bf 8f6f 	isb	sy
 80111ea:	f3bf 8f4f 	dsb	sy
 80111ee:	b662      	cpsie	i
 80111f0:	613b      	str	r3, [r7, #16]
}
 80111f2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80111f4:	4b13      	ldr	r3, [pc, #76]	; (8011244 <vTaskStartScheduler+0xbc>)
 80111f6:	f04f 32ff 	mov.w	r2, #4294967295
 80111fa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80111fc:	4b12      	ldr	r3, [pc, #72]	; (8011248 <vTaskStartScheduler+0xc0>)
 80111fe:	2201      	movs	r2, #1
 8011200:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011202:	4b12      	ldr	r3, [pc, #72]	; (801124c <vTaskStartScheduler+0xc4>)
 8011204:	2200      	movs	r2, #0
 8011206:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011208:	f000 fdb2 	bl	8011d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801120c:	e010      	b.n	8011230 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011214:	d10c      	bne.n	8011230 <vTaskStartScheduler+0xa8>
	__asm volatile
 8011216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801121a:	b672      	cpsid	i
 801121c:	f383 8811 	msr	BASEPRI, r3
 8011220:	f3bf 8f6f 	isb	sy
 8011224:	f3bf 8f4f 	dsb	sy
 8011228:	b662      	cpsie	i
 801122a:	60fb      	str	r3, [r7, #12]
}
 801122c:	bf00      	nop
 801122e:	e7fe      	b.n	801122e <vTaskStartScheduler+0xa6>
}
 8011230:	bf00      	nop
 8011232:	3718      	adds	r7, #24
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	08012dac 	.word	0x08012dac
 801123c:	08011889 	.word	0x08011889
 8011240:	20000cdc 	.word	0x20000cdc
 8011244:	20000cd8 	.word	0x20000cd8
 8011248:	20000cc4 	.word	0x20000cc4
 801124c:	20000cbc 	.word	0x20000cbc

08011250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011250:	b480      	push	{r7}
 8011252:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011254:	4b04      	ldr	r3, [pc, #16]	; (8011268 <vTaskSuspendAll+0x18>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	3301      	adds	r3, #1
 801125a:	4a03      	ldr	r2, [pc, #12]	; (8011268 <vTaskSuspendAll+0x18>)
 801125c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801125e:	bf00      	nop
 8011260:	46bd      	mov	sp, r7
 8011262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011266:	4770      	bx	lr
 8011268:	20000ce0 	.word	0x20000ce0

0801126c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011272:	2300      	movs	r3, #0
 8011274:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011276:	2300      	movs	r3, #0
 8011278:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801127a:	4b42      	ldr	r3, [pc, #264]	; (8011384 <xTaskResumeAll+0x118>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d10c      	bne.n	801129c <xTaskResumeAll+0x30>
	__asm volatile
 8011282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011286:	b672      	cpsid	i
 8011288:	f383 8811 	msr	BASEPRI, r3
 801128c:	f3bf 8f6f 	isb	sy
 8011290:	f3bf 8f4f 	dsb	sy
 8011294:	b662      	cpsie	i
 8011296:	603b      	str	r3, [r7, #0]
}
 8011298:	bf00      	nop
 801129a:	e7fe      	b.n	801129a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801129c:	f000 fde6 	bl	8011e6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80112a0:	4b38      	ldr	r3, [pc, #224]	; (8011384 <xTaskResumeAll+0x118>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	3b01      	subs	r3, #1
 80112a6:	4a37      	ldr	r2, [pc, #220]	; (8011384 <xTaskResumeAll+0x118>)
 80112a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112aa:	4b36      	ldr	r3, [pc, #216]	; (8011384 <xTaskResumeAll+0x118>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d161      	bne.n	8011376 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80112b2:	4b35      	ldr	r3, [pc, #212]	; (8011388 <xTaskResumeAll+0x11c>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d05d      	beq.n	8011376 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80112ba:	e02e      	b.n	801131a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112bc:	4b33      	ldr	r3, [pc, #204]	; (801138c <xTaskResumeAll+0x120>)
 80112be:	68db      	ldr	r3, [r3, #12]
 80112c0:	68db      	ldr	r3, [r3, #12]
 80112c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	3318      	adds	r3, #24
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7fe ffe7 	bl	801029c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	3304      	adds	r3, #4
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7fe ffe2 	bl	801029c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112dc:	2201      	movs	r2, #1
 80112de:	409a      	lsls	r2, r3
 80112e0:	4b2b      	ldr	r3, [pc, #172]	; (8011390 <xTaskResumeAll+0x124>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	4313      	orrs	r3, r2
 80112e6:	4a2a      	ldr	r2, [pc, #168]	; (8011390 <xTaskResumeAll+0x124>)
 80112e8:	6013      	str	r3, [r2, #0]
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112ee:	4613      	mov	r3, r2
 80112f0:	009b      	lsls	r3, r3, #2
 80112f2:	4413      	add	r3, r2
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	4a27      	ldr	r2, [pc, #156]	; (8011394 <xTaskResumeAll+0x128>)
 80112f8:	441a      	add	r2, r3
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	3304      	adds	r3, #4
 80112fe:	4619      	mov	r1, r3
 8011300:	4610      	mov	r0, r2
 8011302:	f7fe ff6e 	bl	80101e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801130a:	4b23      	ldr	r3, [pc, #140]	; (8011398 <xTaskResumeAll+0x12c>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011310:	429a      	cmp	r2, r3
 8011312:	d302      	bcc.n	801131a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011314:	4b21      	ldr	r3, [pc, #132]	; (801139c <xTaskResumeAll+0x130>)
 8011316:	2201      	movs	r2, #1
 8011318:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801131a:	4b1c      	ldr	r3, [pc, #112]	; (801138c <xTaskResumeAll+0x120>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d1cc      	bne.n	80112bc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d001      	beq.n	801132c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011328:	f000 fb68 	bl	80119fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801132c:	4b1c      	ldr	r3, [pc, #112]	; (80113a0 <xTaskResumeAll+0x134>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d010      	beq.n	801135a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011338:	f000 f858 	bl	80113ec <xTaskIncrementTick>
 801133c:	4603      	mov	r3, r0
 801133e:	2b00      	cmp	r3, #0
 8011340:	d002      	beq.n	8011348 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8011342:	4b16      	ldr	r3, [pc, #88]	; (801139c <xTaskResumeAll+0x130>)
 8011344:	2201      	movs	r2, #1
 8011346:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	3b01      	subs	r3, #1
 801134c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d1f1      	bne.n	8011338 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8011354:	4b12      	ldr	r3, [pc, #72]	; (80113a0 <xTaskResumeAll+0x134>)
 8011356:	2200      	movs	r2, #0
 8011358:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801135a:	4b10      	ldr	r3, [pc, #64]	; (801139c <xTaskResumeAll+0x130>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d009      	beq.n	8011376 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011362:	2301      	movs	r3, #1
 8011364:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011366:	4b0f      	ldr	r3, [pc, #60]	; (80113a4 <xTaskResumeAll+0x138>)
 8011368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801136c:	601a      	str	r2, [r3, #0]
 801136e:	f3bf 8f4f 	dsb	sy
 8011372:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011376:	f000 fdad 	bl	8011ed4 <vPortExitCritical>

	return xAlreadyYielded;
 801137a:	68bb      	ldr	r3, [r7, #8]
}
 801137c:	4618      	mov	r0, r3
 801137e:	3710      	adds	r7, #16
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	20000ce0 	.word	0x20000ce0
 8011388:	20000cb8 	.word	0x20000cb8
 801138c:	20000c78 	.word	0x20000c78
 8011390:	20000cc0 	.word	0x20000cc0
 8011394:	20000bbc 	.word	0x20000bbc
 8011398:	20000bb8 	.word	0x20000bb8
 801139c:	20000ccc 	.word	0x20000ccc
 80113a0:	20000cc8 	.word	0x20000cc8
 80113a4:	e000ed04 	.word	0xe000ed04

080113a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80113a8:	b480      	push	{r7}
 80113aa:	b083      	sub	sp, #12
 80113ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80113ae:	4b05      	ldr	r3, [pc, #20]	; (80113c4 <xTaskGetTickCount+0x1c>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80113b4:	687b      	ldr	r3, [r7, #4]
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	370c      	adds	r7, #12
 80113ba:	46bd      	mov	sp, r7
 80113bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c0:	4770      	bx	lr
 80113c2:	bf00      	nop
 80113c4:	20000cbc 	.word	0x20000cbc

080113c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113ce:	f000 fe35 	bl	801203c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80113d2:	2300      	movs	r3, #0
 80113d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80113d6:	4b04      	ldr	r3, [pc, #16]	; (80113e8 <xTaskGetTickCountFromISR+0x20>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80113dc:	683b      	ldr	r3, [r7, #0]
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3708      	adds	r7, #8
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	20000cbc 	.word	0x20000cbc

080113ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b086      	sub	sp, #24
 80113f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80113f2:	2300      	movs	r3, #0
 80113f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80113f6:	4b4f      	ldr	r3, [pc, #316]	; (8011534 <xTaskIncrementTick+0x148>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	f040 808a 	bne.w	8011514 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011400:	4b4d      	ldr	r3, [pc, #308]	; (8011538 <xTaskIncrementTick+0x14c>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	3301      	adds	r3, #1
 8011406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011408:	4a4b      	ldr	r2, [pc, #300]	; (8011538 <xTaskIncrementTick+0x14c>)
 801140a:	693b      	ldr	r3, [r7, #16]
 801140c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d122      	bne.n	801145a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8011414:	4b49      	ldr	r3, [pc, #292]	; (801153c <xTaskIncrementTick+0x150>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d00c      	beq.n	8011438 <xTaskIncrementTick+0x4c>
	__asm volatile
 801141e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011422:	b672      	cpsid	i
 8011424:	f383 8811 	msr	BASEPRI, r3
 8011428:	f3bf 8f6f 	isb	sy
 801142c:	f3bf 8f4f 	dsb	sy
 8011430:	b662      	cpsie	i
 8011432:	603b      	str	r3, [r7, #0]
}
 8011434:	bf00      	nop
 8011436:	e7fe      	b.n	8011436 <xTaskIncrementTick+0x4a>
 8011438:	4b40      	ldr	r3, [pc, #256]	; (801153c <xTaskIncrementTick+0x150>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	60fb      	str	r3, [r7, #12]
 801143e:	4b40      	ldr	r3, [pc, #256]	; (8011540 <xTaskIncrementTick+0x154>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	4a3e      	ldr	r2, [pc, #248]	; (801153c <xTaskIncrementTick+0x150>)
 8011444:	6013      	str	r3, [r2, #0]
 8011446:	4a3e      	ldr	r2, [pc, #248]	; (8011540 <xTaskIncrementTick+0x154>)
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	6013      	str	r3, [r2, #0]
 801144c:	4b3d      	ldr	r3, [pc, #244]	; (8011544 <xTaskIncrementTick+0x158>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	3301      	adds	r3, #1
 8011452:	4a3c      	ldr	r2, [pc, #240]	; (8011544 <xTaskIncrementTick+0x158>)
 8011454:	6013      	str	r3, [r2, #0]
 8011456:	f000 fad1 	bl	80119fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801145a:	4b3b      	ldr	r3, [pc, #236]	; (8011548 <xTaskIncrementTick+0x15c>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	693a      	ldr	r2, [r7, #16]
 8011460:	429a      	cmp	r2, r3
 8011462:	d348      	bcc.n	80114f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011464:	4b35      	ldr	r3, [pc, #212]	; (801153c <xTaskIncrementTick+0x150>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d104      	bne.n	8011478 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801146e:	4b36      	ldr	r3, [pc, #216]	; (8011548 <xTaskIncrementTick+0x15c>)
 8011470:	f04f 32ff 	mov.w	r2, #4294967295
 8011474:	601a      	str	r2, [r3, #0]
					break;
 8011476:	e03e      	b.n	80114f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011478:	4b30      	ldr	r3, [pc, #192]	; (801153c <xTaskIncrementTick+0x150>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	68db      	ldr	r3, [r3, #12]
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	685b      	ldr	r3, [r3, #4]
 8011486:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011488:	693a      	ldr	r2, [r7, #16]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	429a      	cmp	r2, r3
 801148e:	d203      	bcs.n	8011498 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011490:	4a2d      	ldr	r2, [pc, #180]	; (8011548 <xTaskIncrementTick+0x15c>)
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011496:	e02e      	b.n	80114f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	3304      	adds	r3, #4
 801149c:	4618      	mov	r0, r3
 801149e:	f7fe fefd 	bl	801029c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d004      	beq.n	80114b4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	3318      	adds	r3, #24
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7fe fef4 	bl	801029c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b8:	2201      	movs	r2, #1
 80114ba:	409a      	lsls	r2, r3
 80114bc:	4b23      	ldr	r3, [pc, #140]	; (801154c <xTaskIncrementTick+0x160>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	4313      	orrs	r3, r2
 80114c2:	4a22      	ldr	r2, [pc, #136]	; (801154c <xTaskIncrementTick+0x160>)
 80114c4:	6013      	str	r3, [r2, #0]
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114ca:	4613      	mov	r3, r2
 80114cc:	009b      	lsls	r3, r3, #2
 80114ce:	4413      	add	r3, r2
 80114d0:	009b      	lsls	r3, r3, #2
 80114d2:	4a1f      	ldr	r2, [pc, #124]	; (8011550 <xTaskIncrementTick+0x164>)
 80114d4:	441a      	add	r2, r3
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	3304      	adds	r3, #4
 80114da:	4619      	mov	r1, r3
 80114dc:	4610      	mov	r0, r2
 80114de:	f7fe fe80 	bl	80101e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114e6:	4b1b      	ldr	r3, [pc, #108]	; (8011554 <xTaskIncrementTick+0x168>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d3b9      	bcc.n	8011464 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80114f0:	2301      	movs	r3, #1
 80114f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80114f4:	e7b6      	b.n	8011464 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80114f6:	4b17      	ldr	r3, [pc, #92]	; (8011554 <xTaskIncrementTick+0x168>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114fc:	4914      	ldr	r1, [pc, #80]	; (8011550 <xTaskIncrementTick+0x164>)
 80114fe:	4613      	mov	r3, r2
 8011500:	009b      	lsls	r3, r3, #2
 8011502:	4413      	add	r3, r2
 8011504:	009b      	lsls	r3, r3, #2
 8011506:	440b      	add	r3, r1
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	2b01      	cmp	r3, #1
 801150c:	d907      	bls.n	801151e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801150e:	2301      	movs	r3, #1
 8011510:	617b      	str	r3, [r7, #20]
 8011512:	e004      	b.n	801151e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011514:	4b10      	ldr	r3, [pc, #64]	; (8011558 <xTaskIncrementTick+0x16c>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	3301      	adds	r3, #1
 801151a:	4a0f      	ldr	r2, [pc, #60]	; (8011558 <xTaskIncrementTick+0x16c>)
 801151c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801151e:	4b0f      	ldr	r3, [pc, #60]	; (801155c <xTaskIncrementTick+0x170>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d001      	beq.n	801152a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8011526:	2301      	movs	r3, #1
 8011528:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801152a:	697b      	ldr	r3, [r7, #20]
}
 801152c:	4618      	mov	r0, r3
 801152e:	3718      	adds	r7, #24
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	20000ce0 	.word	0x20000ce0
 8011538:	20000cbc 	.word	0x20000cbc
 801153c:	20000c70 	.word	0x20000c70
 8011540:	20000c74 	.word	0x20000c74
 8011544:	20000cd0 	.word	0x20000cd0
 8011548:	20000cd8 	.word	0x20000cd8
 801154c:	20000cc0 	.word	0x20000cc0
 8011550:	20000bbc 	.word	0x20000bbc
 8011554:	20000bb8 	.word	0x20000bb8
 8011558:	20000cc8 	.word	0x20000cc8
 801155c:	20000ccc 	.word	0x20000ccc

08011560 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b088      	sub	sp, #32
 8011564:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011566:	4b3a      	ldr	r3, [pc, #232]	; (8011650 <vTaskSwitchContext+0xf0>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d003      	beq.n	8011576 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801156e:	4b39      	ldr	r3, [pc, #228]	; (8011654 <vTaskSwitchContext+0xf4>)
 8011570:	2201      	movs	r2, #1
 8011572:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011574:	e068      	b.n	8011648 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8011576:	4b37      	ldr	r3, [pc, #220]	; (8011654 <vTaskSwitchContext+0xf4>)
 8011578:	2200      	movs	r2, #0
 801157a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801157c:	4b36      	ldr	r3, [pc, #216]	; (8011658 <vTaskSwitchContext+0xf8>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011582:	61fb      	str	r3, [r7, #28]
 8011584:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8011588:	61bb      	str	r3, [r7, #24]
 801158a:	69fb      	ldr	r3, [r7, #28]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	69ba      	ldr	r2, [r7, #24]
 8011590:	429a      	cmp	r2, r3
 8011592:	d111      	bne.n	80115b8 <vTaskSwitchContext+0x58>
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	3304      	adds	r3, #4
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	69ba      	ldr	r2, [r7, #24]
 801159c:	429a      	cmp	r2, r3
 801159e:	d10b      	bne.n	80115b8 <vTaskSwitchContext+0x58>
 80115a0:	69fb      	ldr	r3, [r7, #28]
 80115a2:	3308      	adds	r3, #8
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	69ba      	ldr	r2, [r7, #24]
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d105      	bne.n	80115b8 <vTaskSwitchContext+0x58>
 80115ac:	69fb      	ldr	r3, [r7, #28]
 80115ae:	330c      	adds	r3, #12
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	69ba      	ldr	r2, [r7, #24]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d008      	beq.n	80115ca <vTaskSwitchContext+0x6a>
 80115b8:	4b27      	ldr	r3, [pc, #156]	; (8011658 <vTaskSwitchContext+0xf8>)
 80115ba:	681a      	ldr	r2, [r3, #0]
 80115bc:	4b26      	ldr	r3, [pc, #152]	; (8011658 <vTaskSwitchContext+0xf8>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	3334      	adds	r3, #52	; 0x34
 80115c2:	4619      	mov	r1, r3
 80115c4:	4610      	mov	r0, r2
 80115c6:	f7ee ffac 	bl	8000522 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115ca:	4b24      	ldr	r3, [pc, #144]	; (801165c <vTaskSwitchContext+0xfc>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	fab3 f383 	clz	r3, r3
 80115d6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80115d8:	7afb      	ldrb	r3, [r7, #11]
 80115da:	f1c3 031f 	rsb	r3, r3, #31
 80115de:	617b      	str	r3, [r7, #20]
 80115e0:	491f      	ldr	r1, [pc, #124]	; (8011660 <vTaskSwitchContext+0x100>)
 80115e2:	697a      	ldr	r2, [r7, #20]
 80115e4:	4613      	mov	r3, r2
 80115e6:	009b      	lsls	r3, r3, #2
 80115e8:	4413      	add	r3, r2
 80115ea:	009b      	lsls	r3, r3, #2
 80115ec:	440b      	add	r3, r1
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d10c      	bne.n	801160e <vTaskSwitchContext+0xae>
	__asm volatile
 80115f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f8:	b672      	cpsid	i
 80115fa:	f383 8811 	msr	BASEPRI, r3
 80115fe:	f3bf 8f6f 	isb	sy
 8011602:	f3bf 8f4f 	dsb	sy
 8011606:	b662      	cpsie	i
 8011608:	607b      	str	r3, [r7, #4]
}
 801160a:	bf00      	nop
 801160c:	e7fe      	b.n	801160c <vTaskSwitchContext+0xac>
 801160e:	697a      	ldr	r2, [r7, #20]
 8011610:	4613      	mov	r3, r2
 8011612:	009b      	lsls	r3, r3, #2
 8011614:	4413      	add	r3, r2
 8011616:	009b      	lsls	r3, r3, #2
 8011618:	4a11      	ldr	r2, [pc, #68]	; (8011660 <vTaskSwitchContext+0x100>)
 801161a:	4413      	add	r3, r2
 801161c:	613b      	str	r3, [r7, #16]
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	685a      	ldr	r2, [r3, #4]
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	605a      	str	r2, [r3, #4]
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	685a      	ldr	r2, [r3, #4]
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	3308      	adds	r3, #8
 8011630:	429a      	cmp	r2, r3
 8011632:	d104      	bne.n	801163e <vTaskSwitchContext+0xde>
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	685a      	ldr	r2, [r3, #4]
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	605a      	str	r2, [r3, #4]
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	4a04      	ldr	r2, [pc, #16]	; (8011658 <vTaskSwitchContext+0xf8>)
 8011646:	6013      	str	r3, [r2, #0]
}
 8011648:	bf00      	nop
 801164a:	3720      	adds	r7, #32
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}
 8011650:	20000ce0 	.word	0x20000ce0
 8011654:	20000ccc 	.word	0x20000ccc
 8011658:	20000bb8 	.word	0x20000bb8
 801165c:	20000cc0 	.word	0x20000cc0
 8011660:	20000bbc 	.word	0x20000bbc

08011664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d10c      	bne.n	801168e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8011674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011678:	b672      	cpsid	i
 801167a:	f383 8811 	msr	BASEPRI, r3
 801167e:	f3bf 8f6f 	isb	sy
 8011682:	f3bf 8f4f 	dsb	sy
 8011686:	b662      	cpsie	i
 8011688:	60fb      	str	r3, [r7, #12]
}
 801168a:	bf00      	nop
 801168c:	e7fe      	b.n	801168c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801168e:	4b07      	ldr	r3, [pc, #28]	; (80116ac <vTaskPlaceOnEventList+0x48>)
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	3318      	adds	r3, #24
 8011694:	4619      	mov	r1, r3
 8011696:	6878      	ldr	r0, [r7, #4]
 8011698:	f7fe fdc7 	bl	801022a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801169c:	2101      	movs	r1, #1
 801169e:	6838      	ldr	r0, [r7, #0]
 80116a0:	f000 fa74 	bl	8011b8c <prvAddCurrentTaskToDelayedList>
}
 80116a4:	bf00      	nop
 80116a6:	3710      	adds	r7, #16
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	20000bb8 	.word	0x20000bb8

080116b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b086      	sub	sp, #24
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	68db      	ldr	r3, [r3, #12]
 80116bc:	68db      	ldr	r3, [r3, #12]
 80116be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d10c      	bne.n	80116e0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80116c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ca:	b672      	cpsid	i
 80116cc:	f383 8811 	msr	BASEPRI, r3
 80116d0:	f3bf 8f6f 	isb	sy
 80116d4:	f3bf 8f4f 	dsb	sy
 80116d8:	b662      	cpsie	i
 80116da:	60fb      	str	r3, [r7, #12]
}
 80116dc:	bf00      	nop
 80116de:	e7fe      	b.n	80116de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	3318      	adds	r3, #24
 80116e4:	4618      	mov	r0, r3
 80116e6:	f7fe fdd9 	bl	801029c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116ea:	4b1d      	ldr	r3, [pc, #116]	; (8011760 <xTaskRemoveFromEventList+0xb0>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d11c      	bne.n	801172c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	3304      	adds	r3, #4
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fe fdd0 	bl	801029c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011700:	2201      	movs	r2, #1
 8011702:	409a      	lsls	r2, r3
 8011704:	4b17      	ldr	r3, [pc, #92]	; (8011764 <xTaskRemoveFromEventList+0xb4>)
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	4313      	orrs	r3, r2
 801170a:	4a16      	ldr	r2, [pc, #88]	; (8011764 <xTaskRemoveFromEventList+0xb4>)
 801170c:	6013      	str	r3, [r2, #0]
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011712:	4613      	mov	r3, r2
 8011714:	009b      	lsls	r3, r3, #2
 8011716:	4413      	add	r3, r2
 8011718:	009b      	lsls	r3, r3, #2
 801171a:	4a13      	ldr	r2, [pc, #76]	; (8011768 <xTaskRemoveFromEventList+0xb8>)
 801171c:	441a      	add	r2, r3
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	3304      	adds	r3, #4
 8011722:	4619      	mov	r1, r3
 8011724:	4610      	mov	r0, r2
 8011726:	f7fe fd5c 	bl	80101e2 <vListInsertEnd>
 801172a:	e005      	b.n	8011738 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	3318      	adds	r3, #24
 8011730:	4619      	mov	r1, r3
 8011732:	480e      	ldr	r0, [pc, #56]	; (801176c <xTaskRemoveFromEventList+0xbc>)
 8011734:	f7fe fd55 	bl	80101e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801173c:	4b0c      	ldr	r3, [pc, #48]	; (8011770 <xTaskRemoveFromEventList+0xc0>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011742:	429a      	cmp	r2, r3
 8011744:	d905      	bls.n	8011752 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011746:	2301      	movs	r3, #1
 8011748:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801174a:	4b0a      	ldr	r3, [pc, #40]	; (8011774 <xTaskRemoveFromEventList+0xc4>)
 801174c:	2201      	movs	r2, #1
 801174e:	601a      	str	r2, [r3, #0]
 8011750:	e001      	b.n	8011756 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011752:	2300      	movs	r3, #0
 8011754:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011756:	697b      	ldr	r3, [r7, #20]
}
 8011758:	4618      	mov	r0, r3
 801175a:	3718      	adds	r7, #24
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}
 8011760:	20000ce0 	.word	0x20000ce0
 8011764:	20000cc0 	.word	0x20000cc0
 8011768:	20000bbc 	.word	0x20000bbc
 801176c:	20000c78 	.word	0x20000c78
 8011770:	20000bb8 	.word	0x20000bb8
 8011774:	20000ccc 	.word	0x20000ccc

08011778 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011778:	b480      	push	{r7}
 801177a:	b083      	sub	sp, #12
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011780:	4b06      	ldr	r3, [pc, #24]	; (801179c <vTaskInternalSetTimeOutState+0x24>)
 8011782:	681a      	ldr	r2, [r3, #0]
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011788:	4b05      	ldr	r3, [pc, #20]	; (80117a0 <vTaskInternalSetTimeOutState+0x28>)
 801178a:	681a      	ldr	r2, [r3, #0]
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	605a      	str	r2, [r3, #4]
}
 8011790:	bf00      	nop
 8011792:	370c      	adds	r7, #12
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr
 801179c:	20000cd0 	.word	0x20000cd0
 80117a0:	20000cbc 	.word	0x20000cbc

080117a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b088      	sub	sp, #32
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d10c      	bne.n	80117ce <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80117b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b8:	b672      	cpsid	i
 80117ba:	f383 8811 	msr	BASEPRI, r3
 80117be:	f3bf 8f6f 	isb	sy
 80117c2:	f3bf 8f4f 	dsb	sy
 80117c6:	b662      	cpsie	i
 80117c8:	613b      	str	r3, [r7, #16]
}
 80117ca:	bf00      	nop
 80117cc:	e7fe      	b.n	80117cc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d10c      	bne.n	80117ee <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80117d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d8:	b672      	cpsid	i
 80117da:	f383 8811 	msr	BASEPRI, r3
 80117de:	f3bf 8f6f 	isb	sy
 80117e2:	f3bf 8f4f 	dsb	sy
 80117e6:	b662      	cpsie	i
 80117e8:	60fb      	str	r3, [r7, #12]
}
 80117ea:	bf00      	nop
 80117ec:	e7fe      	b.n	80117ec <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80117ee:	f000 fb3d 	bl	8011e6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80117f2:	4b1d      	ldr	r3, [pc, #116]	; (8011868 <xTaskCheckForTimeOut+0xc4>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	685b      	ldr	r3, [r3, #4]
 80117fc:	69ba      	ldr	r2, [r7, #24]
 80117fe:	1ad3      	subs	r3, r2, r3
 8011800:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	f1b3 3fff 	cmp.w	r3, #4294967295
 801180a:	d102      	bne.n	8011812 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801180c:	2300      	movs	r3, #0
 801180e:	61fb      	str	r3, [r7, #28]
 8011810:	e023      	b.n	801185a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681a      	ldr	r2, [r3, #0]
 8011816:	4b15      	ldr	r3, [pc, #84]	; (801186c <xTaskCheckForTimeOut+0xc8>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	429a      	cmp	r2, r3
 801181c:	d007      	beq.n	801182e <xTaskCheckForTimeOut+0x8a>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	69ba      	ldr	r2, [r7, #24]
 8011824:	429a      	cmp	r2, r3
 8011826:	d302      	bcc.n	801182e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011828:	2301      	movs	r3, #1
 801182a:	61fb      	str	r3, [r7, #28]
 801182c:	e015      	b.n	801185a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	697a      	ldr	r2, [r7, #20]
 8011834:	429a      	cmp	r2, r3
 8011836:	d20b      	bcs.n	8011850 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	1ad2      	subs	r2, r2, r3
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f7ff ff97 	bl	8011778 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801184a:	2300      	movs	r3, #0
 801184c:	61fb      	str	r3, [r7, #28]
 801184e:	e004      	b.n	801185a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	2200      	movs	r2, #0
 8011854:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011856:	2301      	movs	r3, #1
 8011858:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801185a:	f000 fb3b 	bl	8011ed4 <vPortExitCritical>

	return xReturn;
 801185e:	69fb      	ldr	r3, [r7, #28]
}
 8011860:	4618      	mov	r0, r3
 8011862:	3720      	adds	r7, #32
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	20000cbc 	.word	0x20000cbc
 801186c:	20000cd0 	.word	0x20000cd0

08011870 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011870:	b480      	push	{r7}
 8011872:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011874:	4b03      	ldr	r3, [pc, #12]	; (8011884 <vTaskMissedYield+0x14>)
 8011876:	2201      	movs	r2, #1
 8011878:	601a      	str	r2, [r3, #0]
}
 801187a:	bf00      	nop
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr
 8011884:	20000ccc 	.word	0x20000ccc

08011888 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b082      	sub	sp, #8
 801188c:	af00      	add	r7, sp, #0
 801188e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011890:	f000 f854 	bl	801193c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011894:	4b07      	ldr	r3, [pc, #28]	; (80118b4 <prvIdleTask+0x2c>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2b01      	cmp	r3, #1
 801189a:	d907      	bls.n	80118ac <prvIdleTask+0x24>
			{
				taskYIELD();
 801189c:	4b06      	ldr	r3, [pc, #24]	; (80118b8 <prvIdleTask+0x30>)
 801189e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118a2:	601a      	str	r2, [r3, #0]
 80118a4:	f3bf 8f4f 	dsb	sy
 80118a8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80118ac:	f7ee fe32 	bl	8000514 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80118b0:	e7ee      	b.n	8011890 <prvIdleTask+0x8>
 80118b2:	bf00      	nop
 80118b4:	20000bbc 	.word	0x20000bbc
 80118b8:	e000ed04 	.word	0xe000ed04

080118bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80118c2:	2300      	movs	r3, #0
 80118c4:	607b      	str	r3, [r7, #4]
 80118c6:	e00c      	b.n	80118e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80118c8:	687a      	ldr	r2, [r7, #4]
 80118ca:	4613      	mov	r3, r2
 80118cc:	009b      	lsls	r3, r3, #2
 80118ce:	4413      	add	r3, r2
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	4a12      	ldr	r2, [pc, #72]	; (801191c <prvInitialiseTaskLists+0x60>)
 80118d4:	4413      	add	r3, r2
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7fe fc56 	bl	8010188 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	3301      	adds	r3, #1
 80118e0:	607b      	str	r3, [r7, #4]
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2b06      	cmp	r3, #6
 80118e6:	d9ef      	bls.n	80118c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80118e8:	480d      	ldr	r0, [pc, #52]	; (8011920 <prvInitialiseTaskLists+0x64>)
 80118ea:	f7fe fc4d 	bl	8010188 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80118ee:	480d      	ldr	r0, [pc, #52]	; (8011924 <prvInitialiseTaskLists+0x68>)
 80118f0:	f7fe fc4a 	bl	8010188 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80118f4:	480c      	ldr	r0, [pc, #48]	; (8011928 <prvInitialiseTaskLists+0x6c>)
 80118f6:	f7fe fc47 	bl	8010188 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80118fa:	480c      	ldr	r0, [pc, #48]	; (801192c <prvInitialiseTaskLists+0x70>)
 80118fc:	f7fe fc44 	bl	8010188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011900:	480b      	ldr	r0, [pc, #44]	; (8011930 <prvInitialiseTaskLists+0x74>)
 8011902:	f7fe fc41 	bl	8010188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011906:	4b0b      	ldr	r3, [pc, #44]	; (8011934 <prvInitialiseTaskLists+0x78>)
 8011908:	4a05      	ldr	r2, [pc, #20]	; (8011920 <prvInitialiseTaskLists+0x64>)
 801190a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801190c:	4b0a      	ldr	r3, [pc, #40]	; (8011938 <prvInitialiseTaskLists+0x7c>)
 801190e:	4a05      	ldr	r2, [pc, #20]	; (8011924 <prvInitialiseTaskLists+0x68>)
 8011910:	601a      	str	r2, [r3, #0]
}
 8011912:	bf00      	nop
 8011914:	3708      	adds	r7, #8
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}
 801191a:	bf00      	nop
 801191c:	20000bbc 	.word	0x20000bbc
 8011920:	20000c48 	.word	0x20000c48
 8011924:	20000c5c 	.word	0x20000c5c
 8011928:	20000c78 	.word	0x20000c78
 801192c:	20000c8c 	.word	0x20000c8c
 8011930:	20000ca4 	.word	0x20000ca4
 8011934:	20000c70 	.word	0x20000c70
 8011938:	20000c74 	.word	0x20000c74

0801193c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b082      	sub	sp, #8
 8011940:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011942:	e019      	b.n	8011978 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011944:	f000 fa92 	bl	8011e6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011948:	4b10      	ldr	r3, [pc, #64]	; (801198c <prvCheckTasksWaitingTermination+0x50>)
 801194a:	68db      	ldr	r3, [r3, #12]
 801194c:	68db      	ldr	r3, [r3, #12]
 801194e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	3304      	adds	r3, #4
 8011954:	4618      	mov	r0, r3
 8011956:	f7fe fca1 	bl	801029c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801195a:	4b0d      	ldr	r3, [pc, #52]	; (8011990 <prvCheckTasksWaitingTermination+0x54>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	3b01      	subs	r3, #1
 8011960:	4a0b      	ldr	r2, [pc, #44]	; (8011990 <prvCheckTasksWaitingTermination+0x54>)
 8011962:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011964:	4b0b      	ldr	r3, [pc, #44]	; (8011994 <prvCheckTasksWaitingTermination+0x58>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	3b01      	subs	r3, #1
 801196a:	4a0a      	ldr	r2, [pc, #40]	; (8011994 <prvCheckTasksWaitingTermination+0x58>)
 801196c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801196e:	f000 fab1 	bl	8011ed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f000 f810 	bl	8011998 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011978:	4b06      	ldr	r3, [pc, #24]	; (8011994 <prvCheckTasksWaitingTermination+0x58>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d1e1      	bne.n	8011944 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011980:	bf00      	nop
 8011982:	bf00      	nop
 8011984:	3708      	adds	r7, #8
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}
 801198a:	bf00      	nop
 801198c:	20000c8c 	.word	0x20000c8c
 8011990:	20000cb8 	.word	0x20000cb8
 8011994:	20000ca0 	.word	0x20000ca0

08011998 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011998:	b580      	push	{r7, lr}
 801199a:	b084      	sub	sp, #16
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d108      	bne.n	80119bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119ae:	4618      	mov	r0, r3
 80119b0:	f000 fc58 	bl	8012264 <vPortFree>
				vPortFree( pxTCB );
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 fc55 	bl	8012264 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80119ba:	e01a      	b.n	80119f2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d103      	bne.n	80119ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 fc4c 	bl	8012264 <vPortFree>
	}
 80119cc:	e011      	b.n	80119f2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80119d4:	2b02      	cmp	r3, #2
 80119d6:	d00c      	beq.n	80119f2 <prvDeleteTCB+0x5a>
	__asm volatile
 80119d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119dc:	b672      	cpsid	i
 80119de:	f383 8811 	msr	BASEPRI, r3
 80119e2:	f3bf 8f6f 	isb	sy
 80119e6:	f3bf 8f4f 	dsb	sy
 80119ea:	b662      	cpsie	i
 80119ec:	60fb      	str	r3, [r7, #12]
}
 80119ee:	bf00      	nop
 80119f0:	e7fe      	b.n	80119f0 <prvDeleteTCB+0x58>
	}
 80119f2:	bf00      	nop
 80119f4:	3710      	adds	r7, #16
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}
	...

080119fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80119fc:	b480      	push	{r7}
 80119fe:	b083      	sub	sp, #12
 8011a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a02:	4b0c      	ldr	r3, [pc, #48]	; (8011a34 <prvResetNextTaskUnblockTime+0x38>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d104      	bne.n	8011a16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011a0c:	4b0a      	ldr	r3, [pc, #40]	; (8011a38 <prvResetNextTaskUnblockTime+0x3c>)
 8011a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8011a12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011a14:	e008      	b.n	8011a28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a16:	4b07      	ldr	r3, [pc, #28]	; (8011a34 <prvResetNextTaskUnblockTime+0x38>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	68db      	ldr	r3, [r3, #12]
 8011a1c:	68db      	ldr	r3, [r3, #12]
 8011a1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	685b      	ldr	r3, [r3, #4]
 8011a24:	4a04      	ldr	r2, [pc, #16]	; (8011a38 <prvResetNextTaskUnblockTime+0x3c>)
 8011a26:	6013      	str	r3, [r2, #0]
}
 8011a28:	bf00      	nop
 8011a2a:	370c      	adds	r7, #12
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr
 8011a34:	20000c70 	.word	0x20000c70
 8011a38:	20000cd8 	.word	0x20000cd8

08011a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011a3c:	b480      	push	{r7}
 8011a3e:	b083      	sub	sp, #12
 8011a40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011a42:	4b0b      	ldr	r3, [pc, #44]	; (8011a70 <xTaskGetSchedulerState+0x34>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d102      	bne.n	8011a50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	607b      	str	r3, [r7, #4]
 8011a4e:	e008      	b.n	8011a62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a50:	4b08      	ldr	r3, [pc, #32]	; (8011a74 <xTaskGetSchedulerState+0x38>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d102      	bne.n	8011a5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011a58:	2302      	movs	r3, #2
 8011a5a:	607b      	str	r3, [r7, #4]
 8011a5c:	e001      	b.n	8011a62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011a62:	687b      	ldr	r3, [r7, #4]
	}
 8011a64:	4618      	mov	r0, r3
 8011a66:	370c      	adds	r7, #12
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6e:	4770      	bx	lr
 8011a70:	20000cc4 	.word	0x20000cc4
 8011a74:	20000ce0 	.word	0x20000ce0

08011a78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b086      	sub	sp, #24
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011a84:	2300      	movs	r3, #0
 8011a86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d072      	beq.n	8011b74 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011a8e:	4b3c      	ldr	r3, [pc, #240]	; (8011b80 <xTaskPriorityDisinherit+0x108>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	693a      	ldr	r2, [r7, #16]
 8011a94:	429a      	cmp	r2, r3
 8011a96:	d00c      	beq.n	8011ab2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8011a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a9c:	b672      	cpsid	i
 8011a9e:	f383 8811 	msr	BASEPRI, r3
 8011aa2:	f3bf 8f6f 	isb	sy
 8011aa6:	f3bf 8f4f 	dsb	sy
 8011aaa:	b662      	cpsie	i
 8011aac:	60fb      	str	r3, [r7, #12]
}
 8011aae:	bf00      	nop
 8011ab0:	e7fe      	b.n	8011ab0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d10c      	bne.n	8011ad4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8011aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011abe:	b672      	cpsid	i
 8011ac0:	f383 8811 	msr	BASEPRI, r3
 8011ac4:	f3bf 8f6f 	isb	sy
 8011ac8:	f3bf 8f4f 	dsb	sy
 8011acc:	b662      	cpsie	i
 8011ace:	60bb      	str	r3, [r7, #8]
}
 8011ad0:	bf00      	nop
 8011ad2:	e7fe      	b.n	8011ad2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ad8:	1e5a      	subs	r2, r3, #1
 8011ada:	693b      	ldr	r3, [r7, #16]
 8011adc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d044      	beq.n	8011b74 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d140      	bne.n	8011b74 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	3304      	adds	r3, #4
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fe fbd0 	bl	801029c <uxListRemove>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d115      	bne.n	8011b2e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b06:	491f      	ldr	r1, [pc, #124]	; (8011b84 <xTaskPriorityDisinherit+0x10c>)
 8011b08:	4613      	mov	r3, r2
 8011b0a:	009b      	lsls	r3, r3, #2
 8011b0c:	4413      	add	r3, r2
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	440b      	add	r3, r1
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d10a      	bne.n	8011b2e <xTaskPriorityDisinherit+0xb6>
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b22:	43da      	mvns	r2, r3
 8011b24:	4b18      	ldr	r3, [pc, #96]	; (8011b88 <xTaskPriorityDisinherit+0x110>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	4013      	ands	r3, r2
 8011b2a:	4a17      	ldr	r2, [pc, #92]	; (8011b88 <xTaskPriorityDisinherit+0x110>)
 8011b2c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b3a:	f1c3 0207 	rsb	r2, r3, #7
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b46:	2201      	movs	r2, #1
 8011b48:	409a      	lsls	r2, r3
 8011b4a:	4b0f      	ldr	r3, [pc, #60]	; (8011b88 <xTaskPriorityDisinherit+0x110>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	4313      	orrs	r3, r2
 8011b50:	4a0d      	ldr	r2, [pc, #52]	; (8011b88 <xTaskPriorityDisinherit+0x110>)
 8011b52:	6013      	str	r3, [r2, #0]
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b58:	4613      	mov	r3, r2
 8011b5a:	009b      	lsls	r3, r3, #2
 8011b5c:	4413      	add	r3, r2
 8011b5e:	009b      	lsls	r3, r3, #2
 8011b60:	4a08      	ldr	r2, [pc, #32]	; (8011b84 <xTaskPriorityDisinherit+0x10c>)
 8011b62:	441a      	add	r2, r3
 8011b64:	693b      	ldr	r3, [r7, #16]
 8011b66:	3304      	adds	r3, #4
 8011b68:	4619      	mov	r1, r3
 8011b6a:	4610      	mov	r0, r2
 8011b6c:	f7fe fb39 	bl	80101e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011b70:	2301      	movs	r3, #1
 8011b72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b74:	697b      	ldr	r3, [r7, #20]
	}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3718      	adds	r7, #24
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	20000bb8 	.word	0x20000bb8
 8011b84:	20000bbc 	.word	0x20000bbc
 8011b88:	20000cc0 	.word	0x20000cc0

08011b8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b084      	sub	sp, #16
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011b96:	4b29      	ldr	r3, [pc, #164]	; (8011c3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b9c:	4b28      	ldr	r3, [pc, #160]	; (8011c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	3304      	adds	r3, #4
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7fe fb7a 	bl	801029c <uxListRemove>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d10b      	bne.n	8011bc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011bae:	4b24      	ldr	r3, [pc, #144]	; (8011c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb4:	2201      	movs	r2, #1
 8011bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8011bba:	43da      	mvns	r2, r3
 8011bbc:	4b21      	ldr	r3, [pc, #132]	; (8011c44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	4013      	ands	r3, r2
 8011bc2:	4a20      	ldr	r2, [pc, #128]	; (8011c44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011bc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bcc:	d10a      	bne.n	8011be4 <prvAddCurrentTaskToDelayedList+0x58>
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d007      	beq.n	8011be4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011bd4:	4b1a      	ldr	r3, [pc, #104]	; (8011c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	3304      	adds	r3, #4
 8011bda:	4619      	mov	r1, r3
 8011bdc:	481a      	ldr	r0, [pc, #104]	; (8011c48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011bde:	f7fe fb00 	bl	80101e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011be2:	e026      	b.n	8011c32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011be4:	68fa      	ldr	r2, [r7, #12]
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4413      	add	r3, r2
 8011bea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011bec:	4b14      	ldr	r3, [pc, #80]	; (8011c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	68ba      	ldr	r2, [r7, #8]
 8011bf2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011bf4:	68ba      	ldr	r2, [r7, #8]
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d209      	bcs.n	8011c10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011bfc:	4b13      	ldr	r3, [pc, #76]	; (8011c4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	4b0f      	ldr	r3, [pc, #60]	; (8011c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	3304      	adds	r3, #4
 8011c06:	4619      	mov	r1, r3
 8011c08:	4610      	mov	r0, r2
 8011c0a:	f7fe fb0e 	bl	801022a <vListInsert>
}
 8011c0e:	e010      	b.n	8011c32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c10:	4b0f      	ldr	r3, [pc, #60]	; (8011c50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011c12:	681a      	ldr	r2, [r3, #0]
 8011c14:	4b0a      	ldr	r3, [pc, #40]	; (8011c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	3304      	adds	r3, #4
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	f7fe fb04 	bl	801022a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011c22:	4b0c      	ldr	r3, [pc, #48]	; (8011c54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	68ba      	ldr	r2, [r7, #8]
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	d202      	bcs.n	8011c32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011c2c:	4a09      	ldr	r2, [pc, #36]	; (8011c54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	6013      	str	r3, [r2, #0]
}
 8011c32:	bf00      	nop
 8011c34:	3710      	adds	r7, #16
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	20000cbc 	.word	0x20000cbc
 8011c40:	20000bb8 	.word	0x20000bb8
 8011c44:	20000cc0 	.word	0x20000cc0
 8011c48:	20000ca4 	.word	0x20000ca4
 8011c4c:	20000c74 	.word	0x20000c74
 8011c50:	20000c70 	.word	0x20000c70
 8011c54:	20000cd8 	.word	0x20000cd8

08011c58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b085      	sub	sp, #20
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	3b04      	subs	r3, #4
 8011c68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	3b04      	subs	r3, #4
 8011c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	f023 0201 	bic.w	r2, r3, #1
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	3b04      	subs	r3, #4
 8011c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011c88:	4a0c      	ldr	r2, [pc, #48]	; (8011cbc <pxPortInitialiseStack+0x64>)
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	3b14      	subs	r3, #20
 8011c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	3b04      	subs	r3, #4
 8011c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	f06f 0202 	mvn.w	r2, #2
 8011ca6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	3b20      	subs	r3, #32
 8011cac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011cae:	68fb      	ldr	r3, [r7, #12]
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3714      	adds	r7, #20
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr
 8011cbc:	08011cc1 	.word	0x08011cc1

08011cc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	b085      	sub	sp, #20
 8011cc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011cca:	4b14      	ldr	r3, [pc, #80]	; (8011d1c <prvTaskExitError+0x5c>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cd2:	d00c      	beq.n	8011cee <prvTaskExitError+0x2e>
	__asm volatile
 8011cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd8:	b672      	cpsid	i
 8011cda:	f383 8811 	msr	BASEPRI, r3
 8011cde:	f3bf 8f6f 	isb	sy
 8011ce2:	f3bf 8f4f 	dsb	sy
 8011ce6:	b662      	cpsie	i
 8011ce8:	60fb      	str	r3, [r7, #12]
}
 8011cea:	bf00      	nop
 8011cec:	e7fe      	b.n	8011cec <prvTaskExitError+0x2c>
	__asm volatile
 8011cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf2:	b672      	cpsid	i
 8011cf4:	f383 8811 	msr	BASEPRI, r3
 8011cf8:	f3bf 8f6f 	isb	sy
 8011cfc:	f3bf 8f4f 	dsb	sy
 8011d00:	b662      	cpsie	i
 8011d02:	60bb      	str	r3, [r7, #8]
}
 8011d04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011d06:	bf00      	nop
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d0fc      	beq.n	8011d08 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011d0e:	bf00      	nop
 8011d10:	bf00      	nop
 8011d12:	3714      	adds	r7, #20
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr
 8011d1c:	2000002c 	.word	0x2000002c

08011d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011d20:	4b07      	ldr	r3, [pc, #28]	; (8011d40 <pxCurrentTCBConst2>)
 8011d22:	6819      	ldr	r1, [r3, #0]
 8011d24:	6808      	ldr	r0, [r1, #0]
 8011d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d2a:	f380 8809 	msr	PSP, r0
 8011d2e:	f3bf 8f6f 	isb	sy
 8011d32:	f04f 0000 	mov.w	r0, #0
 8011d36:	f380 8811 	msr	BASEPRI, r0
 8011d3a:	4770      	bx	lr
 8011d3c:	f3af 8000 	nop.w

08011d40 <pxCurrentTCBConst2>:
 8011d40:	20000bb8 	.word	0x20000bb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011d44:	bf00      	nop
 8011d46:	bf00      	nop

08011d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011d48:	4808      	ldr	r0, [pc, #32]	; (8011d6c <prvPortStartFirstTask+0x24>)
 8011d4a:	6800      	ldr	r0, [r0, #0]
 8011d4c:	6800      	ldr	r0, [r0, #0]
 8011d4e:	f380 8808 	msr	MSP, r0
 8011d52:	f04f 0000 	mov.w	r0, #0
 8011d56:	f380 8814 	msr	CONTROL, r0
 8011d5a:	b662      	cpsie	i
 8011d5c:	b661      	cpsie	f
 8011d5e:	f3bf 8f4f 	dsb	sy
 8011d62:	f3bf 8f6f 	isb	sy
 8011d66:	df00      	svc	0
 8011d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011d6a:	bf00      	nop
 8011d6c:	e000ed08 	.word	0xe000ed08

08011d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011d76:	4b37      	ldr	r3, [pc, #220]	; (8011e54 <xPortStartScheduler+0xe4>)
 8011d78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	22ff      	movs	r2, #255	; 0xff
 8011d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	b2db      	uxtb	r3, r3
 8011d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011d90:	78fb      	ldrb	r3, [r7, #3]
 8011d92:	b2db      	uxtb	r3, r3
 8011d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011d98:	b2da      	uxtb	r2, r3
 8011d9a:	4b2f      	ldr	r3, [pc, #188]	; (8011e58 <xPortStartScheduler+0xe8>)
 8011d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011d9e:	4b2f      	ldr	r3, [pc, #188]	; (8011e5c <xPortStartScheduler+0xec>)
 8011da0:	2207      	movs	r2, #7
 8011da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011da4:	e009      	b.n	8011dba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011da6:	4b2d      	ldr	r3, [pc, #180]	; (8011e5c <xPortStartScheduler+0xec>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	3b01      	subs	r3, #1
 8011dac:	4a2b      	ldr	r2, [pc, #172]	; (8011e5c <xPortStartScheduler+0xec>)
 8011dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011db0:	78fb      	ldrb	r3, [r7, #3]
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	005b      	lsls	r3, r3, #1
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011dba:	78fb      	ldrb	r3, [r7, #3]
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011dc2:	2b80      	cmp	r3, #128	; 0x80
 8011dc4:	d0ef      	beq.n	8011da6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011dc6:	4b25      	ldr	r3, [pc, #148]	; (8011e5c <xPortStartScheduler+0xec>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	f1c3 0307 	rsb	r3, r3, #7
 8011dce:	2b04      	cmp	r3, #4
 8011dd0:	d00c      	beq.n	8011dec <xPortStartScheduler+0x7c>
	__asm volatile
 8011dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dd6:	b672      	cpsid	i
 8011dd8:	f383 8811 	msr	BASEPRI, r3
 8011ddc:	f3bf 8f6f 	isb	sy
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	b662      	cpsie	i
 8011de6:	60bb      	str	r3, [r7, #8]
}
 8011de8:	bf00      	nop
 8011dea:	e7fe      	b.n	8011dea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011dec:	4b1b      	ldr	r3, [pc, #108]	; (8011e5c <xPortStartScheduler+0xec>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	021b      	lsls	r3, r3, #8
 8011df2:	4a1a      	ldr	r2, [pc, #104]	; (8011e5c <xPortStartScheduler+0xec>)
 8011df4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011df6:	4b19      	ldr	r3, [pc, #100]	; (8011e5c <xPortStartScheduler+0xec>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011dfe:	4a17      	ldr	r2, [pc, #92]	; (8011e5c <xPortStartScheduler+0xec>)
 8011e00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	b2da      	uxtb	r2, r3
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011e0a:	4b15      	ldr	r3, [pc, #84]	; (8011e60 <xPortStartScheduler+0xf0>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	4a14      	ldr	r2, [pc, #80]	; (8011e60 <xPortStartScheduler+0xf0>)
 8011e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011e14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011e16:	4b12      	ldr	r3, [pc, #72]	; (8011e60 <xPortStartScheduler+0xf0>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	4a11      	ldr	r2, [pc, #68]	; (8011e60 <xPortStartScheduler+0xf0>)
 8011e1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011e20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011e22:	f000 f8dd 	bl	8011fe0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011e26:	4b0f      	ldr	r3, [pc, #60]	; (8011e64 <xPortStartScheduler+0xf4>)
 8011e28:	2200      	movs	r2, #0
 8011e2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011e2c:	f000 f8fc 	bl	8012028 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011e30:	4b0d      	ldr	r3, [pc, #52]	; (8011e68 <xPortStartScheduler+0xf8>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4a0c      	ldr	r2, [pc, #48]	; (8011e68 <xPortStartScheduler+0xf8>)
 8011e36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011e3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011e3c:	f7ff ff84 	bl	8011d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011e40:	f7ff fb8e 	bl	8011560 <vTaskSwitchContext>
	prvTaskExitError();
 8011e44:	f7ff ff3c 	bl	8011cc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011e48:	2300      	movs	r3, #0
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3710      	adds	r7, #16
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
 8011e52:	bf00      	nop
 8011e54:	e000e400 	.word	0xe000e400
 8011e58:	20000ce4 	.word	0x20000ce4
 8011e5c:	20000ce8 	.word	0x20000ce8
 8011e60:	e000ed20 	.word	0xe000ed20
 8011e64:	2000002c 	.word	0x2000002c
 8011e68:	e000ef34 	.word	0xe000ef34

08011e6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
	__asm volatile
 8011e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e76:	b672      	cpsid	i
 8011e78:	f383 8811 	msr	BASEPRI, r3
 8011e7c:	f3bf 8f6f 	isb	sy
 8011e80:	f3bf 8f4f 	dsb	sy
 8011e84:	b662      	cpsie	i
 8011e86:	607b      	str	r3, [r7, #4]
}
 8011e88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011e8a:	4b10      	ldr	r3, [pc, #64]	; (8011ecc <vPortEnterCritical+0x60>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	3301      	adds	r3, #1
 8011e90:	4a0e      	ldr	r2, [pc, #56]	; (8011ecc <vPortEnterCritical+0x60>)
 8011e92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011e94:	4b0d      	ldr	r3, [pc, #52]	; (8011ecc <vPortEnterCritical+0x60>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	2b01      	cmp	r3, #1
 8011e9a:	d111      	bne.n	8011ec0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011e9c:	4b0c      	ldr	r3, [pc, #48]	; (8011ed0 <vPortEnterCritical+0x64>)
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	b2db      	uxtb	r3, r3
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d00c      	beq.n	8011ec0 <vPortEnterCritical+0x54>
	__asm volatile
 8011ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eaa:	b672      	cpsid	i
 8011eac:	f383 8811 	msr	BASEPRI, r3
 8011eb0:	f3bf 8f6f 	isb	sy
 8011eb4:	f3bf 8f4f 	dsb	sy
 8011eb8:	b662      	cpsie	i
 8011eba:	603b      	str	r3, [r7, #0]
}
 8011ebc:	bf00      	nop
 8011ebe:	e7fe      	b.n	8011ebe <vPortEnterCritical+0x52>
	}
}
 8011ec0:	bf00      	nop
 8011ec2:	370c      	adds	r7, #12
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr
 8011ecc:	2000002c 	.word	0x2000002c
 8011ed0:	e000ed04 	.word	0xe000ed04

08011ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011eda:	4b13      	ldr	r3, [pc, #76]	; (8011f28 <vPortExitCritical+0x54>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d10c      	bne.n	8011efc <vPortExitCritical+0x28>
	__asm volatile
 8011ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee6:	b672      	cpsid	i
 8011ee8:	f383 8811 	msr	BASEPRI, r3
 8011eec:	f3bf 8f6f 	isb	sy
 8011ef0:	f3bf 8f4f 	dsb	sy
 8011ef4:	b662      	cpsie	i
 8011ef6:	607b      	str	r3, [r7, #4]
}
 8011ef8:	bf00      	nop
 8011efa:	e7fe      	b.n	8011efa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8011efc:	4b0a      	ldr	r3, [pc, #40]	; (8011f28 <vPortExitCritical+0x54>)
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	3b01      	subs	r3, #1
 8011f02:	4a09      	ldr	r2, [pc, #36]	; (8011f28 <vPortExitCritical+0x54>)
 8011f04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011f06:	4b08      	ldr	r3, [pc, #32]	; (8011f28 <vPortExitCritical+0x54>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d105      	bne.n	8011f1a <vPortExitCritical+0x46>
 8011f0e:	2300      	movs	r3, #0
 8011f10:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	f383 8811 	msr	BASEPRI, r3
}
 8011f18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011f1a:	bf00      	nop
 8011f1c:	370c      	adds	r7, #12
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f24:	4770      	bx	lr
 8011f26:	bf00      	nop
 8011f28:	2000002c 	.word	0x2000002c
 8011f2c:	00000000 	.word	0x00000000

08011f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011f30:	f3ef 8009 	mrs	r0, PSP
 8011f34:	f3bf 8f6f 	isb	sy
 8011f38:	4b15      	ldr	r3, [pc, #84]	; (8011f90 <pxCurrentTCBConst>)
 8011f3a:	681a      	ldr	r2, [r3, #0]
 8011f3c:	f01e 0f10 	tst.w	lr, #16
 8011f40:	bf08      	it	eq
 8011f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f4a:	6010      	str	r0, [r2, #0]
 8011f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011f54:	b672      	cpsid	i
 8011f56:	f380 8811 	msr	BASEPRI, r0
 8011f5a:	f3bf 8f4f 	dsb	sy
 8011f5e:	f3bf 8f6f 	isb	sy
 8011f62:	b662      	cpsie	i
 8011f64:	f7ff fafc 	bl	8011560 <vTaskSwitchContext>
 8011f68:	f04f 0000 	mov.w	r0, #0
 8011f6c:	f380 8811 	msr	BASEPRI, r0
 8011f70:	bc09      	pop	{r0, r3}
 8011f72:	6819      	ldr	r1, [r3, #0]
 8011f74:	6808      	ldr	r0, [r1, #0]
 8011f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f7a:	f01e 0f10 	tst.w	lr, #16
 8011f7e:	bf08      	it	eq
 8011f80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011f84:	f380 8809 	msr	PSP, r0
 8011f88:	f3bf 8f6f 	isb	sy
 8011f8c:	4770      	bx	lr
 8011f8e:	bf00      	nop

08011f90 <pxCurrentTCBConst>:
 8011f90:	20000bb8 	.word	0x20000bb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011f94:	bf00      	nop
 8011f96:	bf00      	nop

08011f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b082      	sub	sp, #8
 8011f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8011f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa2:	b672      	cpsid	i
 8011fa4:	f383 8811 	msr	BASEPRI, r3
 8011fa8:	f3bf 8f6f 	isb	sy
 8011fac:	f3bf 8f4f 	dsb	sy
 8011fb0:	b662      	cpsie	i
 8011fb2:	607b      	str	r3, [r7, #4]
}
 8011fb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011fb6:	f7ff fa19 	bl	80113ec <xTaskIncrementTick>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d003      	beq.n	8011fc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011fc0:	4b06      	ldr	r3, [pc, #24]	; (8011fdc <SysTick_Handler+0x44>)
 8011fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fc6:	601a      	str	r2, [r3, #0]
 8011fc8:	2300      	movs	r3, #0
 8011fca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	f383 8811 	msr	BASEPRI, r3
}
 8011fd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011fd4:	bf00      	nop
 8011fd6:	3708      	adds	r7, #8
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}
 8011fdc:	e000ed04 	.word	0xe000ed04

08011fe0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011fe4:	4b0b      	ldr	r3, [pc, #44]	; (8012014 <vPortSetupTimerInterrupt+0x34>)
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011fea:	4b0b      	ldr	r3, [pc, #44]	; (8012018 <vPortSetupTimerInterrupt+0x38>)
 8011fec:	2200      	movs	r2, #0
 8011fee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011ff0:	4b0a      	ldr	r3, [pc, #40]	; (801201c <vPortSetupTimerInterrupt+0x3c>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	4a0a      	ldr	r2, [pc, #40]	; (8012020 <vPortSetupTimerInterrupt+0x40>)
 8011ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8011ffa:	099b      	lsrs	r3, r3, #6
 8011ffc:	4a09      	ldr	r2, [pc, #36]	; (8012024 <vPortSetupTimerInterrupt+0x44>)
 8011ffe:	3b01      	subs	r3, #1
 8012000:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012002:	4b04      	ldr	r3, [pc, #16]	; (8012014 <vPortSetupTimerInterrupt+0x34>)
 8012004:	2207      	movs	r2, #7
 8012006:	601a      	str	r2, [r3, #0]
}
 8012008:	bf00      	nop
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr
 8012012:	bf00      	nop
 8012014:	e000e010 	.word	0xe000e010
 8012018:	e000e018 	.word	0xe000e018
 801201c:	20000000 	.word	0x20000000
 8012020:	10624dd3 	.word	0x10624dd3
 8012024:	e000e014 	.word	0xe000e014

08012028 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012028:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012038 <vPortEnableVFP+0x10>
 801202c:	6801      	ldr	r1, [r0, #0]
 801202e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012032:	6001      	str	r1, [r0, #0]
 8012034:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012036:	bf00      	nop
 8012038:	e000ed88 	.word	0xe000ed88

0801203c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801203c:	b480      	push	{r7}
 801203e:	b085      	sub	sp, #20
 8012040:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012042:	f3ef 8305 	mrs	r3, IPSR
 8012046:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	2b0f      	cmp	r3, #15
 801204c:	d916      	bls.n	801207c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801204e:	4a19      	ldr	r2, [pc, #100]	; (80120b4 <vPortValidateInterruptPriority+0x78>)
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	4413      	add	r3, r2
 8012054:	781b      	ldrb	r3, [r3, #0]
 8012056:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012058:	4b17      	ldr	r3, [pc, #92]	; (80120b8 <vPortValidateInterruptPriority+0x7c>)
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	7afa      	ldrb	r2, [r7, #11]
 801205e:	429a      	cmp	r2, r3
 8012060:	d20c      	bcs.n	801207c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012066:	b672      	cpsid	i
 8012068:	f383 8811 	msr	BASEPRI, r3
 801206c:	f3bf 8f6f 	isb	sy
 8012070:	f3bf 8f4f 	dsb	sy
 8012074:	b662      	cpsie	i
 8012076:	607b      	str	r3, [r7, #4]
}
 8012078:	bf00      	nop
 801207a:	e7fe      	b.n	801207a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801207c:	4b0f      	ldr	r3, [pc, #60]	; (80120bc <vPortValidateInterruptPriority+0x80>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012084:	4b0e      	ldr	r3, [pc, #56]	; (80120c0 <vPortValidateInterruptPriority+0x84>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	429a      	cmp	r2, r3
 801208a:	d90c      	bls.n	80120a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801208c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012090:	b672      	cpsid	i
 8012092:	f383 8811 	msr	BASEPRI, r3
 8012096:	f3bf 8f6f 	isb	sy
 801209a:	f3bf 8f4f 	dsb	sy
 801209e:	b662      	cpsie	i
 80120a0:	603b      	str	r3, [r7, #0]
}
 80120a2:	bf00      	nop
 80120a4:	e7fe      	b.n	80120a4 <vPortValidateInterruptPriority+0x68>
	}
 80120a6:	bf00      	nop
 80120a8:	3714      	adds	r7, #20
 80120aa:	46bd      	mov	sp, r7
 80120ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	e000e3f0 	.word	0xe000e3f0
 80120b8:	20000ce4 	.word	0x20000ce4
 80120bc:	e000ed0c 	.word	0xe000ed0c
 80120c0:	20000ce8 	.word	0x20000ce8

080120c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b08a      	sub	sp, #40	; 0x28
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80120cc:	2300      	movs	r3, #0
 80120ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80120d0:	f7ff f8be 	bl	8011250 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80120d4:	4b5e      	ldr	r3, [pc, #376]	; (8012250 <pvPortMalloc+0x18c>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d101      	bne.n	80120e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80120dc:	f000 f920 	bl	8012320 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80120e0:	4b5c      	ldr	r3, [pc, #368]	; (8012254 <pvPortMalloc+0x190>)
 80120e2:	681a      	ldr	r2, [r3, #0]
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	4013      	ands	r3, r2
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	f040 8092 	bne.w	8012212 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d01f      	beq.n	8012134 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80120f4:	2208      	movs	r2, #8
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	4413      	add	r3, r2
 80120fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f003 0307 	and.w	r3, r3, #7
 8012102:	2b00      	cmp	r3, #0
 8012104:	d016      	beq.n	8012134 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f023 0307 	bic.w	r3, r3, #7
 801210c:	3308      	adds	r3, #8
 801210e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f003 0307 	and.w	r3, r3, #7
 8012116:	2b00      	cmp	r3, #0
 8012118:	d00c      	beq.n	8012134 <pvPortMalloc+0x70>
	__asm volatile
 801211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801211e:	b672      	cpsid	i
 8012120:	f383 8811 	msr	BASEPRI, r3
 8012124:	f3bf 8f6f 	isb	sy
 8012128:	f3bf 8f4f 	dsb	sy
 801212c:	b662      	cpsie	i
 801212e:	617b      	str	r3, [r7, #20]
}
 8012130:	bf00      	nop
 8012132:	e7fe      	b.n	8012132 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d06b      	beq.n	8012212 <pvPortMalloc+0x14e>
 801213a:	4b47      	ldr	r3, [pc, #284]	; (8012258 <pvPortMalloc+0x194>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	687a      	ldr	r2, [r7, #4]
 8012140:	429a      	cmp	r2, r3
 8012142:	d866      	bhi.n	8012212 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012144:	4b45      	ldr	r3, [pc, #276]	; (801225c <pvPortMalloc+0x198>)
 8012146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012148:	4b44      	ldr	r3, [pc, #272]	; (801225c <pvPortMalloc+0x198>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801214e:	e004      	b.n	801215a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8012150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	687a      	ldr	r2, [r7, #4]
 8012160:	429a      	cmp	r2, r3
 8012162:	d903      	bls.n	801216c <pvPortMalloc+0xa8>
 8012164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d1f1      	bne.n	8012150 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801216c:	4b38      	ldr	r3, [pc, #224]	; (8012250 <pvPortMalloc+0x18c>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012172:	429a      	cmp	r2, r3
 8012174:	d04d      	beq.n	8012212 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012176:	6a3b      	ldr	r3, [r7, #32]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	2208      	movs	r2, #8
 801217c:	4413      	add	r3, r2
 801217e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	6a3b      	ldr	r3, [r7, #32]
 8012186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801218a:	685a      	ldr	r2, [r3, #4]
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	1ad2      	subs	r2, r2, r3
 8012190:	2308      	movs	r3, #8
 8012192:	005b      	lsls	r3, r3, #1
 8012194:	429a      	cmp	r2, r3
 8012196:	d921      	bls.n	80121dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	4413      	add	r3, r2
 801219e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80121a0:	69bb      	ldr	r3, [r7, #24]
 80121a2:	f003 0307 	and.w	r3, r3, #7
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d00c      	beq.n	80121c4 <pvPortMalloc+0x100>
	__asm volatile
 80121aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ae:	b672      	cpsid	i
 80121b0:	f383 8811 	msr	BASEPRI, r3
 80121b4:	f3bf 8f6f 	isb	sy
 80121b8:	f3bf 8f4f 	dsb	sy
 80121bc:	b662      	cpsie	i
 80121be:	613b      	str	r3, [r7, #16]
}
 80121c0:	bf00      	nop
 80121c2:	e7fe      	b.n	80121c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80121c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c6:	685a      	ldr	r2, [r3, #4]
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	1ad2      	subs	r2, r2, r3
 80121cc:	69bb      	ldr	r3, [r7, #24]
 80121ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80121d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d2:	687a      	ldr	r2, [r7, #4]
 80121d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80121d6:	69b8      	ldr	r0, [r7, #24]
 80121d8:	f000 f904 	bl	80123e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80121dc:	4b1e      	ldr	r3, [pc, #120]	; (8012258 <pvPortMalloc+0x194>)
 80121de:	681a      	ldr	r2, [r3, #0]
 80121e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	1ad3      	subs	r3, r2, r3
 80121e6:	4a1c      	ldr	r2, [pc, #112]	; (8012258 <pvPortMalloc+0x194>)
 80121e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80121ea:	4b1b      	ldr	r3, [pc, #108]	; (8012258 <pvPortMalloc+0x194>)
 80121ec:	681a      	ldr	r2, [r3, #0]
 80121ee:	4b1c      	ldr	r3, [pc, #112]	; (8012260 <pvPortMalloc+0x19c>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d203      	bcs.n	80121fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80121f6:	4b18      	ldr	r3, [pc, #96]	; (8012258 <pvPortMalloc+0x194>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	4a19      	ldr	r2, [pc, #100]	; (8012260 <pvPortMalloc+0x19c>)
 80121fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80121fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012200:	685a      	ldr	r2, [r3, #4]
 8012202:	4b14      	ldr	r3, [pc, #80]	; (8012254 <pvPortMalloc+0x190>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	431a      	orrs	r2, r3
 8012208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220e:	2200      	movs	r2, #0
 8012210:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012212:	f7ff f82b 	bl	801126c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012216:	69fb      	ldr	r3, [r7, #28]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d101      	bne.n	8012220 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801221c:	f7ee f98c 	bl	8000538 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012220:	69fb      	ldr	r3, [r7, #28]
 8012222:	f003 0307 	and.w	r3, r3, #7
 8012226:	2b00      	cmp	r3, #0
 8012228:	d00c      	beq.n	8012244 <pvPortMalloc+0x180>
	__asm volatile
 801222a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801222e:	b672      	cpsid	i
 8012230:	f383 8811 	msr	BASEPRI, r3
 8012234:	f3bf 8f6f 	isb	sy
 8012238:	f3bf 8f4f 	dsb	sy
 801223c:	b662      	cpsie	i
 801223e:	60fb      	str	r3, [r7, #12]
}
 8012240:	bf00      	nop
 8012242:	e7fe      	b.n	8012242 <pvPortMalloc+0x17e>
	return pvReturn;
 8012244:	69fb      	ldr	r3, [r7, #28]
}
 8012246:	4618      	mov	r0, r3
 8012248:	3728      	adds	r7, #40	; 0x28
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	20008cf4 	.word	0x20008cf4
 8012254:	20008d00 	.word	0x20008d00
 8012258:	20008cf8 	.word	0x20008cf8
 801225c:	20008cec 	.word	0x20008cec
 8012260:	20008cfc 	.word	0x20008cfc

08012264 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b086      	sub	sp, #24
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d04c      	beq.n	8012310 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012276:	2308      	movs	r3, #8
 8012278:	425b      	negs	r3, r3
 801227a:	697a      	ldr	r2, [r7, #20]
 801227c:	4413      	add	r3, r2
 801227e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	685a      	ldr	r2, [r3, #4]
 8012288:	4b23      	ldr	r3, [pc, #140]	; (8012318 <vPortFree+0xb4>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	4013      	ands	r3, r2
 801228e:	2b00      	cmp	r3, #0
 8012290:	d10c      	bne.n	80122ac <vPortFree+0x48>
	__asm volatile
 8012292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012296:	b672      	cpsid	i
 8012298:	f383 8811 	msr	BASEPRI, r3
 801229c:	f3bf 8f6f 	isb	sy
 80122a0:	f3bf 8f4f 	dsb	sy
 80122a4:	b662      	cpsie	i
 80122a6:	60fb      	str	r3, [r7, #12]
}
 80122a8:	bf00      	nop
 80122aa:	e7fe      	b.n	80122aa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80122ac:	693b      	ldr	r3, [r7, #16]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d00c      	beq.n	80122ce <vPortFree+0x6a>
	__asm volatile
 80122b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122b8:	b672      	cpsid	i
 80122ba:	f383 8811 	msr	BASEPRI, r3
 80122be:	f3bf 8f6f 	isb	sy
 80122c2:	f3bf 8f4f 	dsb	sy
 80122c6:	b662      	cpsie	i
 80122c8:	60bb      	str	r3, [r7, #8]
}
 80122ca:	bf00      	nop
 80122cc:	e7fe      	b.n	80122cc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	685a      	ldr	r2, [r3, #4]
 80122d2:	4b11      	ldr	r3, [pc, #68]	; (8012318 <vPortFree+0xb4>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	4013      	ands	r3, r2
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d019      	beq.n	8012310 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80122dc:	693b      	ldr	r3, [r7, #16]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d115      	bne.n	8012310 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80122e4:	693b      	ldr	r3, [r7, #16]
 80122e6:	685a      	ldr	r2, [r3, #4]
 80122e8:	4b0b      	ldr	r3, [pc, #44]	; (8012318 <vPortFree+0xb4>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	43db      	mvns	r3, r3
 80122ee:	401a      	ands	r2, r3
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80122f4:	f7fe ffac 	bl	8011250 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80122f8:	693b      	ldr	r3, [r7, #16]
 80122fa:	685a      	ldr	r2, [r3, #4]
 80122fc:	4b07      	ldr	r3, [pc, #28]	; (801231c <vPortFree+0xb8>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4413      	add	r3, r2
 8012302:	4a06      	ldr	r2, [pc, #24]	; (801231c <vPortFree+0xb8>)
 8012304:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012306:	6938      	ldr	r0, [r7, #16]
 8012308:	f000 f86c 	bl	80123e4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801230c:	f7fe ffae 	bl	801126c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012310:	bf00      	nop
 8012312:	3718      	adds	r7, #24
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}
 8012318:	20008d00 	.word	0x20008d00
 801231c:	20008cf8 	.word	0x20008cf8

08012320 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801232a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801232c:	4b27      	ldr	r3, [pc, #156]	; (80123cc <prvHeapInit+0xac>)
 801232e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f003 0307 	and.w	r3, r3, #7
 8012336:	2b00      	cmp	r3, #0
 8012338:	d00c      	beq.n	8012354 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	3307      	adds	r3, #7
 801233e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	f023 0307 	bic.w	r3, r3, #7
 8012346:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012348:	68ba      	ldr	r2, [r7, #8]
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	1ad3      	subs	r3, r2, r3
 801234e:	4a1f      	ldr	r2, [pc, #124]	; (80123cc <prvHeapInit+0xac>)
 8012350:	4413      	add	r3, r2
 8012352:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012358:	4a1d      	ldr	r2, [pc, #116]	; (80123d0 <prvHeapInit+0xb0>)
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801235e:	4b1c      	ldr	r3, [pc, #112]	; (80123d0 <prvHeapInit+0xb0>)
 8012360:	2200      	movs	r2, #0
 8012362:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	68ba      	ldr	r2, [r7, #8]
 8012368:	4413      	add	r3, r2
 801236a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801236c:	2208      	movs	r2, #8
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	1a9b      	subs	r3, r3, r2
 8012372:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	f023 0307 	bic.w	r3, r3, #7
 801237a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	4a15      	ldr	r2, [pc, #84]	; (80123d4 <prvHeapInit+0xb4>)
 8012380:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012382:	4b14      	ldr	r3, [pc, #80]	; (80123d4 <prvHeapInit+0xb4>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2200      	movs	r2, #0
 8012388:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801238a:	4b12      	ldr	r3, [pc, #72]	; (80123d4 <prvHeapInit+0xb4>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	2200      	movs	r2, #0
 8012390:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	68fa      	ldr	r2, [r7, #12]
 801239a:	1ad2      	subs	r2, r2, r3
 801239c:	683b      	ldr	r3, [r7, #0]
 801239e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80123a0:	4b0c      	ldr	r3, [pc, #48]	; (80123d4 <prvHeapInit+0xb4>)
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	4a0a      	ldr	r2, [pc, #40]	; (80123d8 <prvHeapInit+0xb8>)
 80123ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	4a09      	ldr	r2, [pc, #36]	; (80123dc <prvHeapInit+0xbc>)
 80123b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80123b8:	4b09      	ldr	r3, [pc, #36]	; (80123e0 <prvHeapInit+0xc0>)
 80123ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80123be:	601a      	str	r2, [r3, #0]
}
 80123c0:	bf00      	nop
 80123c2:	3714      	adds	r7, #20
 80123c4:	46bd      	mov	sp, r7
 80123c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ca:	4770      	bx	lr
 80123cc:	20000cec 	.word	0x20000cec
 80123d0:	20008cec 	.word	0x20008cec
 80123d4:	20008cf4 	.word	0x20008cf4
 80123d8:	20008cfc 	.word	0x20008cfc
 80123dc:	20008cf8 	.word	0x20008cf8
 80123e0:	20008d00 	.word	0x20008d00

080123e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80123e4:	b480      	push	{r7}
 80123e6:	b085      	sub	sp, #20
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80123ec:	4b28      	ldr	r3, [pc, #160]	; (8012490 <prvInsertBlockIntoFreeList+0xac>)
 80123ee:	60fb      	str	r3, [r7, #12]
 80123f0:	e002      	b.n	80123f8 <prvInsertBlockIntoFreeList+0x14>
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	60fb      	str	r3, [r7, #12]
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	687a      	ldr	r2, [r7, #4]
 80123fe:	429a      	cmp	r2, r3
 8012400:	d8f7      	bhi.n	80123f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	68ba      	ldr	r2, [r7, #8]
 801240c:	4413      	add	r3, r2
 801240e:	687a      	ldr	r2, [r7, #4]
 8012410:	429a      	cmp	r2, r3
 8012412:	d108      	bne.n	8012426 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	685a      	ldr	r2, [r3, #4]
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	441a      	add	r2, r3
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	68ba      	ldr	r2, [r7, #8]
 8012430:	441a      	add	r2, r3
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	429a      	cmp	r2, r3
 8012438:	d118      	bne.n	801246c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	681a      	ldr	r2, [r3, #0]
 801243e:	4b15      	ldr	r3, [pc, #84]	; (8012494 <prvInsertBlockIntoFreeList+0xb0>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	429a      	cmp	r2, r3
 8012444:	d00d      	beq.n	8012462 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	685a      	ldr	r2, [r3, #4]
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	685b      	ldr	r3, [r3, #4]
 8012450:	441a      	add	r2, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	681a      	ldr	r2, [r3, #0]
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	601a      	str	r2, [r3, #0]
 8012460:	e008      	b.n	8012474 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012462:	4b0c      	ldr	r3, [pc, #48]	; (8012494 <prvInsertBlockIntoFreeList+0xb0>)
 8012464:	681a      	ldr	r2, [r3, #0]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	601a      	str	r2, [r3, #0]
 801246a:	e003      	b.n	8012474 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	681a      	ldr	r2, [r3, #0]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012474:	68fa      	ldr	r2, [r7, #12]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	429a      	cmp	r2, r3
 801247a:	d002      	beq.n	8012482 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	687a      	ldr	r2, [r7, #4]
 8012480:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012482:	bf00      	nop
 8012484:	3714      	adds	r7, #20
 8012486:	46bd      	mov	sp, r7
 8012488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248c:	4770      	bx	lr
 801248e:	bf00      	nop
 8012490:	20008cec 	.word	0x20008cec
 8012494:	20008cf4 	.word	0x20008cf4

08012498 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801249c:	2201      	movs	r2, #1
 801249e:	490e      	ldr	r1, [pc, #56]	; (80124d8 <MX_USB_HOST_Init+0x40>)
 80124a0:	480e      	ldr	r0, [pc, #56]	; (80124dc <MX_USB_HOST_Init+0x44>)
 80124a2:	f7fb ff01 	bl	800e2a8 <USBH_Init>
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d001      	beq.n	80124b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80124ac:	f7ef faba 	bl	8001a24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80124b0:	490b      	ldr	r1, [pc, #44]	; (80124e0 <MX_USB_HOST_Init+0x48>)
 80124b2:	480a      	ldr	r0, [pc, #40]	; (80124dc <MX_USB_HOST_Init+0x44>)
 80124b4:	f7fb ffae 	bl	800e414 <USBH_RegisterClass>
 80124b8:	4603      	mov	r3, r0
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d001      	beq.n	80124c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80124be:	f7ef fab1 	bl	8001a24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80124c2:	4806      	ldr	r0, [pc, #24]	; (80124dc <MX_USB_HOST_Init+0x44>)
 80124c4:	f7fc f832 	bl	800e52c <USBH_Start>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d001      	beq.n	80124d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80124ce:	f7ef faa9 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80124d2:	bf00      	nop
 80124d4:	bd80      	pop	{r7, pc}
 80124d6:	bf00      	nop
 80124d8:	080124e5 	.word	0x080124e5
 80124dc:	20008d04 	.word	0x20008d04
 80124e0:	2000000c 	.word	0x2000000c

080124e4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80124e4:	b480      	push	{r7}
 80124e6:	b083      	sub	sp, #12
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
 80124ec:	460b      	mov	r3, r1
 80124ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80124f0:	78fb      	ldrb	r3, [r7, #3]
 80124f2:	3b01      	subs	r3, #1
 80124f4:	2b04      	cmp	r3, #4
 80124f6:	d819      	bhi.n	801252c <USBH_UserProcess+0x48>
 80124f8:	a201      	add	r2, pc, #4	; (adr r2, 8012500 <USBH_UserProcess+0x1c>)
 80124fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124fe:	bf00      	nop
 8012500:	0801252d 	.word	0x0801252d
 8012504:	0801251d 	.word	0x0801251d
 8012508:	0801252d 	.word	0x0801252d
 801250c:	08012525 	.word	0x08012525
 8012510:	08012515 	.word	0x08012515
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012514:	4b09      	ldr	r3, [pc, #36]	; (801253c <USBH_UserProcess+0x58>)
 8012516:	2203      	movs	r2, #3
 8012518:	701a      	strb	r2, [r3, #0]
  break;
 801251a:	e008      	b.n	801252e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801251c:	4b07      	ldr	r3, [pc, #28]	; (801253c <USBH_UserProcess+0x58>)
 801251e:	2202      	movs	r2, #2
 8012520:	701a      	strb	r2, [r3, #0]
  break;
 8012522:	e004      	b.n	801252e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012524:	4b05      	ldr	r3, [pc, #20]	; (801253c <USBH_UserProcess+0x58>)
 8012526:	2201      	movs	r2, #1
 8012528:	701a      	strb	r2, [r3, #0]
  break;
 801252a:	e000      	b.n	801252e <USBH_UserProcess+0x4a>

  default:
  break;
 801252c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801252e:	bf00      	nop
 8012530:	370c      	adds	r7, #12
 8012532:	46bd      	mov	sp, r7
 8012534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012538:	4770      	bx	lr
 801253a:	bf00      	nop
 801253c:	200090e8 	.word	0x200090e8

08012540 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b08a      	sub	sp, #40	; 0x28
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012548:	f107 0314 	add.w	r3, r7, #20
 801254c:	2200      	movs	r2, #0
 801254e:	601a      	str	r2, [r3, #0]
 8012550:	605a      	str	r2, [r3, #4]
 8012552:	609a      	str	r2, [r3, #8]
 8012554:	60da      	str	r2, [r3, #12]
 8012556:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012560:	d13c      	bne.n	80125dc <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012562:	4b20      	ldr	r3, [pc, #128]	; (80125e4 <HAL_HCD_MspInit+0xa4>)
 8012564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012566:	4a1f      	ldr	r2, [pc, #124]	; (80125e4 <HAL_HCD_MspInit+0xa4>)
 8012568:	f043 0301 	orr.w	r3, r3, #1
 801256c:	6313      	str	r3, [r2, #48]	; 0x30
 801256e:	4b1d      	ldr	r3, [pc, #116]	; (80125e4 <HAL_HCD_MspInit+0xa4>)
 8012570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012572:	f003 0301 	and.w	r3, r3, #1
 8012576:	613b      	str	r3, [r7, #16]
 8012578:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801257a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801257e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012580:	2302      	movs	r3, #2
 8012582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012584:	2300      	movs	r3, #0
 8012586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012588:	2303      	movs	r3, #3
 801258a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801258c:	230a      	movs	r3, #10
 801258e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012590:	f107 0314 	add.w	r3, r7, #20
 8012594:	4619      	mov	r1, r3
 8012596:	4814      	ldr	r0, [pc, #80]	; (80125e8 <HAL_HCD_MspInit+0xa8>)
 8012598:	f7f2 f804 	bl	80045a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801259c:	4b11      	ldr	r3, [pc, #68]	; (80125e4 <HAL_HCD_MspInit+0xa4>)
 801259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125a0:	4a10      	ldr	r2, [pc, #64]	; (80125e4 <HAL_HCD_MspInit+0xa4>)
 80125a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125a6:	6353      	str	r3, [r2, #52]	; 0x34
 80125a8:	4b0e      	ldr	r3, [pc, #56]	; (80125e4 <HAL_HCD_MspInit+0xa4>)
 80125aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125b0:	60fb      	str	r3, [r7, #12]
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	4b0b      	ldr	r3, [pc, #44]	; (80125e4 <HAL_HCD_MspInit+0xa4>)
 80125b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125b8:	4a0a      	ldr	r2, [pc, #40]	; (80125e4 <HAL_HCD_MspInit+0xa4>)
 80125ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80125be:	6453      	str	r3, [r2, #68]	; 0x44
 80125c0:	4b08      	ldr	r3, [pc, #32]	; (80125e4 <HAL_HCD_MspInit+0xa4>)
 80125c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80125c8:	60bb      	str	r3, [r7, #8]
 80125ca:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80125cc:	2200      	movs	r2, #0
 80125ce:	2105      	movs	r1, #5
 80125d0:	2043      	movs	r0, #67	; 0x43
 80125d2:	f7f0 ff6d 	bl	80034b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80125d6:	2043      	movs	r0, #67	; 0x43
 80125d8:	f7f0 ff86 	bl	80034e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80125dc:	bf00      	nop
 80125de:	3728      	adds	r7, #40	; 0x28
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	40023800 	.word	0x40023800
 80125e8:	40020000 	.word	0x40020000

080125ec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80125fa:	4618      	mov	r0, r3
 80125fc:	f7fc fc43 	bl	800ee86 <USBH_LL_IncTimer>
}
 8012600:	bf00      	nop
 8012602:	3708      	adds	r7, #8
 8012604:	46bd      	mov	sp, r7
 8012606:	bd80      	pop	{r7, pc}

08012608 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b082      	sub	sp, #8
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012616:	4618      	mov	r0, r3
 8012618:	f7fc fc87 	bl	800ef2a <USBH_LL_Connect>
}
 801261c:	bf00      	nop
 801261e:	3708      	adds	r7, #8
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}

08012624 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b082      	sub	sp, #8
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012632:	4618      	mov	r0, r3
 8012634:	f7fc fc9c 	bl	800ef70 <USBH_LL_Disconnect>
}
 8012638:	bf00      	nop
 801263a:	3708      	adds	r7, #8
 801263c:	46bd      	mov	sp, r7
 801263e:	bd80      	pop	{r7, pc}

08012640 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b082      	sub	sp, #8
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
 8012648:	460b      	mov	r3, r1
 801264a:	70fb      	strb	r3, [r7, #3]
 801264c:	4613      	mov	r3, r2
 801264e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012656:	4618      	mov	r0, r3
 8012658:	f7fc fcd1 	bl	800effe <USBH_LL_NotifyURBChange>
#endif
}
 801265c:	bf00      	nop
 801265e:	3708      	adds	r7, #8
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}

08012664 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8012672:	4618      	mov	r0, r3
 8012674:	f7fc fc31 	bl	800eeda <USBH_LL_PortEnabled>
}
 8012678:	bf00      	nop
 801267a:	3708      	adds	r7, #8
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}

08012680 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801268e:	4618      	mov	r0, r3
 8012690:	f7fc fc3d 	bl	800ef0e <USBH_LL_PortDisabled>
}
 8012694:	bf00      	nop
 8012696:	3708      	adds	r7, #8
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b082      	sub	sp, #8
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80126aa:	2b01      	cmp	r3, #1
 80126ac:	d12a      	bne.n	8012704 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80126ae:	4a18      	ldr	r2, [pc, #96]	; (8012710 <USBH_LL_Init+0x74>)
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	4a15      	ldr	r2, [pc, #84]	; (8012710 <USBH_LL_Init+0x74>)
 80126ba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80126be:	4b14      	ldr	r3, [pc, #80]	; (8012710 <USBH_LL_Init+0x74>)
 80126c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80126c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80126c6:	4b12      	ldr	r3, [pc, #72]	; (8012710 <USBH_LL_Init+0x74>)
 80126c8:	2208      	movs	r2, #8
 80126ca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80126cc:	4b10      	ldr	r3, [pc, #64]	; (8012710 <USBH_LL_Init+0x74>)
 80126ce:	2201      	movs	r2, #1
 80126d0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80126d2:	4b0f      	ldr	r3, [pc, #60]	; (8012710 <USBH_LL_Init+0x74>)
 80126d4:	2200      	movs	r2, #0
 80126d6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80126d8:	4b0d      	ldr	r3, [pc, #52]	; (8012710 <USBH_LL_Init+0x74>)
 80126da:	2202      	movs	r2, #2
 80126dc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80126de:	4b0c      	ldr	r3, [pc, #48]	; (8012710 <USBH_LL_Init+0x74>)
 80126e0:	2200      	movs	r2, #0
 80126e2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80126e4:	480a      	ldr	r0, [pc, #40]	; (8012710 <USBH_LL_Init+0x74>)
 80126e6:	f7f2 f93a 	bl	800495e <HAL_HCD_Init>
 80126ea:	4603      	mov	r3, r0
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d001      	beq.n	80126f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80126f0:	f7ef f998 	bl	8001a24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80126f4:	4806      	ldr	r0, [pc, #24]	; (8012710 <USBH_LL_Init+0x74>)
 80126f6:	f7f2 fd1e 	bl	8005136 <HAL_HCD_GetCurrentFrame>
 80126fa:	4603      	mov	r3, r0
 80126fc:	4619      	mov	r1, r3
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f7fc fbb2 	bl	800ee68 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012704:	2300      	movs	r3, #0
}
 8012706:	4618      	mov	r0, r3
 8012708:	3708      	adds	r7, #8
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	200090ec 	.word	0x200090ec

08012714 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b084      	sub	sp, #16
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801271c:	2300      	movs	r3, #0
 801271e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012720:	2300      	movs	r3, #0
 8012722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801272a:	4618      	mov	r0, r3
 801272c:	f7f2 fc8d 	bl	800504a <HAL_HCD_Start>
 8012730:	4603      	mov	r3, r0
 8012732:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012734:	7bfb      	ldrb	r3, [r7, #15]
 8012736:	4618      	mov	r0, r3
 8012738:	f000 f95c 	bl	80129f4 <USBH_Get_USB_Status>
 801273c:	4603      	mov	r3, r0
 801273e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012740:	7bbb      	ldrb	r3, [r7, #14]
}
 8012742:	4618      	mov	r0, r3
 8012744:	3710      	adds	r7, #16
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}

0801274a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801274a:	b580      	push	{r7, lr}
 801274c:	b084      	sub	sp, #16
 801274e:	af00      	add	r7, sp, #0
 8012750:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012752:	2300      	movs	r3, #0
 8012754:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012756:	2300      	movs	r3, #0
 8012758:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012760:	4618      	mov	r0, r3
 8012762:	f7f2 fc95 	bl	8005090 <HAL_HCD_Stop>
 8012766:	4603      	mov	r3, r0
 8012768:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801276a:	7bfb      	ldrb	r3, [r7, #15]
 801276c:	4618      	mov	r0, r3
 801276e:	f000 f941 	bl	80129f4 <USBH_Get_USB_Status>
 8012772:	4603      	mov	r3, r0
 8012774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012776:	7bbb      	ldrb	r3, [r7, #14]
}
 8012778:	4618      	mov	r0, r3
 801277a:	3710      	adds	r7, #16
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}

08012780 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b084      	sub	sp, #16
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012788:	2301      	movs	r3, #1
 801278a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012792:	4618      	mov	r0, r3
 8012794:	f7f2 fcdd 	bl	8005152 <HAL_HCD_GetCurrentSpeed>
 8012798:	4603      	mov	r3, r0
 801279a:	2b02      	cmp	r3, #2
 801279c:	d00c      	beq.n	80127b8 <USBH_LL_GetSpeed+0x38>
 801279e:	2b02      	cmp	r3, #2
 80127a0:	d80d      	bhi.n	80127be <USBH_LL_GetSpeed+0x3e>
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d002      	beq.n	80127ac <USBH_LL_GetSpeed+0x2c>
 80127a6:	2b01      	cmp	r3, #1
 80127a8:	d003      	beq.n	80127b2 <USBH_LL_GetSpeed+0x32>
 80127aa:	e008      	b.n	80127be <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80127ac:	2300      	movs	r3, #0
 80127ae:	73fb      	strb	r3, [r7, #15]
    break;
 80127b0:	e008      	b.n	80127c4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80127b2:	2301      	movs	r3, #1
 80127b4:	73fb      	strb	r3, [r7, #15]
    break;
 80127b6:	e005      	b.n	80127c4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80127b8:	2302      	movs	r3, #2
 80127ba:	73fb      	strb	r3, [r7, #15]
    break;
 80127bc:	e002      	b.n	80127c4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80127be:	2301      	movs	r3, #1
 80127c0:	73fb      	strb	r3, [r7, #15]
    break;
 80127c2:	bf00      	nop
  }
  return  speed;
 80127c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	3710      	adds	r7, #16
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}

080127ce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80127ce:	b580      	push	{r7, lr}
 80127d0:	b084      	sub	sp, #16
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80127d6:	2300      	movs	r3, #0
 80127d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80127da:	2300      	movs	r3, #0
 80127dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80127e4:	4618      	mov	r0, r3
 80127e6:	f7f2 fc70 	bl	80050ca <HAL_HCD_ResetPort>
 80127ea:	4603      	mov	r3, r0
 80127ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80127ee:	7bfb      	ldrb	r3, [r7, #15]
 80127f0:	4618      	mov	r0, r3
 80127f2:	f000 f8ff 	bl	80129f4 <USBH_Get_USB_Status>
 80127f6:	4603      	mov	r3, r0
 80127f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80127fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80127fc:	4618      	mov	r0, r3
 80127fe:	3710      	adds	r7, #16
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}

08012804 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b082      	sub	sp, #8
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
 801280c:	460b      	mov	r3, r1
 801280e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012816:	78fa      	ldrb	r2, [r7, #3]
 8012818:	4611      	mov	r1, r2
 801281a:	4618      	mov	r0, r3
 801281c:	f7f2 fc77 	bl	800510e <HAL_HCD_HC_GetXferCount>
 8012820:	4603      	mov	r3, r0
}
 8012822:	4618      	mov	r0, r3
 8012824:	3708      	adds	r7, #8
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801282a:	b590      	push	{r4, r7, lr}
 801282c:	b089      	sub	sp, #36	; 0x24
 801282e:	af04      	add	r7, sp, #16
 8012830:	6078      	str	r0, [r7, #4]
 8012832:	4608      	mov	r0, r1
 8012834:	4611      	mov	r1, r2
 8012836:	461a      	mov	r2, r3
 8012838:	4603      	mov	r3, r0
 801283a:	70fb      	strb	r3, [r7, #3]
 801283c:	460b      	mov	r3, r1
 801283e:	70bb      	strb	r3, [r7, #2]
 8012840:	4613      	mov	r3, r2
 8012842:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012844:	2300      	movs	r3, #0
 8012846:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012848:	2300      	movs	r3, #0
 801284a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012852:	787c      	ldrb	r4, [r7, #1]
 8012854:	78ba      	ldrb	r2, [r7, #2]
 8012856:	78f9      	ldrb	r1, [r7, #3]
 8012858:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801285a:	9302      	str	r3, [sp, #8]
 801285c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012860:	9301      	str	r3, [sp, #4]
 8012862:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012866:	9300      	str	r3, [sp, #0]
 8012868:	4623      	mov	r3, r4
 801286a:	f7f2 f8da 	bl	8004a22 <HAL_HCD_HC_Init>
 801286e:	4603      	mov	r3, r0
 8012870:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012872:	7bfb      	ldrb	r3, [r7, #15]
 8012874:	4618      	mov	r0, r3
 8012876:	f000 f8bd 	bl	80129f4 <USBH_Get_USB_Status>
 801287a:	4603      	mov	r3, r0
 801287c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801287e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012880:	4618      	mov	r0, r3
 8012882:	3714      	adds	r7, #20
 8012884:	46bd      	mov	sp, r7
 8012886:	bd90      	pop	{r4, r7, pc}

08012888 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b084      	sub	sp, #16
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	460b      	mov	r3, r1
 8012892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012894:	2300      	movs	r3, #0
 8012896:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012898:	2300      	movs	r3, #0
 801289a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80128a2:	78fa      	ldrb	r2, [r7, #3]
 80128a4:	4611      	mov	r1, r2
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7f2 f94a 	bl	8004b40 <HAL_HCD_HC_Halt>
 80128ac:	4603      	mov	r3, r0
 80128ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80128b0:	7bfb      	ldrb	r3, [r7, #15]
 80128b2:	4618      	mov	r0, r3
 80128b4:	f000 f89e 	bl	80129f4 <USBH_Get_USB_Status>
 80128b8:	4603      	mov	r3, r0
 80128ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80128bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80128be:	4618      	mov	r0, r3
 80128c0:	3710      	adds	r7, #16
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}

080128c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80128c6:	b590      	push	{r4, r7, lr}
 80128c8:	b089      	sub	sp, #36	; 0x24
 80128ca:	af04      	add	r7, sp, #16
 80128cc:	6078      	str	r0, [r7, #4]
 80128ce:	4608      	mov	r0, r1
 80128d0:	4611      	mov	r1, r2
 80128d2:	461a      	mov	r2, r3
 80128d4:	4603      	mov	r3, r0
 80128d6:	70fb      	strb	r3, [r7, #3]
 80128d8:	460b      	mov	r3, r1
 80128da:	70bb      	strb	r3, [r7, #2]
 80128dc:	4613      	mov	r3, r2
 80128de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80128e0:	2300      	movs	r3, #0
 80128e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80128e4:	2300      	movs	r3, #0
 80128e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80128ee:	787c      	ldrb	r4, [r7, #1]
 80128f0:	78ba      	ldrb	r2, [r7, #2]
 80128f2:	78f9      	ldrb	r1, [r7, #3]
 80128f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80128f8:	9303      	str	r3, [sp, #12]
 80128fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80128fc:	9302      	str	r3, [sp, #8]
 80128fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012900:	9301      	str	r3, [sp, #4]
 8012902:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012906:	9300      	str	r3, [sp, #0]
 8012908:	4623      	mov	r3, r4
 801290a:	f7f2 f93d 	bl	8004b88 <HAL_HCD_HC_SubmitRequest>
 801290e:	4603      	mov	r3, r0
 8012910:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012912:	7bfb      	ldrb	r3, [r7, #15]
 8012914:	4618      	mov	r0, r3
 8012916:	f000 f86d 	bl	80129f4 <USBH_Get_USB_Status>
 801291a:	4603      	mov	r3, r0
 801291c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801291e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012920:	4618      	mov	r0, r3
 8012922:	3714      	adds	r7, #20
 8012924:	46bd      	mov	sp, r7
 8012926:	bd90      	pop	{r4, r7, pc}

08012928 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b082      	sub	sp, #8
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
 8012930:	460b      	mov	r3, r1
 8012932:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801293a:	78fa      	ldrb	r2, [r7, #3]
 801293c:	4611      	mov	r1, r2
 801293e:	4618      	mov	r0, r3
 8012940:	f7f2 fbd1 	bl	80050e6 <HAL_HCD_HC_GetURBState>
 8012944:	4603      	mov	r3, r0
}
 8012946:	4618      	mov	r0, r3
 8012948:	3708      	adds	r7, #8
 801294a:	46bd      	mov	sp, r7
 801294c:	bd80      	pop	{r7, pc}

0801294e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801294e:	b580      	push	{r7, lr}
 8012950:	b082      	sub	sp, #8
 8012952:	af00      	add	r7, sp, #0
 8012954:	6078      	str	r0, [r7, #4]
 8012956:	460b      	mov	r3, r1
 8012958:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012960:	2b01      	cmp	r3, #1
 8012962:	d103      	bne.n	801296c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8012964:	78fb      	ldrb	r3, [r7, #3]
 8012966:	4618      	mov	r0, r3
 8012968:	f000 f870 	bl	8012a4c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801296c:	20c8      	movs	r0, #200	; 0xc8
 801296e:	f7f0 fa2f 	bl	8002dd0 <HAL_Delay>
  return USBH_OK;
 8012972:	2300      	movs	r3, #0
}
 8012974:	4618      	mov	r0, r3
 8012976:	3708      	adds	r7, #8
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}

0801297c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801297c:	b480      	push	{r7}
 801297e:	b085      	sub	sp, #20
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	460b      	mov	r3, r1
 8012986:	70fb      	strb	r3, [r7, #3]
 8012988:	4613      	mov	r3, r2
 801298a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012992:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012994:	78fb      	ldrb	r3, [r7, #3]
 8012996:	68fa      	ldr	r2, [r7, #12]
 8012998:	212c      	movs	r1, #44	; 0x2c
 801299a:	fb01 f303 	mul.w	r3, r1, r3
 801299e:	4413      	add	r3, r2
 80129a0:	333b      	adds	r3, #59	; 0x3b
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d009      	beq.n	80129bc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80129a8:	78fb      	ldrb	r3, [r7, #3]
 80129aa:	68fa      	ldr	r2, [r7, #12]
 80129ac:	212c      	movs	r1, #44	; 0x2c
 80129ae:	fb01 f303 	mul.w	r3, r1, r3
 80129b2:	4413      	add	r3, r2
 80129b4:	3354      	adds	r3, #84	; 0x54
 80129b6:	78ba      	ldrb	r2, [r7, #2]
 80129b8:	701a      	strb	r2, [r3, #0]
 80129ba:	e008      	b.n	80129ce <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80129bc:	78fb      	ldrb	r3, [r7, #3]
 80129be:	68fa      	ldr	r2, [r7, #12]
 80129c0:	212c      	movs	r1, #44	; 0x2c
 80129c2:	fb01 f303 	mul.w	r3, r1, r3
 80129c6:	4413      	add	r3, r2
 80129c8:	3355      	adds	r3, #85	; 0x55
 80129ca:	78ba      	ldrb	r2, [r7, #2]
 80129cc:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80129ce:	2300      	movs	r3, #0
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3714      	adds	r7, #20
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr

080129dc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b082      	sub	sp, #8
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80129e4:	6878      	ldr	r0, [r7, #4]
 80129e6:	f7f0 f9f3 	bl	8002dd0 <HAL_Delay>
}
 80129ea:	bf00      	nop
 80129ec:	3708      	adds	r7, #8
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
	...

080129f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80129f4:	b480      	push	{r7}
 80129f6:	b085      	sub	sp, #20
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	4603      	mov	r3, r0
 80129fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80129fe:	2300      	movs	r3, #0
 8012a00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012a02:	79fb      	ldrb	r3, [r7, #7]
 8012a04:	2b03      	cmp	r3, #3
 8012a06:	d817      	bhi.n	8012a38 <USBH_Get_USB_Status+0x44>
 8012a08:	a201      	add	r2, pc, #4	; (adr r2, 8012a10 <USBH_Get_USB_Status+0x1c>)
 8012a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a0e:	bf00      	nop
 8012a10:	08012a21 	.word	0x08012a21
 8012a14:	08012a27 	.word	0x08012a27
 8012a18:	08012a2d 	.word	0x08012a2d
 8012a1c:	08012a33 	.word	0x08012a33
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012a20:	2300      	movs	r3, #0
 8012a22:	73fb      	strb	r3, [r7, #15]
    break;
 8012a24:	e00b      	b.n	8012a3e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012a26:	2302      	movs	r3, #2
 8012a28:	73fb      	strb	r3, [r7, #15]
    break;
 8012a2a:	e008      	b.n	8012a3e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	73fb      	strb	r3, [r7, #15]
    break;
 8012a30:	e005      	b.n	8012a3e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012a32:	2302      	movs	r3, #2
 8012a34:	73fb      	strb	r3, [r7, #15]
    break;
 8012a36:	e002      	b.n	8012a3e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012a38:	2302      	movs	r3, #2
 8012a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8012a3c:	bf00      	nop
  }
  return usb_status;
 8012a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3714      	adds	r7, #20
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr

08012a4c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b084      	sub	sp, #16
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	4603      	mov	r3, r0
 8012a54:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012a56:	79fb      	ldrb	r3, [r7, #7]
 8012a58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8012a5a:	79fb      	ldrb	r3, [r7, #7]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d102      	bne.n	8012a66 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8012a60:	2300      	movs	r3, #0
 8012a62:	73fb      	strb	r3, [r7, #15]
 8012a64:	e001      	b.n	8012a6a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8012a66:	2301      	movs	r3, #1
 8012a68:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8012a6a:	7bfb      	ldrb	r3, [r7, #15]
 8012a6c:	461a      	mov	r2, r3
 8012a6e:	2120      	movs	r1, #32
 8012a70:	4803      	ldr	r0, [pc, #12]	; (8012a80 <MX_DriverVbusFS+0x34>)
 8012a72:	f7f1 ff5b 	bl	800492c <HAL_GPIO_WritePin>
}
 8012a76:	bf00      	nop
 8012a78:	3710      	adds	r7, #16
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
 8012a7e:	bf00      	nop
 8012a80:	40020c00 	.word	0x40020c00

08012a84 <__errno>:
 8012a84:	4b01      	ldr	r3, [pc, #4]	; (8012a8c <__errno+0x8>)
 8012a86:	6818      	ldr	r0, [r3, #0]
 8012a88:	4770      	bx	lr
 8012a8a:	bf00      	nop
 8012a8c:	20000030 	.word	0x20000030

08012a90 <__libc_init_array>:
 8012a90:	b570      	push	{r4, r5, r6, lr}
 8012a92:	4d0d      	ldr	r5, [pc, #52]	; (8012ac8 <__libc_init_array+0x38>)
 8012a94:	4c0d      	ldr	r4, [pc, #52]	; (8012acc <__libc_init_array+0x3c>)
 8012a96:	1b64      	subs	r4, r4, r5
 8012a98:	10a4      	asrs	r4, r4, #2
 8012a9a:	2600      	movs	r6, #0
 8012a9c:	42a6      	cmp	r6, r4
 8012a9e:	d109      	bne.n	8012ab4 <__libc_init_array+0x24>
 8012aa0:	4d0b      	ldr	r5, [pc, #44]	; (8012ad0 <__libc_init_array+0x40>)
 8012aa2:	4c0c      	ldr	r4, [pc, #48]	; (8012ad4 <__libc_init_array+0x44>)
 8012aa4:	f000 f93c 	bl	8012d20 <_init>
 8012aa8:	1b64      	subs	r4, r4, r5
 8012aaa:	10a4      	asrs	r4, r4, #2
 8012aac:	2600      	movs	r6, #0
 8012aae:	42a6      	cmp	r6, r4
 8012ab0:	d105      	bne.n	8012abe <__libc_init_array+0x2e>
 8012ab2:	bd70      	pop	{r4, r5, r6, pc}
 8012ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ab8:	4798      	blx	r3
 8012aba:	3601      	adds	r6, #1
 8012abc:	e7ee      	b.n	8012a9c <__libc_init_array+0xc>
 8012abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ac2:	4798      	blx	r3
 8012ac4:	3601      	adds	r6, #1
 8012ac6:	e7f2      	b.n	8012aae <__libc_init_array+0x1e>
 8012ac8:	08012de8 	.word	0x08012de8
 8012acc:	08012de8 	.word	0x08012de8
 8012ad0:	08012de8 	.word	0x08012de8
 8012ad4:	08012dec 	.word	0x08012dec

08012ad8 <malloc>:
 8012ad8:	4b02      	ldr	r3, [pc, #8]	; (8012ae4 <malloc+0xc>)
 8012ada:	4601      	mov	r1, r0
 8012adc:	6818      	ldr	r0, [r3, #0]
 8012ade:	f000 b88d 	b.w	8012bfc <_malloc_r>
 8012ae2:	bf00      	nop
 8012ae4:	20000030 	.word	0x20000030

08012ae8 <free>:
 8012ae8:	4b02      	ldr	r3, [pc, #8]	; (8012af4 <free+0xc>)
 8012aea:	4601      	mov	r1, r0
 8012aec:	6818      	ldr	r0, [r3, #0]
 8012aee:	f000 b819 	b.w	8012b24 <_free_r>
 8012af2:	bf00      	nop
 8012af4:	20000030 	.word	0x20000030

08012af8 <memcpy>:
 8012af8:	440a      	add	r2, r1
 8012afa:	4291      	cmp	r1, r2
 8012afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b00:	d100      	bne.n	8012b04 <memcpy+0xc>
 8012b02:	4770      	bx	lr
 8012b04:	b510      	push	{r4, lr}
 8012b06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b0e:	4291      	cmp	r1, r2
 8012b10:	d1f9      	bne.n	8012b06 <memcpy+0xe>
 8012b12:	bd10      	pop	{r4, pc}

08012b14 <memset>:
 8012b14:	4402      	add	r2, r0
 8012b16:	4603      	mov	r3, r0
 8012b18:	4293      	cmp	r3, r2
 8012b1a:	d100      	bne.n	8012b1e <memset+0xa>
 8012b1c:	4770      	bx	lr
 8012b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8012b22:	e7f9      	b.n	8012b18 <memset+0x4>

08012b24 <_free_r>:
 8012b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012b26:	2900      	cmp	r1, #0
 8012b28:	d044      	beq.n	8012bb4 <_free_r+0x90>
 8012b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012b2e:	9001      	str	r0, [sp, #4]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	f1a1 0404 	sub.w	r4, r1, #4
 8012b36:	bfb8      	it	lt
 8012b38:	18e4      	addlt	r4, r4, r3
 8012b3a:	f000 f8e3 	bl	8012d04 <__malloc_lock>
 8012b3e:	4a1e      	ldr	r2, [pc, #120]	; (8012bb8 <_free_r+0x94>)
 8012b40:	9801      	ldr	r0, [sp, #4]
 8012b42:	6813      	ldr	r3, [r2, #0]
 8012b44:	b933      	cbnz	r3, 8012b54 <_free_r+0x30>
 8012b46:	6063      	str	r3, [r4, #4]
 8012b48:	6014      	str	r4, [r2, #0]
 8012b4a:	b003      	add	sp, #12
 8012b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b50:	f000 b8de 	b.w	8012d10 <__malloc_unlock>
 8012b54:	42a3      	cmp	r3, r4
 8012b56:	d908      	bls.n	8012b6a <_free_r+0x46>
 8012b58:	6825      	ldr	r5, [r4, #0]
 8012b5a:	1961      	adds	r1, r4, r5
 8012b5c:	428b      	cmp	r3, r1
 8012b5e:	bf01      	itttt	eq
 8012b60:	6819      	ldreq	r1, [r3, #0]
 8012b62:	685b      	ldreq	r3, [r3, #4]
 8012b64:	1949      	addeq	r1, r1, r5
 8012b66:	6021      	streq	r1, [r4, #0]
 8012b68:	e7ed      	b.n	8012b46 <_free_r+0x22>
 8012b6a:	461a      	mov	r2, r3
 8012b6c:	685b      	ldr	r3, [r3, #4]
 8012b6e:	b10b      	cbz	r3, 8012b74 <_free_r+0x50>
 8012b70:	42a3      	cmp	r3, r4
 8012b72:	d9fa      	bls.n	8012b6a <_free_r+0x46>
 8012b74:	6811      	ldr	r1, [r2, #0]
 8012b76:	1855      	adds	r5, r2, r1
 8012b78:	42a5      	cmp	r5, r4
 8012b7a:	d10b      	bne.n	8012b94 <_free_r+0x70>
 8012b7c:	6824      	ldr	r4, [r4, #0]
 8012b7e:	4421      	add	r1, r4
 8012b80:	1854      	adds	r4, r2, r1
 8012b82:	42a3      	cmp	r3, r4
 8012b84:	6011      	str	r1, [r2, #0]
 8012b86:	d1e0      	bne.n	8012b4a <_free_r+0x26>
 8012b88:	681c      	ldr	r4, [r3, #0]
 8012b8a:	685b      	ldr	r3, [r3, #4]
 8012b8c:	6053      	str	r3, [r2, #4]
 8012b8e:	4421      	add	r1, r4
 8012b90:	6011      	str	r1, [r2, #0]
 8012b92:	e7da      	b.n	8012b4a <_free_r+0x26>
 8012b94:	d902      	bls.n	8012b9c <_free_r+0x78>
 8012b96:	230c      	movs	r3, #12
 8012b98:	6003      	str	r3, [r0, #0]
 8012b9a:	e7d6      	b.n	8012b4a <_free_r+0x26>
 8012b9c:	6825      	ldr	r5, [r4, #0]
 8012b9e:	1961      	adds	r1, r4, r5
 8012ba0:	428b      	cmp	r3, r1
 8012ba2:	bf04      	itt	eq
 8012ba4:	6819      	ldreq	r1, [r3, #0]
 8012ba6:	685b      	ldreq	r3, [r3, #4]
 8012ba8:	6063      	str	r3, [r4, #4]
 8012baa:	bf04      	itt	eq
 8012bac:	1949      	addeq	r1, r1, r5
 8012bae:	6021      	streq	r1, [r4, #0]
 8012bb0:	6054      	str	r4, [r2, #4]
 8012bb2:	e7ca      	b.n	8012b4a <_free_r+0x26>
 8012bb4:	b003      	add	sp, #12
 8012bb6:	bd30      	pop	{r4, r5, pc}
 8012bb8:	200093f0 	.word	0x200093f0

08012bbc <sbrk_aligned>:
 8012bbc:	b570      	push	{r4, r5, r6, lr}
 8012bbe:	4e0e      	ldr	r6, [pc, #56]	; (8012bf8 <sbrk_aligned+0x3c>)
 8012bc0:	460c      	mov	r4, r1
 8012bc2:	6831      	ldr	r1, [r6, #0]
 8012bc4:	4605      	mov	r5, r0
 8012bc6:	b911      	cbnz	r1, 8012bce <sbrk_aligned+0x12>
 8012bc8:	f000 f88c 	bl	8012ce4 <_sbrk_r>
 8012bcc:	6030      	str	r0, [r6, #0]
 8012bce:	4621      	mov	r1, r4
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	f000 f887 	bl	8012ce4 <_sbrk_r>
 8012bd6:	1c43      	adds	r3, r0, #1
 8012bd8:	d00a      	beq.n	8012bf0 <sbrk_aligned+0x34>
 8012bda:	1cc4      	adds	r4, r0, #3
 8012bdc:	f024 0403 	bic.w	r4, r4, #3
 8012be0:	42a0      	cmp	r0, r4
 8012be2:	d007      	beq.n	8012bf4 <sbrk_aligned+0x38>
 8012be4:	1a21      	subs	r1, r4, r0
 8012be6:	4628      	mov	r0, r5
 8012be8:	f000 f87c 	bl	8012ce4 <_sbrk_r>
 8012bec:	3001      	adds	r0, #1
 8012bee:	d101      	bne.n	8012bf4 <sbrk_aligned+0x38>
 8012bf0:	f04f 34ff 	mov.w	r4, #4294967295
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	bd70      	pop	{r4, r5, r6, pc}
 8012bf8:	200093f4 	.word	0x200093f4

08012bfc <_malloc_r>:
 8012bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c00:	1ccd      	adds	r5, r1, #3
 8012c02:	f025 0503 	bic.w	r5, r5, #3
 8012c06:	3508      	adds	r5, #8
 8012c08:	2d0c      	cmp	r5, #12
 8012c0a:	bf38      	it	cc
 8012c0c:	250c      	movcc	r5, #12
 8012c0e:	2d00      	cmp	r5, #0
 8012c10:	4607      	mov	r7, r0
 8012c12:	db01      	blt.n	8012c18 <_malloc_r+0x1c>
 8012c14:	42a9      	cmp	r1, r5
 8012c16:	d905      	bls.n	8012c24 <_malloc_r+0x28>
 8012c18:	230c      	movs	r3, #12
 8012c1a:	603b      	str	r3, [r7, #0]
 8012c1c:	2600      	movs	r6, #0
 8012c1e:	4630      	mov	r0, r6
 8012c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c24:	4e2e      	ldr	r6, [pc, #184]	; (8012ce0 <_malloc_r+0xe4>)
 8012c26:	f000 f86d 	bl	8012d04 <__malloc_lock>
 8012c2a:	6833      	ldr	r3, [r6, #0]
 8012c2c:	461c      	mov	r4, r3
 8012c2e:	bb34      	cbnz	r4, 8012c7e <_malloc_r+0x82>
 8012c30:	4629      	mov	r1, r5
 8012c32:	4638      	mov	r0, r7
 8012c34:	f7ff ffc2 	bl	8012bbc <sbrk_aligned>
 8012c38:	1c43      	adds	r3, r0, #1
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	d14d      	bne.n	8012cda <_malloc_r+0xde>
 8012c3e:	6834      	ldr	r4, [r6, #0]
 8012c40:	4626      	mov	r6, r4
 8012c42:	2e00      	cmp	r6, #0
 8012c44:	d140      	bne.n	8012cc8 <_malloc_r+0xcc>
 8012c46:	6823      	ldr	r3, [r4, #0]
 8012c48:	4631      	mov	r1, r6
 8012c4a:	4638      	mov	r0, r7
 8012c4c:	eb04 0803 	add.w	r8, r4, r3
 8012c50:	f000 f848 	bl	8012ce4 <_sbrk_r>
 8012c54:	4580      	cmp	r8, r0
 8012c56:	d13a      	bne.n	8012cce <_malloc_r+0xd2>
 8012c58:	6821      	ldr	r1, [r4, #0]
 8012c5a:	3503      	adds	r5, #3
 8012c5c:	1a6d      	subs	r5, r5, r1
 8012c5e:	f025 0503 	bic.w	r5, r5, #3
 8012c62:	3508      	adds	r5, #8
 8012c64:	2d0c      	cmp	r5, #12
 8012c66:	bf38      	it	cc
 8012c68:	250c      	movcc	r5, #12
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	4638      	mov	r0, r7
 8012c6e:	f7ff ffa5 	bl	8012bbc <sbrk_aligned>
 8012c72:	3001      	adds	r0, #1
 8012c74:	d02b      	beq.n	8012cce <_malloc_r+0xd2>
 8012c76:	6823      	ldr	r3, [r4, #0]
 8012c78:	442b      	add	r3, r5
 8012c7a:	6023      	str	r3, [r4, #0]
 8012c7c:	e00e      	b.n	8012c9c <_malloc_r+0xa0>
 8012c7e:	6822      	ldr	r2, [r4, #0]
 8012c80:	1b52      	subs	r2, r2, r5
 8012c82:	d41e      	bmi.n	8012cc2 <_malloc_r+0xc6>
 8012c84:	2a0b      	cmp	r2, #11
 8012c86:	d916      	bls.n	8012cb6 <_malloc_r+0xba>
 8012c88:	1961      	adds	r1, r4, r5
 8012c8a:	42a3      	cmp	r3, r4
 8012c8c:	6025      	str	r5, [r4, #0]
 8012c8e:	bf18      	it	ne
 8012c90:	6059      	strne	r1, [r3, #4]
 8012c92:	6863      	ldr	r3, [r4, #4]
 8012c94:	bf08      	it	eq
 8012c96:	6031      	streq	r1, [r6, #0]
 8012c98:	5162      	str	r2, [r4, r5]
 8012c9a:	604b      	str	r3, [r1, #4]
 8012c9c:	4638      	mov	r0, r7
 8012c9e:	f104 060b 	add.w	r6, r4, #11
 8012ca2:	f000 f835 	bl	8012d10 <__malloc_unlock>
 8012ca6:	f026 0607 	bic.w	r6, r6, #7
 8012caa:	1d23      	adds	r3, r4, #4
 8012cac:	1af2      	subs	r2, r6, r3
 8012cae:	d0b6      	beq.n	8012c1e <_malloc_r+0x22>
 8012cb0:	1b9b      	subs	r3, r3, r6
 8012cb2:	50a3      	str	r3, [r4, r2]
 8012cb4:	e7b3      	b.n	8012c1e <_malloc_r+0x22>
 8012cb6:	6862      	ldr	r2, [r4, #4]
 8012cb8:	42a3      	cmp	r3, r4
 8012cba:	bf0c      	ite	eq
 8012cbc:	6032      	streq	r2, [r6, #0]
 8012cbe:	605a      	strne	r2, [r3, #4]
 8012cc0:	e7ec      	b.n	8012c9c <_malloc_r+0xa0>
 8012cc2:	4623      	mov	r3, r4
 8012cc4:	6864      	ldr	r4, [r4, #4]
 8012cc6:	e7b2      	b.n	8012c2e <_malloc_r+0x32>
 8012cc8:	4634      	mov	r4, r6
 8012cca:	6876      	ldr	r6, [r6, #4]
 8012ccc:	e7b9      	b.n	8012c42 <_malloc_r+0x46>
 8012cce:	230c      	movs	r3, #12
 8012cd0:	603b      	str	r3, [r7, #0]
 8012cd2:	4638      	mov	r0, r7
 8012cd4:	f000 f81c 	bl	8012d10 <__malloc_unlock>
 8012cd8:	e7a1      	b.n	8012c1e <_malloc_r+0x22>
 8012cda:	6025      	str	r5, [r4, #0]
 8012cdc:	e7de      	b.n	8012c9c <_malloc_r+0xa0>
 8012cde:	bf00      	nop
 8012ce0:	200093f0 	.word	0x200093f0

08012ce4 <_sbrk_r>:
 8012ce4:	b538      	push	{r3, r4, r5, lr}
 8012ce6:	4d06      	ldr	r5, [pc, #24]	; (8012d00 <_sbrk_r+0x1c>)
 8012ce8:	2300      	movs	r3, #0
 8012cea:	4604      	mov	r4, r0
 8012cec:	4608      	mov	r0, r1
 8012cee:	602b      	str	r3, [r5, #0]
 8012cf0:	f7ef ffd0 	bl	8002c94 <_sbrk>
 8012cf4:	1c43      	adds	r3, r0, #1
 8012cf6:	d102      	bne.n	8012cfe <_sbrk_r+0x1a>
 8012cf8:	682b      	ldr	r3, [r5, #0]
 8012cfa:	b103      	cbz	r3, 8012cfe <_sbrk_r+0x1a>
 8012cfc:	6023      	str	r3, [r4, #0]
 8012cfe:	bd38      	pop	{r3, r4, r5, pc}
 8012d00:	200093f8 	.word	0x200093f8

08012d04 <__malloc_lock>:
 8012d04:	4801      	ldr	r0, [pc, #4]	; (8012d0c <__malloc_lock+0x8>)
 8012d06:	f000 b809 	b.w	8012d1c <__retarget_lock_acquire_recursive>
 8012d0a:	bf00      	nop
 8012d0c:	200093fc 	.word	0x200093fc

08012d10 <__malloc_unlock>:
 8012d10:	4801      	ldr	r0, [pc, #4]	; (8012d18 <__malloc_unlock+0x8>)
 8012d12:	f000 b804 	b.w	8012d1e <__retarget_lock_release_recursive>
 8012d16:	bf00      	nop
 8012d18:	200093fc 	.word	0x200093fc

08012d1c <__retarget_lock_acquire_recursive>:
 8012d1c:	4770      	bx	lr

08012d1e <__retarget_lock_release_recursive>:
 8012d1e:	4770      	bx	lr

08012d20 <_init>:
 8012d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d22:	bf00      	nop
 8012d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d26:	bc08      	pop	{r3}
 8012d28:	469e      	mov	lr, r3
 8012d2a:	4770      	bx	lr

08012d2c <_fini>:
 8012d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d2e:	bf00      	nop
 8012d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012d32:	bc08      	pop	{r3}
 8012d34:	469e      	mov	lr, r3
 8012d36:	4770      	bx	lr
